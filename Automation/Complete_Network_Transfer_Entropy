{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/hegdenischay/NEURONNet/blob/main/Automation/Complete_Network_Transfer_Entropy\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "cellView": "form",
        "id": "HBtbl9iM-hha"
      },
      "outputs": [],
      "source": [
        "size =   100#@param {type:\"integer\"}\n",
        "dimension = \"High\" #@param [\"High\", \"Low\"]\n",
        "epochs =  20 #@param {type:\"integer\"}\n",
        "A_plus = 0.01 #@param {type:\"number\"}\n",
        "A_minus = -0.0011 #@param {type: \"number\"}\n",
        "lateralDelay = 5 #@param {type: \"number\"}"
      ],
      "id": "HBtbl9iM-hha"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "cellView": "form",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 113,
          "referenced_widgets": [
            "80ebd91b5e354b6f8071a631fa2aff5e",
            "a506ee872483488cb3cebf3f94bedc94",
            "613c6e9f892c470fa476fa3470c4c3cd",
            "6bb671ecce3848faa30c5bb6f5fe5cb3",
            "c0a4c36cc78c40b7a7d100f0f7bac6b1",
            "7f769bc98d0843b8aee51c8908ea1819",
            "9dac16c9719a4ac1af6358195ed1ca22",
            "61565e225dc34226b683b29b8085cb9d",
            "bf82a076447743418768652b2244e89e",
            "75ce9fdf78924d5a8d09f9fa6018c119",
            "8faa89d263cd48c68e6cb174ee1b9477"
          ]
        },
        "id": "0c4-GSDp5oLJ",
        "outputId": "75c037e5-0b86-4425-fa3b-1fe9510d5605"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Checkbox(value=False, description='Add noise')"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "80ebd91b5e354b6f8071a631fa2aff5e"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "VBox(children=(FloatText(value=0.1, description='Amplitude:'), FloatText(value=15.0, description='sets:')))"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "6bb671ecce3848faa30c5bb6f5fe5cb3"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "#@title Parameters\n",
        "from ipywidgets import FloatText, Checkbox, VBox, Dropdown\n",
        "import ipywidgets as widgets\n",
        "\n",
        "currentAmp = FloatText(description='Amplitude:', value=0.1)\n",
        "sets = FloatText(description='sets:', value=15)\n",
        "noiseSD = FloatText(description='noiseSD:', value=0.01)\n",
        "\n",
        "vb = VBox(children = [currentAmp, sets])\n",
        "with_noise = Checkbox(description='Add noise')\n",
        "\n",
        "def add_noise(button):\n",
        "    if button['new']:\n",
        "        vb.children = [currentAmp, sets, noiseSD]\n",
        "    else:\n",
        "        vb.children = [currentAmp, sets]\n",
        "\n",
        "with_noise.observe(add_noise, names='value')\n",
        "display(with_noise)\n",
        "display(vb)"
      ],
      "id": "0c4-GSDp5oLJ"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "cellView": "form",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 145,
          "referenced_widgets": [
            "1a09e6c6b2534ef19346482ce844bcb5",
            "266f7095f68b49cbb71451051f2475fd",
            "9cab9187449c4a08886636e2e6a75d53",
            "f47de5c49b054231ad3309bb58b1f0ad",
            "e8c1994de6e643b0bddac6b430733e65",
            "2f1a89c38d044833ac5383b0c0b6bccc",
            "634b5ca951384347a64971d4d1c1fafd",
            "6ebd08a969fb44f3a0fd82f4aa490150",
            "498ee61a61fc4e7b9f85ca606a58c7d2",
            "4bf49209f62643a782cba1be3a71e4a6",
            "7b1eae17d24b4fc8902851ac4cd95196",
            "428ecd7fb05943aab50ac889ebe7fece",
            "cc1d04f6ff5a4faf827e21bb50665a4a",
            "58a7f326e5cc455eb01c0a710452e9eb"
          ]
        },
        "id": "R-P8mRYb5rGX",
        "outputId": "cc5b8d57-5562-4e9a-8127-b45d7d62d91b"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "Dropdown(description='distribution:', options=('uniform', 'normal', 'poisson'), value='uniform')"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "1a09e6c6b2534ef19346482ce844bcb5"
            }
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "VBox(children=(FloatText(value=1.0, description='low:'), FloatText(value=1.5, description='high:'), FloatText(…"
            ],
            "application/vnd.jupyter.widget-view+json": {
              "version_major": 2,
              "version_minor": 0,
              "model_id": "f47de5c49b054231ad3309bb58b1f0ad"
            }
          },
          "metadata": {}
        }
      ],
      "source": [
        "#@title Distribution\n",
        "from ipywidgets import FloatText, Checkbox, VBox, Dropdown\n",
        "import ipywidgets as widgets\n",
        "\n",
        "distribution = Dropdown(description='distribution:', options=[\"uniform\", \"normal\", \"poisson\"], value=\"uniform\")\n",
        "low = FloatText(description='low:', value=1)\n",
        "high = FloatText(description='high:', value=1.5)\n",
        "leng = FloatText(description='size:', value=sets.value)\n",
        "mean = FloatText(description='mean:', value=1)\n",
        "sd = FloatText(description='SD:', value=0.5)\n",
        "lam = FloatText(description='lam', value=3)\n",
        "\n",
        "vb2 = VBox(children = [low, high, leng])\n",
        "\n",
        "def change_widgets(button):\n",
        "    if button['new'] == \"uniform\":\n",
        "        vb2.children = [low, high, leng]\n",
        "    elif button['new'] == \"normal\":\n",
        "        vb2.children = [mean, sd, leng]\n",
        "    elif button['new'] == \"poisson\":\n",
        "        vb2.children = [lam, sets]\n",
        "\n",
        "distribution.observe(change_widgets, names='value')\n",
        "display(distribution)\n",
        "display(vb2)"
      ],
      "id": "R-P8mRYb5rGX"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L_9d7LtSWFA0"
      },
      "source": [
        "### Install Neuron"
      ],
      "id": "L_9d7LtSWFA0"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "CHPcM6GtV5K_",
        "outputId": "5f21eaab-06ab-44e5-82d6-202b86ca0ec0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: pandas in /usr/local/lib/python3.7/dist-packages (1.3.5)\n",
            "Collecting neuron\n",
            "  Downloading NEURON-8.1.0-cp37-cp37m-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (15.0 MB)\n",
            "\u001b[K     |████████████████████████████████| 15.0 MB 3.8 MB/s \n",
            "\u001b[?25hRequirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (1.21.6)\n",
            "Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2022.1)\n",
            "Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.7/dist-packages (from pandas) (2.8.2)\n",
            "Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.7/dist-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)\n",
            "Installing collected packages: neuron\n",
            "Successfully installed neuron-8.1.0\n"
          ]
        }
      ],
      "source": [
        "pip install pandas neuron"
      ],
      "id": "CHPcM6GtV5K_"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jcQEX_3vHOUz"
      },
      "outputs": [],
      "source": [
        "# %load_ext google.colab.data_table\n",
        "# import pandas\n",
        "# data = {'Time taken': ['5 sets (with learning)', '5 sets (without learning)', '30 sets (with learning)', '30 sets (without)'], 'Time (s)': [64.94386959075928, 64.94386959075928-47.318169593811035, 163.1467843055725, 163.1467843055725-123.22148942947388]}  \n",
        "# pandas.DataFrame(data)"
      ],
      "id": "jcQEX_3vHOUz"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MWYTz03xLsWS"
      },
      "source": [
        "### Import prerequisites"
      ],
      "id": "MWYTz03xLsWS"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1452ffae"
      },
      "outputs": [],
      "source": [
        "import time\n",
        "totalstart = time.time()\n",
        "import os\n",
        "if os.getcwd() != \"/content\":\n",
        "    # we are not in google colab, assume hebbian library is in current dir\n",
        "    from hebb import ORN, MCELL, GCELL\n",
        "else:\n",
        "    # download from git\n",
        "    import shutil, requests\n",
        "    url = 'https://cloud.operationtulip.com/s/t8nbn8Y582w94P3/download/git.zip'\n",
        "    response = requests.get(url, stream=True)\n",
        "    with open('git.zip', 'wb') as out_file:\n",
        "        shutil.copyfileobj(response.raw, out_file)\n",
        "    del response\n",
        "    import zipfile\n",
        "    with zipfile.ZipFile('git.zip', 'r') as zip_ref:\n",
        "        zip_ref.extractall('')\n"
      ],
      "id": "1452ffae"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "63491b2a"
      },
      "outputs": [],
      "source": [
        "!nrnivmodl &>/dev/null"
      ],
      "id": "63491b2a"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "EYQ3O2_rte6s"
      },
      "outputs": [],
      "source": [
        "from neuron import h #.h is a HOC object instance & gui from neuron can also be imported \n",
        "from math import pi                  \n",
        "from neuron.units import ms,mV\n",
        "from hebb_test import ORN, MCELL, GCELL\n",
        "h.load_file('stdrun.hoc')                #Allows us to do a high level simulation\n",
        "pc = h.ParallelContext()\n",
        "import random  \n",
        "import matplotlib.pyplot as plt1\n",
        "\n",
        "from bokeh.io import output_notebook\n",
        "import bokeh.plotting as plt2\n",
        "output_notebook()\n",
        "\n",
        "import seaborn as sns"
      ],
      "id": "EYQ3O2_rte6s"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IqVU4uAHwxiJ"
      },
      "source": [
        "## Helper Functions"
      ],
      "id": "IqVU4uAHwxiJ"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "9o2Z2RO4_o5B"
      },
      "outputs": [],
      "source": [
        "def stairstep(lo: float, hi: float, duration: int, max_duration: int = 200, noise: list = []) -> list:\n",
        "    # duration and max_duration are in ms\n",
        "    ans = [lo if i < duration else hi for i in range(0,max_duration)]\n",
        "    if len(noise) == 0:\n",
        "        return ans\n",
        "    else:\n",
        "        assert len(ans) == len(noise)\n",
        "        return [ans[i]+noise[i] for i in range(len(ans))]\n",
        "    # return [0+0.8*(i/duration) if i < duration else 0 for i in range(0,max_duration)]\n",
        "    # visualize input "
      ],
      "id": "9o2Z2RO4_o5B"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5odvQsJ7wzh_"
      },
      "outputs": [],
      "source": [
        "def netConMaker(source, dest, weights, delay, threshold, place='axon', type='exc'):\n",
        "    # print(source, dest)\n",
        "    if place == 'axon':\n",
        "        if type == 'exc':\n",
        "            netcon = h.NetCon(source.axon(0.5)._ref_v, dest.dendexcisyn, sec=source.axon)\n",
        "        elif type == 'inh':\n",
        "            netcon = h.NetCon(source.axon(0.5)._ref_v, dest.dendinhisyn, sec=source.axon)\n",
        "    elif place == 'soma':\n",
        "        if type == 'exc':\n",
        "            netcon = h.NetCon(source.soma(0.5)._ref_v, dest.dendexcisyn, sec=source.soma)\n",
        "        elif type == 'inh':\n",
        "            netcon = h.NetCon(source.soma(0.5)._ref_v, dest.dendinhisyn, sec=source.soma)\n",
        "    netcon.weight[0] = weights\n",
        "    netcon.delay = delay\n",
        "    netcon.threshold = threshold\n",
        "    return netcon"
      ],
      "id": "5odvQsJ7wzh_"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fyVJT9eYTbt1"
      },
      "outputs": [],
      "source": [
        "def latConMaker(source, dest, weights, delay, threshold, type='exc'):\n",
        "    if type == 'exc':\n",
        "        netcon = h.NetCon(source.dend(0.5)._ref_v, dest.dendexcisyn, sec=source.dend)\n",
        "    else:\n",
        "        netcon = h.NetCon(source.dend(0.5)._ref_v, dest.dendinhisyn, sec=source.dend)\n",
        "    netcon.weight[0] = weights\n",
        "    netcon.delay = delay\n",
        "    netcon.threshold = threshold\n",
        "    return netcon"
      ],
      "id": "fyVJT9eYTbt1"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "G2RZsImWw1pX"
      },
      "outputs": [],
      "source": [
        "%matplotlib inline\n",
        "def plotCell(source, name, addendum=''):\n",
        "    recording_cell = source\n",
        "    cell_axon = h.Vector().record(recording_cell.axon(0.5)._ref_v)\n",
        "    cell_dend = h.Vector().record(recording_cell.dend(0.5)._ref_v)\n",
        "    t = h.Vector().record(h._ref_t)\n",
        "\n",
        "    h.finitialize(-70 * mV)\n",
        "    h.continuerun(300 * ms)\n",
        "\n",
        "    f = plt1.figure(figsize=(16,9))\n",
        "    ax = f.add_subplot(1,1,1)\n",
        "    ax.plot(t, list(cell_axon), label=name+' axon '+addendum)\n",
        "    ax.plot(t, list(cell_dend), label=name+' dendrite '+addendum)\n",
        "    ax.legend(loc=\"upper right\")\n",
        "    ax.set_xlabel('t (ms)')\n",
        "    ax.set_ylabel('v (mV)')\n",
        "    plt1.show()"
      ],
      "id": "G2RZsImWw1pX"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fRU2J5WKw3Cm"
      },
      "outputs": [],
      "source": [
        "import math\n",
        "def generate_L_weight_delta(first, second):\n",
        "    A_plus = 0.01\n",
        "    A_minus = -0.011\n",
        "    tau_pre =20*ms\n",
        "    tau_post =20*ms\n",
        "    delta_t = [(second[iter] - first[iter]) for iter in range(min(len(first),len(second)))]\n",
        "    delta_w_list = [A_plus*math.exp(-delta_t[iter]/tau_post) if delta_t[iter] >=0 else A_minus*math.exp(delta_t[iter]/tau_pre) for iter in range(min(len(first),len(second)))]  \n",
        "    delta_w = sum(delta_w_list)\n",
        "    return delta_w"
      ],
      "id": "fRU2J5WKw3Cm"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "K6OJ0E7jV4nG"
      },
      "outputs": [],
      "source": [
        "from IPython.display import HTML, display\n",
        "import time\n",
        "\n",
        "def progress(value, max=100):\n",
        "    return HTML(\"\"\"\n",
        "        <progress\n",
        "            value='{value}'\n",
        "            max='{max}',\n",
        "            style='width: 100%'\n",
        "        >\n",
        "            {value}\n",
        "        </progress>\n",
        "    \"\"\".format(value=value, max=max))"
      ],
      "id": "K6OJ0E7jV4nG"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "90Kn6XE2V6nW"
      },
      "source": [
        "## Network Definitions"
      ],
      "id": "90Kn6XE2V6nW"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IGDhgsQEYa2X"
      },
      "outputs": [],
      "source": [
        "class AON:\n",
        "    def __init__(self,M,weights,delay1=1,delay2=2,delay3=3,delay4=4):\n",
        "        wMM=weights[0]\n",
        "        wMG=weights[1]\n",
        "        wGM=weights[2]\n",
        "        wGG=weights[3]\n",
        "        \n",
        "        self.M = M #Set no.\n",
        "        self.th = -70\n",
        "        self.maindelay = 5\n",
        "\n",
        "        self.M1=MCELL(1,self.M)\n",
        "        self.M2=MCELL(2,self.M)\n",
        "        self.G1=GCELL(3,self.M)\n",
        "        self.G2=GCELL(4,self.M)\n",
        "        self.cells = [self.M1, self.M2, self.G1, self.G2]\n",
        "        \n",
        "        self.nc0 = netConMaker(self.M1, self.M2, wMM, delay1+self.maindelay, self.th, 'soma') #Connecting E1 to E2\n",
        "        self.nc1 = netConMaker(self.M2, self.M1, wMM, delay2+self.maindelay, self.th, 'soma') #Connecting E2 to E1\n",
        "        self.nc2 = netConMaker(self.M2, self.G1, wMG, delay2+self.maindelay, self.th, 'soma') #Connecting E2 to I1\n",
        "        self.nc3 = netConMaker(self.G1, self.M2, wGM, delay3+self.maindelay, self.th, 'soma', type='inh') #Connecting I1 to E2\n",
        "        self.nc4 = netConMaker(self.G1, self.G2, wGG, delay3+self.maindelay, self.th, 'soma', type='inh') #Connecting I1 to I2\n",
        "        self.nc5 = netConMaker(self.G2, self.G1, wGG, delay4+self.maindelay, self.th, 'soma', type='inh') #Connecting I2 to I1\n",
        "        self.nc6 = netConMaker(self.G2, self.M1, wGM, delay4+self.maindelay, self.th, 'soma', type='inh') #Connecting I2 to E1\n",
        "        self.nc7 = netConMaker(self.M1, self.G2, wMG, delay1+self.maindelay, self.th, 'soma') #Connecting E1 to I2\n",
        "        self.nc8 = netConMaker(self.M1, self.G1, wMG, delay1+self.maindelay, self.th, 'soma') #Connecting E1 to I1\n",
        "        self.nc9 = netConMaker(self.G1, self.M1, wGM, delay3+self.maindelay, self.th, 'soma', type='inh') #Connecting I1 to E1"
      ],
      "id": "IGDhgsQEYa2X"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6b8b7d01"
      },
      "outputs": [],
      "source": [
        "#Gives one 2 coupled neuron using freeman's topology in olfactory bulb\n",
        "class CONNECTING:\n",
        "\n",
        "    def __init__(self,M,weights,delay1=0,delay2=2,delay3=4,delay4=6):\n",
        "        wMM=weights[0]\n",
        "        wMG=weights[1]\n",
        "        wGM=weights[2]\n",
        "        wGG=weights[3]\n",
        "        \n",
        "        self.M = M #Set no.\n",
        "        self.th = -70\n",
        "        self.maindelay = 5\n",
        "        \n",
        "        #Making 2 neurons\n",
        "        self.orn = ORN(1,self.M)\n",
        "        self.P1=MCELL(2,self.M)\n",
        "        self.P2=MCELL(3,self.M)\n",
        "        self.cells = [self.orn, self.P1, self.P2]\n",
        "        \n",
        "        #Giving current pulse\n",
        "        self.stim = h.IClamp(self.orn.dend(0.5))  #P1.soma to P1.dend\n",
        "        # self.stimArr = [h.IClamp(self.orn.ciliumArr[i](0.5)) for i in range(len(self.orn.ciliumArr))]\n",
        "        if with_noise.value == True:\n",
        "            self.noise = np.random.normal(0, noiseSD.value, 100)\n",
        "            self.input = h.Vector(stairstep(0,currentAmp.value,10,100,self.noise))\n",
        "            self.tv = h.Vector([i for i in range(100)])\n",
        "            self.stim.delay = 10\n",
        "            self.stim.dur = 100\n",
        "            self.stim.amp = 0\n",
        "            self.input.play(self.stim._ref_amp, self.tv, True) \n",
        "        else:\n",
        "            self.stim.delay = 10\n",
        "            self.stim.dur = 100\n",
        "            self.stim.amp = currentAmp.value\n",
        "        \n",
        "        self.nc0 = netConMaker(self.orn, self.P1, wMM, self.maindelay+delay2, self.th, 'soma') #Connecting ORN to P1\n",
        "        self.nc1 = netConMaker(self.P1, self.P2, wMM, self.maindelay+delay3, self.th, 'soma') #Connecting P1 to P2\n",
        "        self.nc2 = netConMaker(self.P2, self.P1, wMM, self.maindelay+delay3, self.th, 'soma') #Connecting P2 to P1\n",
        "    \n",
        "        # 4-coupled\n",
        "\n",
        "        self.M1=MCELL(1,self.M)\n",
        "        self.M2=MCELL(2,self.M)\n",
        "        self.G1=GCELL(3,self.M)\n",
        "        self.G2=GCELL(4,self.M)\n",
        "        self.cells.extend([self.M1, self.M2, self.G1, self.G2])\n",
        "\n",
        "        self.nc14 = netConMaker(self.orn, self.M1, wMM, delay1+self.maindelay, self.th, 'soma')\n",
        "        self.nc3 = netConMaker(self.P1, self.M1, wMM, delay1+self.maindelay, self.th, 'soma')\n",
        "        self.nc4 = netConMaker(self.M1, self.M2, wMM, delay2+self.maindelay, self.th, 'soma') #Connecting M1 to M2\n",
        "        self.nc5 = netConMaker(self.M2, self.M1, wMM, delay2+self.maindelay, self.th, 'soma') #Connecting M2 to M1\n",
        "        self.nc6 = netConMaker(self.M2, self.G1, wMG, delay2+self.maindelay, self.th, 'soma') #Connecting M2 to G1\n",
        "        self.nc7 = netConMaker(self.G1, self.M2, wGM, delay2+self.maindelay, self.th, 'soma', type='inh') #Connecting G1 to M2\n",
        "        self.nc8 = netConMaker(self.G1, self.G2, wGG, delay3+self.maindelay, self.th, 'soma', type='inh') #Connecting G1 to G2\n",
        "        self.nc9 = netConMaker(self.G2, self.G1, wGG, delay3+self.maindelay, self.th, 'soma', type='inh') #Connecting G2 to G1\n",
        "        self.nc10 = netConMaker(self.G2, self.M1, wGM, delay4+self.maindelay, self.th, 'soma', type='inh') #Connecting G2 to M1\n",
        "        self.nc11 = netConMaker(self.M1, self.G2, wMG, delay4+self.maindelay, self.th, 'soma') #Connecting M1 to G2\n",
        "        self.nc12 = netConMaker(self.M1, self.G1, wMG, delay1+self.maindelay, self.th, 'soma') #Connecting M1 to G1\n",
        "        self.nc13 = netConMaker(self.G1, self.M1, wGM, delay1+self.maindelay, self.th, 'soma', type='inh') #Connecting G1 to M1"
      ],
      "id": "6b8b7d01"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "e3d8b0fd"
      },
      "outputs": [],
      "source": [
        "\n",
        "class LATERAL:\n",
        "    \"\"\"Laterally coupling N-2 coupled neurons\n",
        "    \"\"\"\n",
        "    def __init__(self,N,weights,delay1=0,delay2=2,delay3=4,delay4=6):\n",
        "        wMML=weights[1]\n",
        "        wGGL=weights[5]\n",
        "        \n",
        "        self.N = N\n",
        "        self.th = -70\n",
        "        self.maindelay = lateralDelay\n",
        "        self.sets = [CONNECTING(i, weights) for i in range(N)]\n",
        "            \n",
        "        self.twoCupArr = []\n",
        "        for r in range(0,N-1):\n",
        "          #Connecting P1[0] to P1[1]\n",
        "          # make a list for easier access\n",
        "          netConList = []\n",
        "          netConList.append(latConMaker(self.sets[r].P1, self.sets[r+1].P1,wMML,self.maindelay+delay2,self.th)) #P1[0] to P1[1]\n",
        "          netConList.append(latConMaker(self.sets[r+1].P1, self.sets[r].P1, wMML, self.maindelay+delay2,self.th))\n",
        "\n",
        "          self.twoCupArr.append(netConList)\n",
        "        self.fourCupArr = []\n",
        "        for r in range(1,N-1):\n",
        "            for j in range(N-r):\n",
        "                netConList = []\n",
        "                netConList.append(latConMaker(self.sets[j].M1, self.sets[j+r].M1, wMML, self.maindelay+delay3, self.th)) #Connect M1[0] to M1[1]\n",
        "                netConList.append(latConMaker(self.sets[j+r].M1, self.sets[j].M1, wMML, self.maindelay+delay3, self.th)) #Connect M1[1] to M1[0]\n",
        "                netConList.append(latConMaker(self.sets[j].G1, self.sets[j+r].G1, wGGL, self.maindelay+delay2, self.th, 'inh')) #Connecting G1[0] to G1[1]\n",
        "                netConList.append(latConMaker(self.sets[j+r].G1, self.sets[j].G1, wGGL, self.maindelay+delay2, self.th, 'inh')) #Connecting G1[1] to G1[0]\n",
        "                self.fourCupArr.append(netConList)\n",
        "\n",
        "        # add AON and PC\n",
        "        self.AON = AON(5,weights)\n",
        "        self.PC = AON(6,weights)\n",
        "        self.DPC = GCELL(7,self.N)\n",
        "        # add noise to AON's M1\n",
        "        self.stim = h.IClamp(self.AON.M1.dend(0.5))  #P1.soma to P1.dend\n",
        "        self.noise = np.random.normal(0, 0.1, 100)\n",
        "        self.input = h.Vector(self.noise)\n",
        "        self.tv = h.Vector([i for i in range(100)])\n",
        "        self.input.play(self.stim._ref_amp, self.tv, True)\n",
        "        self.otherNetCons = []\n",
        "        self.otherNetCons.append(netConMaker(self.sets[0].M1, self.AON.M1, wMML, self.maindelay+delay2, self.th, 'soma')) # 4-coupled M1 -> AON's E1\n",
        "        for i in self.sets:\n",
        "            for j in self.sets:\n",
        "                if i != j:\n",
        "                    self.otherNetCons.append(netConMaker(i.P1, j.P1, wMML, self.maindelay+delay2, self.th, 'soma')) # all-to-all in P1\n",
        "                    self.otherNetCons.append(netConMaker(i.M1, j.M1, wMML, self.maindelay+delay3, self.th, 'soma')) # all-to-all in M1\n",
        "                    self.otherNetCons.append(netConMaker(i.G1, j.G1, wGGL, self.maindelay+delay2, self.th, 'soma')) # all-to-all in M1\n",
        "\n",
        "        for i in self.sets:\n",
        "            self.otherNetCons.append(netConMaker(self.AON.M1, i.P2, wMML, self.maindelay+delay2, self.th, 'soma')) # AON E1 -> 2-coupled P2\n",
        "        if dimension == \"High\":\n",
        "            self.otherNetCons.append(netConMaker(self.PC.M1, self.AON.G1, wMML, self.maindelay+delay3+10, self.th, 'soma')) # PC's A1 to AON's I1\n",
        "        self.otherNetCons.append(netConMaker(self.sets[0].M1, self.PC.M1, wMML, self.maindelay+delay2, self.th, 'soma')) # M1 to A1\n",
        "        for i in self.sets:\n",
        "            self.otherNetCons.append(netConMaker(self.AON.M1, i.G1, wMML, self.maindelay+delay2, self.th, 'soma')) # AON's E1 -> 4-coupled G1\n",
        "        \n",
        "        self.otherNetCons.append(netConMaker(self.PC.G1, self.DPC, wMML/100000, self.maindelay+delay3, self.th, 'soma', 'inh')) # PC's B1 -> DPC\n",
        "        self.otherNetCons.append(netConMaker(self.DPC, self.PC.G1, wMML/100000, self.maindelay+delay3, self.th, 'soma')) # DPC -> PC's B1\n",
        "        if dimension == \"High\":\n",
        "            for i in self.sets:\n",
        "                self.otherNetCons.append(netConMaker(self.DPC, i.G1, wMML/100000, self.maindelay+delay3+10, self.th))# DPC to G1 \n",
        "        self.otherNetCons.append(netConMaker(self.sets[-1].G1, self.DPC, wMML, self.maindelay+4, self.th, 'soma'))\n",
        "        \n"
      ],
      "id": "e3d8b0fd"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "akuCSVQv7mlc"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "if distribution.value == \"uniform\":\n",
        "    weights = np.random.uniform(low.value, high.value, 2*int(leng.value)-1)\n",
        "elif distribution.value == \"normal\":\n",
        "    weights = np.random.normal(mean.value, sd.value, 2*int(leng.value)-1)\n",
        "elif distribution.value == \"poisson\":\n",
        "    weights = np.random.poisson(lam.value, 2*int(leng.value)-1)"
      ],
      "id": "akuCSVQv7mlc"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "665f6425"
      },
      "outputs": [],
      "source": [
        "#Give N value to get N no. of 2 coupled neurons laterally connected\n",
        "#given_input_from_user = int(input('Enter the number of 2 coupled sets required: '))\n",
        "import numpy as np\n",
        "# size = 5\n",
        "low, high = 1, 5\n",
        "# all_weights = np.random.uniform(low, high,2*given_input_from_user-1)\n",
        "# all_weights = [4.65058555, 2.92840154, 3.68134116, 1.30487304, 1.07771946, 3.15136447, 1.04247865, 2.29878494, 2.01195344]\n",
        "# all_weights = [0.95336892, 0.87793015, 0.71060386, 0.88298338, 0.84561174, 0.5006465, 0.60983793, 0.88890724, 0.85189888]\n",
        "L1=LATERAL(size,weights)"
      ],
      "id": "665f6425"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VWHFMMFXWjhI"
      },
      "source": [
        "# Show Topology"
      ],
      "id": "VWHFMMFXWjhI"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0e0ed526",
        "outputId": "95dc5bf1-0636-4a54-aff1-a186f1e7a62c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "|-|       Set [1]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [1]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [1]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [1]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [1]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [1]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [1]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [1]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [1]_Mcell [2].soma(0-1)\n",
            "   `|       Set [1]_Mcell [2].dend(0-1)\n",
            " `|       Set [1]_Mcell [2].axon(0-1)\n",
            "|-|       Set [1]_Mcell [3].soma(0-1)\n",
            "   `|       Set [1]_Mcell [3].dend(0-1)\n",
            " `|       Set [1]_Mcell [3].axon(0-1)\n",
            "|-|       Set [1]_Mcell [1].soma(0-1)\n",
            "   `|       Set [1]_Mcell [1].dend(0-1)\n",
            " `|       Set [1]_Mcell [1].axon(0-1)\n",
            "|-|       Set [1]_Mcell [2].soma(0-1)\n",
            "   `|       Set [1]_Mcell [2].dend(0-1)\n",
            " `|       Set [1]_Mcell [2].axon(0-1)\n",
            "|--|       Set [1]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [1]_Gcell [3].dend(0-1)\n",
            " `-|       Set [1]_Gcell [3].axon(0-1)\n",
            "|--|       Set [1]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [1]_Gcell [4].dend(0-1)\n",
            " `-|       Set [1]_Gcell [4].axon(0-1)\n",
            "|-|       Set [2]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [2]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [2]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [2]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [2]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [2]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [2]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [2]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [2]_Mcell [2].soma(0-1)\n",
            "   `|       Set [2]_Mcell [2].dend(0-1)\n",
            " `|       Set [2]_Mcell [2].axon(0-1)\n",
            "|-|       Set [2]_Mcell [3].soma(0-1)\n",
            "   `|       Set [2]_Mcell [3].dend(0-1)\n",
            " `|       Set [2]_Mcell [3].axon(0-1)\n",
            "|-|       Set [2]_Mcell [1].soma(0-1)\n",
            "   `|       Set [2]_Mcell [1].dend(0-1)\n",
            " `|       Set [2]_Mcell [1].axon(0-1)\n",
            "|-|       Set [2]_Mcell [2].soma(0-1)\n",
            "   `|       Set [2]_Mcell [2].dend(0-1)\n",
            " `|       Set [2]_Mcell [2].axon(0-1)\n",
            "|--|       Set [2]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [2]_Gcell [3].dend(0-1)\n",
            " `-|       Set [2]_Gcell [3].axon(0-1)\n",
            "|--|       Set [2]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [2]_Gcell [4].dend(0-1)\n",
            " `-|       Set [2]_Gcell [4].axon(0-1)\n",
            "|-|       Set [3]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [3]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [3]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [3]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [3]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [3]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [3]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [3]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [3]_Mcell [2].soma(0-1)\n",
            "   `|       Set [3]_Mcell [2].dend(0-1)\n",
            " `|       Set [3]_Mcell [2].axon(0-1)\n",
            "|-|       Set [3]_Mcell [3].soma(0-1)\n",
            "   `|       Set [3]_Mcell [3].dend(0-1)\n",
            " `|       Set [3]_Mcell [3].axon(0-1)\n",
            "|-|       Set [3]_Mcell [1].soma(0-1)\n",
            "   `|       Set [3]_Mcell [1].dend(0-1)\n",
            " `|       Set [3]_Mcell [1].axon(0-1)\n",
            "|-|       Set [3]_Mcell [2].soma(0-1)\n",
            "   `|       Set [3]_Mcell [2].dend(0-1)\n",
            " `|       Set [3]_Mcell [2].axon(0-1)\n",
            "|--|       Set [3]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [3]_Gcell [3].dend(0-1)\n",
            " `-|       Set [3]_Gcell [3].axon(0-1)\n",
            "|--|       Set [3]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [3]_Gcell [4].dend(0-1)\n",
            " `-|       Set [3]_Gcell [4].axon(0-1)\n",
            "|-|       Set [4]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [4]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [4]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [4]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [4]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [4]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [4]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [4]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [4]_Mcell [2].soma(0-1)\n",
            "   `|       Set [4]_Mcell [2].dend(0-1)\n",
            " `|       Set [4]_Mcell [2].axon(0-1)\n",
            "|-|       Set [4]_Mcell [3].soma(0-1)\n",
            "   `|       Set [4]_Mcell [3].dend(0-1)\n",
            " `|       Set [4]_Mcell [3].axon(0-1)\n",
            "|-|       Set [4]_Mcell [1].soma(0-1)\n",
            "   `|       Set [4]_Mcell [1].dend(0-1)\n",
            " `|       Set [4]_Mcell [1].axon(0-1)\n",
            "|-|       Set [4]_Mcell [2].soma(0-1)\n",
            "   `|       Set [4]_Mcell [2].dend(0-1)\n",
            " `|       Set [4]_Mcell [2].axon(0-1)\n",
            "|--|       Set [4]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [4]_Gcell [3].dend(0-1)\n",
            " `-|       Set [4]_Gcell [3].axon(0-1)\n",
            "|--|       Set [4]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [4]_Gcell [4].dend(0-1)\n",
            " `-|       Set [4]_Gcell [4].axon(0-1)\n",
            "|-|       Set [5]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [5]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [5]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [5]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [5]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [5]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [5]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [5]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [5]_Mcell [2].soma(0-1)\n",
            "   `|       Set [5]_Mcell [2].dend(0-1)\n",
            " `|       Set [5]_Mcell [2].axon(0-1)\n",
            "|-|       Set [5]_Mcell [3].soma(0-1)\n",
            "   `|       Set [5]_Mcell [3].dend(0-1)\n",
            " `|       Set [5]_Mcell [3].axon(0-1)\n",
            "|-|       Set [5]_Mcell [1].soma(0-1)\n",
            "   `|       Set [5]_Mcell [1].dend(0-1)\n",
            " `|       Set [5]_Mcell [1].axon(0-1)\n",
            "|-|       Set [5]_Mcell [2].soma(0-1)\n",
            "   `|       Set [5]_Mcell [2].dend(0-1)\n",
            " `|       Set [5]_Mcell [2].axon(0-1)\n",
            "|--|       Set [5]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [5]_Gcell [3].dend(0-1)\n",
            " `-|       Set [5]_Gcell [3].axon(0-1)\n",
            "|--|       Set [5]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [5]_Gcell [4].dend(0-1)\n",
            " `-|       Set [5]_Gcell [4].axon(0-1)\n",
            "|-|       Set [6]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [6]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [6]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [6]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [6]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [6]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [6]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [6]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [6]_Mcell [2].soma(0-1)\n",
            "   `|       Set [6]_Mcell [2].dend(0-1)\n",
            " `|       Set [6]_Mcell [2].axon(0-1)\n",
            "|-|       Set [6]_Mcell [3].soma(0-1)\n",
            "   `|       Set [6]_Mcell [3].dend(0-1)\n",
            " `|       Set [6]_Mcell [3].axon(0-1)\n",
            "|-|       Set [6]_Mcell [1].soma(0-1)\n",
            "   `|       Set [6]_Mcell [1].dend(0-1)\n",
            " `|       Set [6]_Mcell [1].axon(0-1)\n",
            "|-|       Set [6]_Mcell [2].soma(0-1)\n",
            "   `|       Set [6]_Mcell [2].dend(0-1)\n",
            " `|       Set [6]_Mcell [2].axon(0-1)\n",
            "|--|       Set [6]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [6]_Gcell [3].dend(0-1)\n",
            " `-|       Set [6]_Gcell [3].axon(0-1)\n",
            "|--|       Set [6]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [6]_Gcell [4].dend(0-1)\n",
            " `-|       Set [6]_Gcell [4].axon(0-1)\n",
            "|-|       Set [7]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [7]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [7]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [7]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [7]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [7]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [7]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [7]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [7]_Mcell [2].soma(0-1)\n",
            "   `|       Set [7]_Mcell [2].dend(0-1)\n",
            " `|       Set [7]_Mcell [2].axon(0-1)\n",
            "|-|       Set [7]_Mcell [3].soma(0-1)\n",
            "   `|       Set [7]_Mcell [3].dend(0-1)\n",
            " `|       Set [7]_Mcell [3].axon(0-1)\n",
            "|-|       Set [7]_Mcell [1].soma(0-1)\n",
            "   `|       Set [7]_Mcell [1].dend(0-1)\n",
            " `|       Set [7]_Mcell [1].axon(0-1)\n",
            "|-|       Set [7]_Mcell [2].soma(0-1)\n",
            "   `|       Set [7]_Mcell [2].dend(0-1)\n",
            " `|       Set [7]_Mcell [2].axon(0-1)\n",
            "|--|       Set [7]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [7]_Gcell [3].dend(0-1)\n",
            " `-|       Set [7]_Gcell [3].axon(0-1)\n",
            "|--|       Set [7]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [7]_Gcell [4].dend(0-1)\n",
            " `-|       Set [7]_Gcell [4].axon(0-1)\n",
            "|-|       Set [8]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [8]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [8]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [8]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [8]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [8]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [8]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [8]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [8]_Mcell [2].soma(0-1)\n",
            "   `|       Set [8]_Mcell [2].dend(0-1)\n",
            " `|       Set [8]_Mcell [2].axon(0-1)\n",
            "|-|       Set [8]_Mcell [3].soma(0-1)\n",
            "   `|       Set [8]_Mcell [3].dend(0-1)\n",
            " `|       Set [8]_Mcell [3].axon(0-1)\n",
            "|-|       Set [8]_Mcell [1].soma(0-1)\n",
            "   `|       Set [8]_Mcell [1].dend(0-1)\n",
            " `|       Set [8]_Mcell [1].axon(0-1)\n",
            "|-|       Set [8]_Mcell [2].soma(0-1)\n",
            "   `|       Set [8]_Mcell [2].dend(0-1)\n",
            " `|       Set [8]_Mcell [2].axon(0-1)\n",
            "|--|       Set [8]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [8]_Gcell [3].dend(0-1)\n",
            " `-|       Set [8]_Gcell [3].axon(0-1)\n",
            "|--|       Set [8]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [8]_Gcell [4].dend(0-1)\n",
            " `-|       Set [8]_Gcell [4].axon(0-1)\n",
            "|-|       Set [9]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [9]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [9]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [9]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [9]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [9]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [9]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [9]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [9]_Mcell [2].soma(0-1)\n",
            "   `|       Set [9]_Mcell [2].dend(0-1)\n",
            " `|       Set [9]_Mcell [2].axon(0-1)\n",
            "|-|       Set [9]_Mcell [3].soma(0-1)\n",
            "   `|       Set [9]_Mcell [3].dend(0-1)\n",
            " `|       Set [9]_Mcell [3].axon(0-1)\n",
            "|-|       Set [9]_Mcell [1].soma(0-1)\n",
            "   `|       Set [9]_Mcell [1].dend(0-1)\n",
            " `|       Set [9]_Mcell [1].axon(0-1)\n",
            "|-|       Set [9]_Mcell [2].soma(0-1)\n",
            "   `|       Set [9]_Mcell [2].dend(0-1)\n",
            " `|       Set [9]_Mcell [2].axon(0-1)\n",
            "|--|       Set [9]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [9]_Gcell [3].dend(0-1)\n",
            " `-|       Set [9]_Gcell [3].axon(0-1)\n",
            "|--|       Set [9]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [9]_Gcell [4].dend(0-1)\n",
            " `-|       Set [9]_Gcell [4].axon(0-1)\n",
            "|-|       Set [10]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [10]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [10]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [10]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [10]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [10]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [10]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [10]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [10]_Mcell [2].soma(0-1)\n",
            "   `|       Set [10]_Mcell [2].dend(0-1)\n",
            " `|       Set [10]_Mcell [2].axon(0-1)\n",
            "|-|       Set [10]_Mcell [3].soma(0-1)\n",
            "   `|       Set [10]_Mcell [3].dend(0-1)\n",
            " `|       Set [10]_Mcell [3].axon(0-1)\n",
            "|-|       Set [10]_Mcell [1].soma(0-1)\n",
            "   `|       Set [10]_Mcell [1].dend(0-1)\n",
            " `|       Set [10]_Mcell [1].axon(0-1)\n",
            "|-|       Set [10]_Mcell [2].soma(0-1)\n",
            "   `|       Set [10]_Mcell [2].dend(0-1)\n",
            " `|       Set [10]_Mcell [2].axon(0-1)\n",
            "|--|       Set [10]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [10]_Gcell [3].dend(0-1)\n",
            " `-|       Set [10]_Gcell [3].axon(0-1)\n",
            "|--|       Set [10]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [10]_Gcell [4].dend(0-1)\n",
            " `-|       Set [10]_Gcell [4].axon(0-1)\n",
            "|-|       Set [11]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [11]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [11]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [11]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [11]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [11]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [11]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [11]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [11]_Mcell [2].soma(0-1)\n",
            "   `|       Set [11]_Mcell [2].dend(0-1)\n",
            " `|       Set [11]_Mcell [2].axon(0-1)\n",
            "|-|       Set [11]_Mcell [3].soma(0-1)\n",
            "   `|       Set [11]_Mcell [3].dend(0-1)\n",
            " `|       Set [11]_Mcell [3].axon(0-1)\n",
            "|-|       Set [11]_Mcell [1].soma(0-1)\n",
            "   `|       Set [11]_Mcell [1].dend(0-1)\n",
            " `|       Set [11]_Mcell [1].axon(0-1)\n",
            "|-|       Set [11]_Mcell [2].soma(0-1)\n",
            "   `|       Set [11]_Mcell [2].dend(0-1)\n",
            " `|       Set [11]_Mcell [2].axon(0-1)\n",
            "|--|       Set [11]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [11]_Gcell [3].dend(0-1)\n",
            " `-|       Set [11]_Gcell [3].axon(0-1)\n",
            "|--|       Set [11]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [11]_Gcell [4].dend(0-1)\n",
            " `-|       Set [11]_Gcell [4].axon(0-1)\n",
            "|-|       Set [12]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [12]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [12]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [12]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [12]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [12]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [12]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [12]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [12]_Mcell [2].soma(0-1)\n",
            "   `|       Set [12]_Mcell [2].dend(0-1)\n",
            " `|       Set [12]_Mcell [2].axon(0-1)\n",
            "|-|       Set [12]_Mcell [3].soma(0-1)\n",
            "   `|       Set [12]_Mcell [3].dend(0-1)\n",
            " `|       Set [12]_Mcell [3].axon(0-1)\n",
            "|-|       Set [12]_Mcell [1].soma(0-1)\n",
            "   `|       Set [12]_Mcell [1].dend(0-1)\n",
            " `|       Set [12]_Mcell [1].axon(0-1)\n",
            "|-|       Set [12]_Mcell [2].soma(0-1)\n",
            "   `|       Set [12]_Mcell [2].dend(0-1)\n",
            " `|       Set [12]_Mcell [2].axon(0-1)\n",
            "|--|       Set [12]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [12]_Gcell [3].dend(0-1)\n",
            " `-|       Set [12]_Gcell [3].axon(0-1)\n",
            "|--|       Set [12]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [12]_Gcell [4].dend(0-1)\n",
            " `-|       Set [12]_Gcell [4].axon(0-1)\n",
            "|-|       Set [13]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [13]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [13]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [13]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [13]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [13]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [13]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [13]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [13]_Mcell [2].soma(0-1)\n",
            "   `|       Set [13]_Mcell [2].dend(0-1)\n",
            " `|       Set [13]_Mcell [2].axon(0-1)\n",
            "|-|       Set [13]_Mcell [3].soma(0-1)\n",
            "   `|       Set [13]_Mcell [3].dend(0-1)\n",
            " `|       Set [13]_Mcell [3].axon(0-1)\n",
            "|-|       Set [13]_Mcell [1].soma(0-1)\n",
            "   `|       Set [13]_Mcell [1].dend(0-1)\n",
            " `|       Set [13]_Mcell [1].axon(0-1)\n",
            "|-|       Set [13]_Mcell [2].soma(0-1)\n",
            "   `|       Set [13]_Mcell [2].dend(0-1)\n",
            " `|       Set [13]_Mcell [2].axon(0-1)\n",
            "|--|       Set [13]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [13]_Gcell [3].dend(0-1)\n",
            " `-|       Set [13]_Gcell [3].axon(0-1)\n",
            "|--|       Set [13]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [13]_Gcell [4].dend(0-1)\n",
            " `-|       Set [13]_Gcell [4].axon(0-1)\n",
            "|-|       Set [14]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [14]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [14]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [14]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [14]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [14]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [14]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [14]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [14]_Mcell [2].soma(0-1)\n",
            "   `|       Set [14]_Mcell [2].dend(0-1)\n",
            " `|       Set [14]_Mcell [2].axon(0-1)\n",
            "|-|       Set [14]_Mcell [3].soma(0-1)\n",
            "   `|       Set [14]_Mcell [3].dend(0-1)\n",
            " `|       Set [14]_Mcell [3].axon(0-1)\n",
            "|-|       Set [14]_Mcell [1].soma(0-1)\n",
            "   `|       Set [14]_Mcell [1].dend(0-1)\n",
            " `|       Set [14]_Mcell [1].axon(0-1)\n",
            "|-|       Set [14]_Mcell [2].soma(0-1)\n",
            "   `|       Set [14]_Mcell [2].dend(0-1)\n",
            " `|       Set [14]_Mcell [2].axon(0-1)\n",
            "|--|       Set [14]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [14]_Gcell [3].dend(0-1)\n",
            " `-|       Set [14]_Gcell [3].axon(0-1)\n",
            "|--|       Set [14]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [14]_Gcell [4].dend(0-1)\n",
            " `-|       Set [14]_Gcell [4].axon(0-1)\n",
            "|-|       Set [15]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [15]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [15]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [15]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [15]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [15]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [15]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [15]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [15]_Mcell [2].soma(0-1)\n",
            "   `|       Set [15]_Mcell [2].dend(0-1)\n",
            " `|       Set [15]_Mcell [2].axon(0-1)\n",
            "|-|       Set [15]_Mcell [3].soma(0-1)\n",
            "   `|       Set [15]_Mcell [3].dend(0-1)\n",
            " `|       Set [15]_Mcell [3].axon(0-1)\n",
            "|-|       Set [15]_Mcell [1].soma(0-1)\n",
            "   `|       Set [15]_Mcell [1].dend(0-1)\n",
            " `|       Set [15]_Mcell [1].axon(0-1)\n",
            "|-|       Set [15]_Mcell [2].soma(0-1)\n",
            "   `|       Set [15]_Mcell [2].dend(0-1)\n",
            " `|       Set [15]_Mcell [2].axon(0-1)\n",
            "|--|       Set [15]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [15]_Gcell [3].dend(0-1)\n",
            " `-|       Set [15]_Gcell [3].axon(0-1)\n",
            "|--|       Set [15]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [15]_Gcell [4].dend(0-1)\n",
            " `-|       Set [15]_Gcell [4].axon(0-1)\n",
            "|-|       Set [16]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [16]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [16]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [16]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [16]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [16]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [16]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [16]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [16]_Mcell [2].soma(0-1)\n",
            "   `|       Set [16]_Mcell [2].dend(0-1)\n",
            " `|       Set [16]_Mcell [2].axon(0-1)\n",
            "|-|       Set [16]_Mcell [3].soma(0-1)\n",
            "   `|       Set [16]_Mcell [3].dend(0-1)\n",
            " `|       Set [16]_Mcell [3].axon(0-1)\n",
            "|-|       Set [16]_Mcell [1].soma(0-1)\n",
            "   `|       Set [16]_Mcell [1].dend(0-1)\n",
            " `|       Set [16]_Mcell [1].axon(0-1)\n",
            "|-|       Set [16]_Mcell [2].soma(0-1)\n",
            "   `|       Set [16]_Mcell [2].dend(0-1)\n",
            " `|       Set [16]_Mcell [2].axon(0-1)\n",
            "|--|       Set [16]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [16]_Gcell [3].dend(0-1)\n",
            " `-|       Set [16]_Gcell [3].axon(0-1)\n",
            "|--|       Set [16]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [16]_Gcell [4].dend(0-1)\n",
            " `-|       Set [16]_Gcell [4].axon(0-1)\n",
            "|-|       Set [17]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [17]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [17]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [17]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [17]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [17]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [17]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [17]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [17]_Mcell [2].soma(0-1)\n",
            "   `|       Set [17]_Mcell [2].dend(0-1)\n",
            " `|       Set [17]_Mcell [2].axon(0-1)\n",
            "|-|       Set [17]_Mcell [3].soma(0-1)\n",
            "   `|       Set [17]_Mcell [3].dend(0-1)\n",
            " `|       Set [17]_Mcell [3].axon(0-1)\n",
            "|-|       Set [17]_Mcell [1].soma(0-1)\n",
            "   `|       Set [17]_Mcell [1].dend(0-1)\n",
            " `|       Set [17]_Mcell [1].axon(0-1)\n",
            "|-|       Set [17]_Mcell [2].soma(0-1)\n",
            "   `|       Set [17]_Mcell [2].dend(0-1)\n",
            " `|       Set [17]_Mcell [2].axon(0-1)\n",
            "|--|       Set [17]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [17]_Gcell [3].dend(0-1)\n",
            " `-|       Set [17]_Gcell [3].axon(0-1)\n",
            "|--|       Set [17]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [17]_Gcell [4].dend(0-1)\n",
            " `-|       Set [17]_Gcell [4].axon(0-1)\n",
            "|-|       Set [18]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [18]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [18]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [18]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [18]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [18]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [18]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [18]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [18]_Mcell [2].soma(0-1)\n",
            "   `|       Set [18]_Mcell [2].dend(0-1)\n",
            " `|       Set [18]_Mcell [2].axon(0-1)\n",
            "|-|       Set [18]_Mcell [3].soma(0-1)\n",
            "   `|       Set [18]_Mcell [3].dend(0-1)\n",
            " `|       Set [18]_Mcell [3].axon(0-1)\n",
            "|-|       Set [18]_Mcell [1].soma(0-1)\n",
            "   `|       Set [18]_Mcell [1].dend(0-1)\n",
            " `|       Set [18]_Mcell [1].axon(0-1)\n",
            "|-|       Set [18]_Mcell [2].soma(0-1)\n",
            "   `|       Set [18]_Mcell [2].dend(0-1)\n",
            " `|       Set [18]_Mcell [2].axon(0-1)\n",
            "|--|       Set [18]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [18]_Gcell [3].dend(0-1)\n",
            " `-|       Set [18]_Gcell [3].axon(0-1)\n",
            "|--|       Set [18]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [18]_Gcell [4].dend(0-1)\n",
            " `-|       Set [18]_Gcell [4].axon(0-1)\n",
            "|-|       Set [19]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [19]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [19]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [19]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [19]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [19]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [19]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [19]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [19]_Mcell [2].soma(0-1)\n",
            "   `|       Set [19]_Mcell [2].dend(0-1)\n",
            " `|       Set [19]_Mcell [2].axon(0-1)\n",
            "|-|       Set [19]_Mcell [3].soma(0-1)\n",
            "   `|       Set [19]_Mcell [3].dend(0-1)\n",
            " `|       Set [19]_Mcell [3].axon(0-1)\n",
            "|-|       Set [19]_Mcell [1].soma(0-1)\n",
            "   `|       Set [19]_Mcell [1].dend(0-1)\n",
            " `|       Set [19]_Mcell [1].axon(0-1)\n",
            "|-|       Set [19]_Mcell [2].soma(0-1)\n",
            "   `|       Set [19]_Mcell [2].dend(0-1)\n",
            " `|       Set [19]_Mcell [2].axon(0-1)\n",
            "|--|       Set [19]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [19]_Gcell [3].dend(0-1)\n",
            " `-|       Set [19]_Gcell [3].axon(0-1)\n",
            "|--|       Set [19]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [19]_Gcell [4].dend(0-1)\n",
            " `-|       Set [19]_Gcell [4].axon(0-1)\n",
            "|-|       Set [20]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [20]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [20]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [20]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [20]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [20]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [20]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [20]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [20]_Mcell [2].soma(0-1)\n",
            "   `|       Set [20]_Mcell [2].dend(0-1)\n",
            " `|       Set [20]_Mcell [2].axon(0-1)\n",
            "|-|       Set [20]_Mcell [3].soma(0-1)\n",
            "   `|       Set [20]_Mcell [3].dend(0-1)\n",
            " `|       Set [20]_Mcell [3].axon(0-1)\n",
            "|-|       Set [20]_Mcell [1].soma(0-1)\n",
            "   `|       Set [20]_Mcell [1].dend(0-1)\n",
            " `|       Set [20]_Mcell [1].axon(0-1)\n",
            "|-|       Set [20]_Mcell [2].soma(0-1)\n",
            "   `|       Set [20]_Mcell [2].dend(0-1)\n",
            " `|       Set [20]_Mcell [2].axon(0-1)\n",
            "|--|       Set [20]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [20]_Gcell [3].dend(0-1)\n",
            " `-|       Set [20]_Gcell [3].axon(0-1)\n",
            "|--|       Set [20]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [20]_Gcell [4].dend(0-1)\n",
            " `-|       Set [20]_Gcell [4].axon(0-1)\n",
            "|-|       Set [21]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [21]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [21]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [21]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [21]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [21]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [21]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [21]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [21]_Mcell [2].soma(0-1)\n",
            "   `|       Set [21]_Mcell [2].dend(0-1)\n",
            " `|       Set [21]_Mcell [2].axon(0-1)\n",
            "|-|       Set [21]_Mcell [3].soma(0-1)\n",
            "   `|       Set [21]_Mcell [3].dend(0-1)\n",
            " `|       Set [21]_Mcell [3].axon(0-1)\n",
            "|-|       Set [21]_Mcell [1].soma(0-1)\n",
            "   `|       Set [21]_Mcell [1].dend(0-1)\n",
            " `|       Set [21]_Mcell [1].axon(0-1)\n",
            "|-|       Set [21]_Mcell [2].soma(0-1)\n",
            "   `|       Set [21]_Mcell [2].dend(0-1)\n",
            " `|       Set [21]_Mcell [2].axon(0-1)\n",
            "|--|       Set [21]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [21]_Gcell [3].dend(0-1)\n",
            " `-|       Set [21]_Gcell [3].axon(0-1)\n",
            "|--|       Set [21]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [21]_Gcell [4].dend(0-1)\n",
            " `-|       Set [21]_Gcell [4].axon(0-1)\n",
            "|-|       Set [22]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [22]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [22]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [22]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [22]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [22]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [22]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [22]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [22]_Mcell [2].soma(0-1)\n",
            "   `|       Set [22]_Mcell [2].dend(0-1)\n",
            " `|       Set [22]_Mcell [2].axon(0-1)\n",
            "|-|       Set [22]_Mcell [3].soma(0-1)\n",
            "   `|       Set [22]_Mcell [3].dend(0-1)\n",
            " `|       Set [22]_Mcell [3].axon(0-1)\n",
            "|-|       Set [22]_Mcell [1].soma(0-1)\n",
            "   `|       Set [22]_Mcell [1].dend(0-1)\n",
            " `|       Set [22]_Mcell [1].axon(0-1)\n",
            "|-|       Set [22]_Mcell [2].soma(0-1)\n",
            "   `|       Set [22]_Mcell [2].dend(0-1)\n",
            " `|       Set [22]_Mcell [2].axon(0-1)\n",
            "|--|       Set [22]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [22]_Gcell [3].dend(0-1)\n",
            " `-|       Set [22]_Gcell [3].axon(0-1)\n",
            "|--|       Set [22]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [22]_Gcell [4].dend(0-1)\n",
            " `-|       Set [22]_Gcell [4].axon(0-1)\n",
            "|-|       Set [23]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [23]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [23]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [23]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [23]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [23]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [23]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [23]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [23]_Mcell [2].soma(0-1)\n",
            "   `|       Set [23]_Mcell [2].dend(0-1)\n",
            " `|       Set [23]_Mcell [2].axon(0-1)\n",
            "|-|       Set [23]_Mcell [3].soma(0-1)\n",
            "   `|       Set [23]_Mcell [3].dend(0-1)\n",
            " `|       Set [23]_Mcell [3].axon(0-1)\n",
            "|-|       Set [23]_Mcell [1].soma(0-1)\n",
            "   `|       Set [23]_Mcell [1].dend(0-1)\n",
            " `|       Set [23]_Mcell [1].axon(0-1)\n",
            "|-|       Set [23]_Mcell [2].soma(0-1)\n",
            "   `|       Set [23]_Mcell [2].dend(0-1)\n",
            " `|       Set [23]_Mcell [2].axon(0-1)\n",
            "|--|       Set [23]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [23]_Gcell [3].dend(0-1)\n",
            " `-|       Set [23]_Gcell [3].axon(0-1)\n",
            "|--|       Set [23]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [23]_Gcell [4].dend(0-1)\n",
            " `-|       Set [23]_Gcell [4].axon(0-1)\n",
            "|-|       Set [24]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [24]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [24]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [24]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [24]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [24]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [24]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [24]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [24]_Mcell [2].soma(0-1)\n",
            "   `|       Set [24]_Mcell [2].dend(0-1)\n",
            " `|       Set [24]_Mcell [2].axon(0-1)\n",
            "|-|       Set [24]_Mcell [3].soma(0-1)\n",
            "   `|       Set [24]_Mcell [3].dend(0-1)\n",
            " `|       Set [24]_Mcell [3].axon(0-1)\n",
            "|-|       Set [24]_Mcell [1].soma(0-1)\n",
            "   `|       Set [24]_Mcell [1].dend(0-1)\n",
            " `|       Set [24]_Mcell [1].axon(0-1)\n",
            "|-|       Set [24]_Mcell [2].soma(0-1)\n",
            "   `|       Set [24]_Mcell [2].dend(0-1)\n",
            " `|       Set [24]_Mcell [2].axon(0-1)\n",
            "|--|       Set [24]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [24]_Gcell [3].dend(0-1)\n",
            " `-|       Set [24]_Gcell [3].axon(0-1)\n",
            "|--|       Set [24]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [24]_Gcell [4].dend(0-1)\n",
            " `-|       Set [24]_Gcell [4].axon(0-1)\n",
            "|-|       Set [25]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [25]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [25]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [25]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [25]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [25]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [25]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [25]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [25]_Mcell [2].soma(0-1)\n",
            "   `|       Set [25]_Mcell [2].dend(0-1)\n",
            " `|       Set [25]_Mcell [2].axon(0-1)\n",
            "|-|       Set [25]_Mcell [3].soma(0-1)\n",
            "   `|       Set [25]_Mcell [3].dend(0-1)\n",
            " `|       Set [25]_Mcell [3].axon(0-1)\n",
            "|-|       Set [25]_Mcell [1].soma(0-1)\n",
            "   `|       Set [25]_Mcell [1].dend(0-1)\n",
            " `|       Set [25]_Mcell [1].axon(0-1)\n",
            "|-|       Set [25]_Mcell [2].soma(0-1)\n",
            "   `|       Set [25]_Mcell [2].dend(0-1)\n",
            " `|       Set [25]_Mcell [2].axon(0-1)\n",
            "|--|       Set [25]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [25]_Gcell [3].dend(0-1)\n",
            " `-|       Set [25]_Gcell [3].axon(0-1)\n",
            "|--|       Set [25]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [25]_Gcell [4].dend(0-1)\n",
            " `-|       Set [25]_Gcell [4].axon(0-1)\n",
            "|-|       Set [26]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [26]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [26]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [26]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [26]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [26]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [26]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [26]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [26]_Mcell [2].soma(0-1)\n",
            "   `|       Set [26]_Mcell [2].dend(0-1)\n",
            " `|       Set [26]_Mcell [2].axon(0-1)\n",
            "|-|       Set [26]_Mcell [3].soma(0-1)\n",
            "   `|       Set [26]_Mcell [3].dend(0-1)\n",
            " `|       Set [26]_Mcell [3].axon(0-1)\n",
            "|-|       Set [26]_Mcell [1].soma(0-1)\n",
            "   `|       Set [26]_Mcell [1].dend(0-1)\n",
            " `|       Set [26]_Mcell [1].axon(0-1)\n",
            "|-|       Set [26]_Mcell [2].soma(0-1)\n",
            "   `|       Set [26]_Mcell [2].dend(0-1)\n",
            " `|       Set [26]_Mcell [2].axon(0-1)\n",
            "|--|       Set [26]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [26]_Gcell [3].dend(0-1)\n",
            " `-|       Set [26]_Gcell [3].axon(0-1)\n",
            "|--|       Set [26]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [26]_Gcell [4].dend(0-1)\n",
            " `-|       Set [26]_Gcell [4].axon(0-1)\n",
            "|-|       Set [27]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [27]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [27]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [27]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [27]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [27]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [27]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [27]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [27]_Mcell [2].soma(0-1)\n",
            "   `|       Set [27]_Mcell [2].dend(0-1)\n",
            " `|       Set [27]_Mcell [2].axon(0-1)\n",
            "|-|       Set [27]_Mcell [3].soma(0-1)\n",
            "   `|       Set [27]_Mcell [3].dend(0-1)\n",
            " `|       Set [27]_Mcell [3].axon(0-1)\n",
            "|-|       Set [27]_Mcell [1].soma(0-1)\n",
            "   `|       Set [27]_Mcell [1].dend(0-1)\n",
            " `|       Set [27]_Mcell [1].axon(0-1)\n",
            "|-|       Set [27]_Mcell [2].soma(0-1)\n",
            "   `|       Set [27]_Mcell [2].dend(0-1)\n",
            " `|       Set [27]_Mcell [2].axon(0-1)\n",
            "|--|       Set [27]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [27]_Gcell [3].dend(0-1)\n",
            " `-|       Set [27]_Gcell [3].axon(0-1)\n",
            "|--|       Set [27]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [27]_Gcell [4].dend(0-1)\n",
            " `-|       Set [27]_Gcell [4].axon(0-1)\n",
            "|-|       Set [28]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [28]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [28]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [28]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [28]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [28]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [28]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [28]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [28]_Mcell [2].soma(0-1)\n",
            "   `|       Set [28]_Mcell [2].dend(0-1)\n",
            " `|       Set [28]_Mcell [2].axon(0-1)\n",
            "|-|       Set [28]_Mcell [3].soma(0-1)\n",
            "   `|       Set [28]_Mcell [3].dend(0-1)\n",
            " `|       Set [28]_Mcell [3].axon(0-1)\n",
            "|-|       Set [28]_Mcell [1].soma(0-1)\n",
            "   `|       Set [28]_Mcell [1].dend(0-1)\n",
            " `|       Set [28]_Mcell [1].axon(0-1)\n",
            "|-|       Set [28]_Mcell [2].soma(0-1)\n",
            "   `|       Set [28]_Mcell [2].dend(0-1)\n",
            " `|       Set [28]_Mcell [2].axon(0-1)\n",
            "|--|       Set [28]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [28]_Gcell [3].dend(0-1)\n",
            " `-|       Set [28]_Gcell [3].axon(0-1)\n",
            "|--|       Set [28]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [28]_Gcell [4].dend(0-1)\n",
            " `-|       Set [28]_Gcell [4].axon(0-1)\n",
            "|-|       Set [29]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [29]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [29]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [29]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [29]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [29]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [29]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [29]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [29]_Mcell [2].soma(0-1)\n",
            "   `|       Set [29]_Mcell [2].dend(0-1)\n",
            " `|       Set [29]_Mcell [2].axon(0-1)\n",
            "|-|       Set [29]_Mcell [3].soma(0-1)\n",
            "   `|       Set [29]_Mcell [3].dend(0-1)\n",
            " `|       Set [29]_Mcell [3].axon(0-1)\n",
            "|-|       Set [29]_Mcell [1].soma(0-1)\n",
            "   `|       Set [29]_Mcell [1].dend(0-1)\n",
            " `|       Set [29]_Mcell [1].axon(0-1)\n",
            "|-|       Set [29]_Mcell [2].soma(0-1)\n",
            "   `|       Set [29]_Mcell [2].dend(0-1)\n",
            " `|       Set [29]_Mcell [2].axon(0-1)\n",
            "|--|       Set [29]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [29]_Gcell [3].dend(0-1)\n",
            " `-|       Set [29]_Gcell [3].axon(0-1)\n",
            "|--|       Set [29]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [29]_Gcell [4].dend(0-1)\n",
            " `-|       Set [29]_Gcell [4].axon(0-1)\n",
            "|-|       Set [30]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [30]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [30]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [30]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [30]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [30]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [30]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [30]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [30]_Mcell [2].soma(0-1)\n",
            "   `|       Set [30]_Mcell [2].dend(0-1)\n",
            " `|       Set [30]_Mcell [2].axon(0-1)\n",
            "|-|       Set [30]_Mcell [3].soma(0-1)\n",
            "   `|       Set [30]_Mcell [3].dend(0-1)\n",
            " `|       Set [30]_Mcell [3].axon(0-1)\n",
            "|-|       Set [30]_Mcell [1].soma(0-1)\n",
            "   `|       Set [30]_Mcell [1].dend(0-1)\n",
            " `|       Set [30]_Mcell [1].axon(0-1)\n",
            "|-|       Set [30]_Mcell [2].soma(0-1)\n",
            "   `|       Set [30]_Mcell [2].dend(0-1)\n",
            " `|       Set [30]_Mcell [2].axon(0-1)\n",
            "|--|       Set [30]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [30]_Gcell [3].dend(0-1)\n",
            " `-|       Set [30]_Gcell [3].axon(0-1)\n",
            "|--|       Set [30]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [30]_Gcell [4].dend(0-1)\n",
            " `-|       Set [30]_Gcell [4].axon(0-1)\n",
            "|-|       Set [31]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [31]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [31]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [31]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [31]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [31]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [31]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [31]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [31]_Mcell [2].soma(0-1)\n",
            "   `|       Set [31]_Mcell [2].dend(0-1)\n",
            " `|       Set [31]_Mcell [2].axon(0-1)\n",
            "|-|       Set [31]_Mcell [3].soma(0-1)\n",
            "   `|       Set [31]_Mcell [3].dend(0-1)\n",
            " `|       Set [31]_Mcell [3].axon(0-1)\n",
            "|-|       Set [31]_Mcell [1].soma(0-1)\n",
            "   `|       Set [31]_Mcell [1].dend(0-1)\n",
            " `|       Set [31]_Mcell [1].axon(0-1)\n",
            "|-|       Set [31]_Mcell [2].soma(0-1)\n",
            "   `|       Set [31]_Mcell [2].dend(0-1)\n",
            " `|       Set [31]_Mcell [2].axon(0-1)\n",
            "|--|       Set [31]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [31]_Gcell [3].dend(0-1)\n",
            " `-|       Set [31]_Gcell [3].axon(0-1)\n",
            "|--|       Set [31]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [31]_Gcell [4].dend(0-1)\n",
            " `-|       Set [31]_Gcell [4].axon(0-1)\n",
            "|-|       Set [32]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [32]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [32]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [32]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [32]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [32]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [32]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [32]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [32]_Mcell [2].soma(0-1)\n",
            "   `|       Set [32]_Mcell [2].dend(0-1)\n",
            " `|       Set [32]_Mcell [2].axon(0-1)\n",
            "|-|       Set [32]_Mcell [3].soma(0-1)\n",
            "   `|       Set [32]_Mcell [3].dend(0-1)\n",
            " `|       Set [32]_Mcell [3].axon(0-1)\n",
            "|-|       Set [32]_Mcell [1].soma(0-1)\n",
            "   `|       Set [32]_Mcell [1].dend(0-1)\n",
            " `|       Set [32]_Mcell [1].axon(0-1)\n",
            "|-|       Set [32]_Mcell [2].soma(0-1)\n",
            "   `|       Set [32]_Mcell [2].dend(0-1)\n",
            " `|       Set [32]_Mcell [2].axon(0-1)\n",
            "|--|       Set [32]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [32]_Gcell [3].dend(0-1)\n",
            " `-|       Set [32]_Gcell [3].axon(0-1)\n",
            "|--|       Set [32]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [32]_Gcell [4].dend(0-1)\n",
            " `-|       Set [32]_Gcell [4].axon(0-1)\n",
            "|-|       Set [33]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [33]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [33]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [33]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [33]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [33]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [33]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [33]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [33]_Mcell [2].soma(0-1)\n",
            "   `|       Set [33]_Mcell [2].dend(0-1)\n",
            " `|       Set [33]_Mcell [2].axon(0-1)\n",
            "|-|       Set [33]_Mcell [3].soma(0-1)\n",
            "   `|       Set [33]_Mcell [3].dend(0-1)\n",
            " `|       Set [33]_Mcell [3].axon(0-1)\n",
            "|-|       Set [33]_Mcell [1].soma(0-1)\n",
            "   `|       Set [33]_Mcell [1].dend(0-1)\n",
            " `|       Set [33]_Mcell [1].axon(0-1)\n",
            "|-|       Set [33]_Mcell [2].soma(0-1)\n",
            "   `|       Set [33]_Mcell [2].dend(0-1)\n",
            " `|       Set [33]_Mcell [2].axon(0-1)\n",
            "|--|       Set [33]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [33]_Gcell [3].dend(0-1)\n",
            " `-|       Set [33]_Gcell [3].axon(0-1)\n",
            "|--|       Set [33]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [33]_Gcell [4].dend(0-1)\n",
            " `-|       Set [33]_Gcell [4].axon(0-1)\n",
            "|-|       Set [34]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [34]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [34]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [34]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [34]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [34]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [34]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [34]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [34]_Mcell [2].soma(0-1)\n",
            "   `|       Set [34]_Mcell [2].dend(0-1)\n",
            " `|       Set [34]_Mcell [2].axon(0-1)\n",
            "|-|       Set [34]_Mcell [3].soma(0-1)\n",
            "   `|       Set [34]_Mcell [3].dend(0-1)\n",
            " `|       Set [34]_Mcell [3].axon(0-1)\n",
            "|-|       Set [34]_Mcell [1].soma(0-1)\n",
            "   `|       Set [34]_Mcell [1].dend(0-1)\n",
            " `|       Set [34]_Mcell [1].axon(0-1)\n",
            "|-|       Set [34]_Mcell [2].soma(0-1)\n",
            "   `|       Set [34]_Mcell [2].dend(0-1)\n",
            " `|       Set [34]_Mcell [2].axon(0-1)\n",
            "|--|       Set [34]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [34]_Gcell [3].dend(0-1)\n",
            " `-|       Set [34]_Gcell [3].axon(0-1)\n",
            "|--|       Set [34]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [34]_Gcell [4].dend(0-1)\n",
            " `-|       Set [34]_Gcell [4].axon(0-1)\n",
            "|-|       Set [35]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [35]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [35]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [35]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [35]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [35]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [35]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [35]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [35]_Mcell [2].soma(0-1)\n",
            "   `|       Set [35]_Mcell [2].dend(0-1)\n",
            " `|       Set [35]_Mcell [2].axon(0-1)\n",
            "|-|       Set [35]_Mcell [3].soma(0-1)\n",
            "   `|       Set [35]_Mcell [3].dend(0-1)\n",
            " `|       Set [35]_Mcell [3].axon(0-1)\n",
            "|-|       Set [35]_Mcell [1].soma(0-1)\n",
            "   `|       Set [35]_Mcell [1].dend(0-1)\n",
            " `|       Set [35]_Mcell [1].axon(0-1)\n",
            "|-|       Set [35]_Mcell [2].soma(0-1)\n",
            "   `|       Set [35]_Mcell [2].dend(0-1)\n",
            " `|       Set [35]_Mcell [2].axon(0-1)\n",
            "|--|       Set [35]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [35]_Gcell [3].dend(0-1)\n",
            " `-|       Set [35]_Gcell [3].axon(0-1)\n",
            "|--|       Set [35]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [35]_Gcell [4].dend(0-1)\n",
            " `-|       Set [35]_Gcell [4].axon(0-1)\n",
            "|-|       Set [36]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [36]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [36]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [36]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [36]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [36]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [36]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [36]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [36]_Mcell [2].soma(0-1)\n",
            "   `|       Set [36]_Mcell [2].dend(0-1)\n",
            " `|       Set [36]_Mcell [2].axon(0-1)\n",
            "|-|       Set [36]_Mcell [3].soma(0-1)\n",
            "   `|       Set [36]_Mcell [3].dend(0-1)\n",
            " `|       Set [36]_Mcell [3].axon(0-1)\n",
            "|-|       Set [36]_Mcell [1].soma(0-1)\n",
            "   `|       Set [36]_Mcell [1].dend(0-1)\n",
            " `|       Set [36]_Mcell [1].axon(0-1)\n",
            "|-|       Set [36]_Mcell [2].soma(0-1)\n",
            "   `|       Set [36]_Mcell [2].dend(0-1)\n",
            " `|       Set [36]_Mcell [2].axon(0-1)\n",
            "|--|       Set [36]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [36]_Gcell [3].dend(0-1)\n",
            " `-|       Set [36]_Gcell [3].axon(0-1)\n",
            "|--|       Set [36]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [36]_Gcell [4].dend(0-1)\n",
            " `-|       Set [36]_Gcell [4].axon(0-1)\n",
            "|-|       Set [37]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [37]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [37]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [37]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [37]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [37]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [37]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [37]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [37]_Mcell [2].soma(0-1)\n",
            "   `|       Set [37]_Mcell [2].dend(0-1)\n",
            " `|       Set [37]_Mcell [2].axon(0-1)\n",
            "|-|       Set [37]_Mcell [3].soma(0-1)\n",
            "   `|       Set [37]_Mcell [3].dend(0-1)\n",
            " `|       Set [37]_Mcell [3].axon(0-1)\n",
            "|-|       Set [37]_Mcell [1].soma(0-1)\n",
            "   `|       Set [37]_Mcell [1].dend(0-1)\n",
            " `|       Set [37]_Mcell [1].axon(0-1)\n",
            "|-|       Set [37]_Mcell [2].soma(0-1)\n",
            "   `|       Set [37]_Mcell [2].dend(0-1)\n",
            " `|       Set [37]_Mcell [2].axon(0-1)\n",
            "|--|       Set [37]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [37]_Gcell [3].dend(0-1)\n",
            " `-|       Set [37]_Gcell [3].axon(0-1)\n",
            "|--|       Set [37]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [37]_Gcell [4].dend(0-1)\n",
            " `-|       Set [37]_Gcell [4].axon(0-1)\n",
            "|-|       Set [38]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [38]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [38]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [38]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [38]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [38]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [38]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [38]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [38]_Mcell [2].soma(0-1)\n",
            "   `|       Set [38]_Mcell [2].dend(0-1)\n",
            " `|       Set [38]_Mcell [2].axon(0-1)\n",
            "|-|       Set [38]_Mcell [3].soma(0-1)\n",
            "   `|       Set [38]_Mcell [3].dend(0-1)\n",
            " `|       Set [38]_Mcell [3].axon(0-1)\n",
            "|-|       Set [38]_Mcell [1].soma(0-1)\n",
            "   `|       Set [38]_Mcell [1].dend(0-1)\n",
            " `|       Set [38]_Mcell [1].axon(0-1)\n",
            "|-|       Set [38]_Mcell [2].soma(0-1)\n",
            "   `|       Set [38]_Mcell [2].dend(0-1)\n",
            " `|       Set [38]_Mcell [2].axon(0-1)\n",
            "|--|       Set [38]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [38]_Gcell [3].dend(0-1)\n",
            " `-|       Set [38]_Gcell [3].axon(0-1)\n",
            "|--|       Set [38]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [38]_Gcell [4].dend(0-1)\n",
            " `-|       Set [38]_Gcell [4].axon(0-1)\n",
            "|-|       Set [39]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [39]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [39]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [39]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [39]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [39]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [39]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [39]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [39]_Mcell [2].soma(0-1)\n",
            "   `|       Set [39]_Mcell [2].dend(0-1)\n",
            " `|       Set [39]_Mcell [2].axon(0-1)\n",
            "|-|       Set [39]_Mcell [3].soma(0-1)\n",
            "   `|       Set [39]_Mcell [3].dend(0-1)\n",
            " `|       Set [39]_Mcell [3].axon(0-1)\n",
            "|-|       Set [39]_Mcell [1].soma(0-1)\n",
            "   `|       Set [39]_Mcell [1].dend(0-1)\n",
            " `|       Set [39]_Mcell [1].axon(0-1)\n",
            "|-|       Set [39]_Mcell [2].soma(0-1)\n",
            "   `|       Set [39]_Mcell [2].dend(0-1)\n",
            " `|       Set [39]_Mcell [2].axon(0-1)\n",
            "|--|       Set [39]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [39]_Gcell [3].dend(0-1)\n",
            " `-|       Set [39]_Gcell [3].axon(0-1)\n",
            "|--|       Set [39]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [39]_Gcell [4].dend(0-1)\n",
            " `-|       Set [39]_Gcell [4].axon(0-1)\n",
            "|-|       Set [40]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [40]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [40]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [40]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [40]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [40]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [40]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [40]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [40]_Mcell [2].soma(0-1)\n",
            "   `|       Set [40]_Mcell [2].dend(0-1)\n",
            " `|       Set [40]_Mcell [2].axon(0-1)\n",
            "|-|       Set [40]_Mcell [3].soma(0-1)\n",
            "   `|       Set [40]_Mcell [3].dend(0-1)\n",
            " `|       Set [40]_Mcell [3].axon(0-1)\n",
            "|-|       Set [40]_Mcell [1].soma(0-1)\n",
            "   `|       Set [40]_Mcell [1].dend(0-1)\n",
            " `|       Set [40]_Mcell [1].axon(0-1)\n",
            "|-|       Set [40]_Mcell [2].soma(0-1)\n",
            "   `|       Set [40]_Mcell [2].dend(0-1)\n",
            " `|       Set [40]_Mcell [2].axon(0-1)\n",
            "|--|       Set [40]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [40]_Gcell [3].dend(0-1)\n",
            " `-|       Set [40]_Gcell [3].axon(0-1)\n",
            "|--|       Set [40]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [40]_Gcell [4].dend(0-1)\n",
            " `-|       Set [40]_Gcell [4].axon(0-1)\n",
            "|-|       Set [41]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [41]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [41]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [41]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [41]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [41]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [41]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [41]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [41]_Mcell [2].soma(0-1)\n",
            "   `|       Set [41]_Mcell [2].dend(0-1)\n",
            " `|       Set [41]_Mcell [2].axon(0-1)\n",
            "|-|       Set [41]_Mcell [3].soma(0-1)\n",
            "   `|       Set [41]_Mcell [3].dend(0-1)\n",
            " `|       Set [41]_Mcell [3].axon(0-1)\n",
            "|-|       Set [41]_Mcell [1].soma(0-1)\n",
            "   `|       Set [41]_Mcell [1].dend(0-1)\n",
            " `|       Set [41]_Mcell [1].axon(0-1)\n",
            "|-|       Set [41]_Mcell [2].soma(0-1)\n",
            "   `|       Set [41]_Mcell [2].dend(0-1)\n",
            " `|       Set [41]_Mcell [2].axon(0-1)\n",
            "|--|       Set [41]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [41]_Gcell [3].dend(0-1)\n",
            " `-|       Set [41]_Gcell [3].axon(0-1)\n",
            "|--|       Set [41]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [41]_Gcell [4].dend(0-1)\n",
            " `-|       Set [41]_Gcell [4].axon(0-1)\n",
            "|-|       Set [42]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [42]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [42]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [42]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [42]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [42]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [42]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [42]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [42]_Mcell [2].soma(0-1)\n",
            "   `|       Set [42]_Mcell [2].dend(0-1)\n",
            " `|       Set [42]_Mcell [2].axon(0-1)\n",
            "|-|       Set [42]_Mcell [3].soma(0-1)\n",
            "   `|       Set [42]_Mcell [3].dend(0-1)\n",
            " `|       Set [42]_Mcell [3].axon(0-1)\n",
            "|-|       Set [42]_Mcell [1].soma(0-1)\n",
            "   `|       Set [42]_Mcell [1].dend(0-1)\n",
            " `|       Set [42]_Mcell [1].axon(0-1)\n",
            "|-|       Set [42]_Mcell [2].soma(0-1)\n",
            "   `|       Set [42]_Mcell [2].dend(0-1)\n",
            " `|       Set [42]_Mcell [2].axon(0-1)\n",
            "|--|       Set [42]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [42]_Gcell [3].dend(0-1)\n",
            " `-|       Set [42]_Gcell [3].axon(0-1)\n",
            "|--|       Set [42]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [42]_Gcell [4].dend(0-1)\n",
            " `-|       Set [42]_Gcell [4].axon(0-1)\n",
            "|-|       Set [43]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [43]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [43]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [43]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [43]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [43]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [43]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [43]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [43]_Mcell [2].soma(0-1)\n",
            "   `|       Set [43]_Mcell [2].dend(0-1)\n",
            " `|       Set [43]_Mcell [2].axon(0-1)\n",
            "|-|       Set [43]_Mcell [3].soma(0-1)\n",
            "   `|       Set [43]_Mcell [3].dend(0-1)\n",
            " `|       Set [43]_Mcell [3].axon(0-1)\n",
            "|-|       Set [43]_Mcell [1].soma(0-1)\n",
            "   `|       Set [43]_Mcell [1].dend(0-1)\n",
            " `|       Set [43]_Mcell [1].axon(0-1)\n",
            "|-|       Set [43]_Mcell [2].soma(0-1)\n",
            "   `|       Set [43]_Mcell [2].dend(0-1)\n",
            " `|       Set [43]_Mcell [2].axon(0-1)\n",
            "|--|       Set [43]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [43]_Gcell [3].dend(0-1)\n",
            " `-|       Set [43]_Gcell [3].axon(0-1)\n",
            "|--|       Set [43]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [43]_Gcell [4].dend(0-1)\n",
            " `-|       Set [43]_Gcell [4].axon(0-1)\n",
            "|-|       Set [44]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [44]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [44]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [44]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [44]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [44]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [44]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [44]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [44]_Mcell [2].soma(0-1)\n",
            "   `|       Set [44]_Mcell [2].dend(0-1)\n",
            " `|       Set [44]_Mcell [2].axon(0-1)\n",
            "|-|       Set [44]_Mcell [3].soma(0-1)\n",
            "   `|       Set [44]_Mcell [3].dend(0-1)\n",
            " `|       Set [44]_Mcell [3].axon(0-1)\n",
            "|-|       Set [44]_Mcell [1].soma(0-1)\n",
            "   `|       Set [44]_Mcell [1].dend(0-1)\n",
            " `|       Set [44]_Mcell [1].axon(0-1)\n",
            "|-|       Set [44]_Mcell [2].soma(0-1)\n",
            "   `|       Set [44]_Mcell [2].dend(0-1)\n",
            " `|       Set [44]_Mcell [2].axon(0-1)\n",
            "|--|       Set [44]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [44]_Gcell [3].dend(0-1)\n",
            " `-|       Set [44]_Gcell [3].axon(0-1)\n",
            "|--|       Set [44]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [44]_Gcell [4].dend(0-1)\n",
            " `-|       Set [44]_Gcell [4].axon(0-1)\n",
            "|-|       Set [45]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [45]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [45]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [45]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [45]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [45]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [45]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [45]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [45]_Mcell [2].soma(0-1)\n",
            "   `|       Set [45]_Mcell [2].dend(0-1)\n",
            " `|       Set [45]_Mcell [2].axon(0-1)\n",
            "|-|       Set [45]_Mcell [3].soma(0-1)\n",
            "   `|       Set [45]_Mcell [3].dend(0-1)\n",
            " `|       Set [45]_Mcell [3].axon(0-1)\n",
            "|-|       Set [45]_Mcell [1].soma(0-1)\n",
            "   `|       Set [45]_Mcell [1].dend(0-1)\n",
            " `|       Set [45]_Mcell [1].axon(0-1)\n",
            "|-|       Set [45]_Mcell [2].soma(0-1)\n",
            "   `|       Set [45]_Mcell [2].dend(0-1)\n",
            " `|       Set [45]_Mcell [2].axon(0-1)\n",
            "|--|       Set [45]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [45]_Gcell [3].dend(0-1)\n",
            " `-|       Set [45]_Gcell [3].axon(0-1)\n",
            "|--|       Set [45]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [45]_Gcell [4].dend(0-1)\n",
            " `-|       Set [45]_Gcell [4].axon(0-1)\n",
            "|-|       Set [46]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [46]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [46]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [46]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [46]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [46]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [46]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [46]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [46]_Mcell [2].soma(0-1)\n",
            "   `|       Set [46]_Mcell [2].dend(0-1)\n",
            " `|       Set [46]_Mcell [2].axon(0-1)\n",
            "|-|       Set [46]_Mcell [3].soma(0-1)\n",
            "   `|       Set [46]_Mcell [3].dend(0-1)\n",
            " `|       Set [46]_Mcell [3].axon(0-1)\n",
            "|-|       Set [46]_Mcell [1].soma(0-1)\n",
            "   `|       Set [46]_Mcell [1].dend(0-1)\n",
            " `|       Set [46]_Mcell [1].axon(0-1)\n",
            "|-|       Set [46]_Mcell [2].soma(0-1)\n",
            "   `|       Set [46]_Mcell [2].dend(0-1)\n",
            " `|       Set [46]_Mcell [2].axon(0-1)\n",
            "|--|       Set [46]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [46]_Gcell [3].dend(0-1)\n",
            " `-|       Set [46]_Gcell [3].axon(0-1)\n",
            "|--|       Set [46]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [46]_Gcell [4].dend(0-1)\n",
            " `-|       Set [46]_Gcell [4].axon(0-1)\n",
            "|-|       Set [47]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [47]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [47]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [47]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [47]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [47]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [47]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [47]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [47]_Mcell [2].soma(0-1)\n",
            "   `|       Set [47]_Mcell [2].dend(0-1)\n",
            " `|       Set [47]_Mcell [2].axon(0-1)\n",
            "|-|       Set [47]_Mcell [3].soma(0-1)\n",
            "   `|       Set [47]_Mcell [3].dend(0-1)\n",
            " `|       Set [47]_Mcell [3].axon(0-1)\n",
            "|-|       Set [47]_Mcell [1].soma(0-1)\n",
            "   `|       Set [47]_Mcell [1].dend(0-1)\n",
            " `|       Set [47]_Mcell [1].axon(0-1)\n",
            "|-|       Set [47]_Mcell [2].soma(0-1)\n",
            "   `|       Set [47]_Mcell [2].dend(0-1)\n",
            " `|       Set [47]_Mcell [2].axon(0-1)\n",
            "|--|       Set [47]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [47]_Gcell [3].dend(0-1)\n",
            " `-|       Set [47]_Gcell [3].axon(0-1)\n",
            "|--|       Set [47]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [47]_Gcell [4].dend(0-1)\n",
            " `-|       Set [47]_Gcell [4].axon(0-1)\n",
            "|-|       Set [48]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [48]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [48]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [48]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [48]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [48]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [48]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [48]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [48]_Mcell [2].soma(0-1)\n",
            "   `|       Set [48]_Mcell [2].dend(0-1)\n",
            " `|       Set [48]_Mcell [2].axon(0-1)\n",
            "|-|       Set [48]_Mcell [3].soma(0-1)\n",
            "   `|       Set [48]_Mcell [3].dend(0-1)\n",
            " `|       Set [48]_Mcell [3].axon(0-1)\n",
            "|-|       Set [48]_Mcell [1].soma(0-1)\n",
            "   `|       Set [48]_Mcell [1].dend(0-1)\n",
            " `|       Set [48]_Mcell [1].axon(0-1)\n",
            "|-|       Set [48]_Mcell [2].soma(0-1)\n",
            "   `|       Set [48]_Mcell [2].dend(0-1)\n",
            " `|       Set [48]_Mcell [2].axon(0-1)\n",
            "|--|       Set [48]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [48]_Gcell [3].dend(0-1)\n",
            " `-|       Set [48]_Gcell [3].axon(0-1)\n",
            "|--|       Set [48]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [48]_Gcell [4].dend(0-1)\n",
            " `-|       Set [48]_Gcell [4].axon(0-1)\n",
            "|-|       Set [49]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [49]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [49]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [49]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [49]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [49]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [49]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [49]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [49]_Mcell [2].soma(0-1)\n",
            "   `|       Set [49]_Mcell [2].dend(0-1)\n",
            " `|       Set [49]_Mcell [2].axon(0-1)\n",
            "|-|       Set [49]_Mcell [3].soma(0-1)\n",
            "   `|       Set [49]_Mcell [3].dend(0-1)\n",
            " `|       Set [49]_Mcell [3].axon(0-1)\n",
            "|-|       Set [49]_Mcell [1].soma(0-1)\n",
            "   `|       Set [49]_Mcell [1].dend(0-1)\n",
            " `|       Set [49]_Mcell [1].axon(0-1)\n",
            "|-|       Set [49]_Mcell [2].soma(0-1)\n",
            "   `|       Set [49]_Mcell [2].dend(0-1)\n",
            " `|       Set [49]_Mcell [2].axon(0-1)\n",
            "|--|       Set [49]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [49]_Gcell [3].dend(0-1)\n",
            " `-|       Set [49]_Gcell [3].axon(0-1)\n",
            "|--|       Set [49]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [49]_Gcell [4].dend(0-1)\n",
            " `-|       Set [49]_Gcell [4].axon(0-1)\n",
            "|-|       Set [50]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [50]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [50]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [50]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [50]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [50]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [50]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [50]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [50]_Mcell [2].soma(0-1)\n",
            "   `|       Set [50]_Mcell [2].dend(0-1)\n",
            " `|       Set [50]_Mcell [2].axon(0-1)\n",
            "|-|       Set [50]_Mcell [3].soma(0-1)\n",
            "   `|       Set [50]_Mcell [3].dend(0-1)\n",
            " `|       Set [50]_Mcell [3].axon(0-1)\n",
            "|-|       Set [50]_Mcell [1].soma(0-1)\n",
            "   `|       Set [50]_Mcell [1].dend(0-1)\n",
            " `|       Set [50]_Mcell [1].axon(0-1)\n",
            "|-|       Set [50]_Mcell [2].soma(0-1)\n",
            "   `|       Set [50]_Mcell [2].dend(0-1)\n",
            " `|       Set [50]_Mcell [2].axon(0-1)\n",
            "|--|       Set [50]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [50]_Gcell [3].dend(0-1)\n",
            " `-|       Set [50]_Gcell [3].axon(0-1)\n",
            "|--|       Set [50]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [50]_Gcell [4].dend(0-1)\n",
            " `-|       Set [50]_Gcell [4].axon(0-1)\n",
            "|-|       Set [51]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [51]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [51]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [51]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [51]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [51]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [51]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [51]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [51]_Mcell [2].soma(0-1)\n",
            "   `|       Set [51]_Mcell [2].dend(0-1)\n",
            " `|       Set [51]_Mcell [2].axon(0-1)\n",
            "|-|       Set [51]_Mcell [3].soma(0-1)\n",
            "   `|       Set [51]_Mcell [3].dend(0-1)\n",
            " `|       Set [51]_Mcell [3].axon(0-1)\n",
            "|-|       Set [51]_Mcell [1].soma(0-1)\n",
            "   `|       Set [51]_Mcell [1].dend(0-1)\n",
            " `|       Set [51]_Mcell [1].axon(0-1)\n",
            "|-|       Set [51]_Mcell [2].soma(0-1)\n",
            "   `|       Set [51]_Mcell [2].dend(0-1)\n",
            " `|       Set [51]_Mcell [2].axon(0-1)\n",
            "|--|       Set [51]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [51]_Gcell [3].dend(0-1)\n",
            " `-|       Set [51]_Gcell [3].axon(0-1)\n",
            "|--|       Set [51]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [51]_Gcell [4].dend(0-1)\n",
            " `-|       Set [51]_Gcell [4].axon(0-1)\n",
            "|-|       Set [52]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [52]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [52]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [52]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [52]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [52]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [52]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [52]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [52]_Mcell [2].soma(0-1)\n",
            "   `|       Set [52]_Mcell [2].dend(0-1)\n",
            " `|       Set [52]_Mcell [2].axon(0-1)\n",
            "|-|       Set [52]_Mcell [3].soma(0-1)\n",
            "   `|       Set [52]_Mcell [3].dend(0-1)\n",
            " `|       Set [52]_Mcell [3].axon(0-1)\n",
            "|-|       Set [52]_Mcell [1].soma(0-1)\n",
            "   `|       Set [52]_Mcell [1].dend(0-1)\n",
            " `|       Set [52]_Mcell [1].axon(0-1)\n",
            "|-|       Set [52]_Mcell [2].soma(0-1)\n",
            "   `|       Set [52]_Mcell [2].dend(0-1)\n",
            " `|       Set [52]_Mcell [2].axon(0-1)\n",
            "|--|       Set [52]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [52]_Gcell [3].dend(0-1)\n",
            " `-|       Set [52]_Gcell [3].axon(0-1)\n",
            "|--|       Set [52]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [52]_Gcell [4].dend(0-1)\n",
            " `-|       Set [52]_Gcell [4].axon(0-1)\n",
            "|-|       Set [53]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [53]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [53]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [53]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [53]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [53]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [53]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [53]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [53]_Mcell [2].soma(0-1)\n",
            "   `|       Set [53]_Mcell [2].dend(0-1)\n",
            " `|       Set [53]_Mcell [2].axon(0-1)\n",
            "|-|       Set [53]_Mcell [3].soma(0-1)\n",
            "   `|       Set [53]_Mcell [3].dend(0-1)\n",
            " `|       Set [53]_Mcell [3].axon(0-1)\n",
            "|-|       Set [53]_Mcell [1].soma(0-1)\n",
            "   `|       Set [53]_Mcell [1].dend(0-1)\n",
            " `|       Set [53]_Mcell [1].axon(0-1)\n",
            "|-|       Set [53]_Mcell [2].soma(0-1)\n",
            "   `|       Set [53]_Mcell [2].dend(0-1)\n",
            " `|       Set [53]_Mcell [2].axon(0-1)\n",
            "|--|       Set [53]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [53]_Gcell [3].dend(0-1)\n",
            " `-|       Set [53]_Gcell [3].axon(0-1)\n",
            "|--|       Set [53]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [53]_Gcell [4].dend(0-1)\n",
            " `-|       Set [53]_Gcell [4].axon(0-1)\n",
            "|-|       Set [54]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [54]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [54]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [54]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [54]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [54]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [54]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [54]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [54]_Mcell [2].soma(0-1)\n",
            "   `|       Set [54]_Mcell [2].dend(0-1)\n",
            " `|       Set [54]_Mcell [2].axon(0-1)\n",
            "|-|       Set [54]_Mcell [3].soma(0-1)\n",
            "   `|       Set [54]_Mcell [3].dend(0-1)\n",
            " `|       Set [54]_Mcell [3].axon(0-1)\n",
            "|-|       Set [54]_Mcell [1].soma(0-1)\n",
            "   `|       Set [54]_Mcell [1].dend(0-1)\n",
            " `|       Set [54]_Mcell [1].axon(0-1)\n",
            "|-|       Set [54]_Mcell [2].soma(0-1)\n",
            "   `|       Set [54]_Mcell [2].dend(0-1)\n",
            " `|       Set [54]_Mcell [2].axon(0-1)\n",
            "|--|       Set [54]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [54]_Gcell [3].dend(0-1)\n",
            " `-|       Set [54]_Gcell [3].axon(0-1)\n",
            "|--|       Set [54]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [54]_Gcell [4].dend(0-1)\n",
            " `-|       Set [54]_Gcell [4].axon(0-1)\n",
            "|-|       Set [55]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [55]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [55]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [55]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [55]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [55]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [55]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [55]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [55]_Mcell [2].soma(0-1)\n",
            "   `|       Set [55]_Mcell [2].dend(0-1)\n",
            " `|       Set [55]_Mcell [2].axon(0-1)\n",
            "|-|       Set [55]_Mcell [3].soma(0-1)\n",
            "   `|       Set [55]_Mcell [3].dend(0-1)\n",
            " `|       Set [55]_Mcell [3].axon(0-1)\n",
            "|-|       Set [55]_Mcell [1].soma(0-1)\n",
            "   `|       Set [55]_Mcell [1].dend(0-1)\n",
            " `|       Set [55]_Mcell [1].axon(0-1)\n",
            "|-|       Set [55]_Mcell [2].soma(0-1)\n",
            "   `|       Set [55]_Mcell [2].dend(0-1)\n",
            " `|       Set [55]_Mcell [2].axon(0-1)\n",
            "|--|       Set [55]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [55]_Gcell [3].dend(0-1)\n",
            " `-|       Set [55]_Gcell [3].axon(0-1)\n",
            "|--|       Set [55]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [55]_Gcell [4].dend(0-1)\n",
            " `-|       Set [55]_Gcell [4].axon(0-1)\n",
            "|-|       Set [56]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [56]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [56]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [56]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [56]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [56]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [56]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [56]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [56]_Mcell [2].soma(0-1)\n",
            "   `|       Set [56]_Mcell [2].dend(0-1)\n",
            " `|       Set [56]_Mcell [2].axon(0-1)\n",
            "|-|       Set [56]_Mcell [3].soma(0-1)\n",
            "   `|       Set [56]_Mcell [3].dend(0-1)\n",
            " `|       Set [56]_Mcell [3].axon(0-1)\n",
            "|-|       Set [56]_Mcell [1].soma(0-1)\n",
            "   `|       Set [56]_Mcell [1].dend(0-1)\n",
            " `|       Set [56]_Mcell [1].axon(0-1)\n",
            "|-|       Set [56]_Mcell [2].soma(0-1)\n",
            "   `|       Set [56]_Mcell [2].dend(0-1)\n",
            " `|       Set [56]_Mcell [2].axon(0-1)\n",
            "|--|       Set [56]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [56]_Gcell [3].dend(0-1)\n",
            " `-|       Set [56]_Gcell [3].axon(0-1)\n",
            "|--|       Set [56]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [56]_Gcell [4].dend(0-1)\n",
            " `-|       Set [56]_Gcell [4].axon(0-1)\n",
            "|-|       Set [57]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [57]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [57]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [57]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [57]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [57]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [57]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [57]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [57]_Mcell [2].soma(0-1)\n",
            "   `|       Set [57]_Mcell [2].dend(0-1)\n",
            " `|       Set [57]_Mcell [2].axon(0-1)\n",
            "|-|       Set [57]_Mcell [3].soma(0-1)\n",
            "   `|       Set [57]_Mcell [3].dend(0-1)\n",
            " `|       Set [57]_Mcell [3].axon(0-1)\n",
            "|-|       Set [57]_Mcell [1].soma(0-1)\n",
            "   `|       Set [57]_Mcell [1].dend(0-1)\n",
            " `|       Set [57]_Mcell [1].axon(0-1)\n",
            "|-|       Set [57]_Mcell [2].soma(0-1)\n",
            "   `|       Set [57]_Mcell [2].dend(0-1)\n",
            " `|       Set [57]_Mcell [2].axon(0-1)\n",
            "|--|       Set [57]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [57]_Gcell [3].dend(0-1)\n",
            " `-|       Set [57]_Gcell [3].axon(0-1)\n",
            "|--|       Set [57]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [57]_Gcell [4].dend(0-1)\n",
            " `-|       Set [57]_Gcell [4].axon(0-1)\n",
            "|-|       Set [58]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [58]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [58]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [58]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [58]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [58]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [58]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [58]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [58]_Mcell [2].soma(0-1)\n",
            "   `|       Set [58]_Mcell [2].dend(0-1)\n",
            " `|       Set [58]_Mcell [2].axon(0-1)\n",
            "|-|       Set [58]_Mcell [3].soma(0-1)\n",
            "   `|       Set [58]_Mcell [3].dend(0-1)\n",
            " `|       Set [58]_Mcell [3].axon(0-1)\n",
            "|-|       Set [58]_Mcell [1].soma(0-1)\n",
            "   `|       Set [58]_Mcell [1].dend(0-1)\n",
            " `|       Set [58]_Mcell [1].axon(0-1)\n",
            "|-|       Set [58]_Mcell [2].soma(0-1)\n",
            "   `|       Set [58]_Mcell [2].dend(0-1)\n",
            " `|       Set [58]_Mcell [2].axon(0-1)\n",
            "|--|       Set [58]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [58]_Gcell [3].dend(0-1)\n",
            " `-|       Set [58]_Gcell [3].axon(0-1)\n",
            "|--|       Set [58]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [58]_Gcell [4].dend(0-1)\n",
            " `-|       Set [58]_Gcell [4].axon(0-1)\n",
            "|-|       Set [59]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [59]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [59]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [59]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [59]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [59]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [59]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [59]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [59]_Mcell [2].soma(0-1)\n",
            "   `|       Set [59]_Mcell [2].dend(0-1)\n",
            " `|       Set [59]_Mcell [2].axon(0-1)\n",
            "|-|       Set [59]_Mcell [3].soma(0-1)\n",
            "   `|       Set [59]_Mcell [3].dend(0-1)\n",
            " `|       Set [59]_Mcell [3].axon(0-1)\n",
            "|-|       Set [59]_Mcell [1].soma(0-1)\n",
            "   `|       Set [59]_Mcell [1].dend(0-1)\n",
            " `|       Set [59]_Mcell [1].axon(0-1)\n",
            "|-|       Set [59]_Mcell [2].soma(0-1)\n",
            "   `|       Set [59]_Mcell [2].dend(0-1)\n",
            " `|       Set [59]_Mcell [2].axon(0-1)\n",
            "|--|       Set [59]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [59]_Gcell [3].dend(0-1)\n",
            " `-|       Set [59]_Gcell [3].axon(0-1)\n",
            "|--|       Set [59]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [59]_Gcell [4].dend(0-1)\n",
            " `-|       Set [59]_Gcell [4].axon(0-1)\n",
            "|-|       Set [60]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [60]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [60]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [60]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [60]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [60]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [60]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [60]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [60]_Mcell [2].soma(0-1)\n",
            "   `|       Set [60]_Mcell [2].dend(0-1)\n",
            " `|       Set [60]_Mcell [2].axon(0-1)\n",
            "|-|       Set [60]_Mcell [3].soma(0-1)\n",
            "   `|       Set [60]_Mcell [3].dend(0-1)\n",
            " `|       Set [60]_Mcell [3].axon(0-1)\n",
            "|-|       Set [60]_Mcell [1].soma(0-1)\n",
            "   `|       Set [60]_Mcell [1].dend(0-1)\n",
            " `|       Set [60]_Mcell [1].axon(0-1)\n",
            "|-|       Set [60]_Mcell [2].soma(0-1)\n",
            "   `|       Set [60]_Mcell [2].dend(0-1)\n",
            " `|       Set [60]_Mcell [2].axon(0-1)\n",
            "|--|       Set [60]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [60]_Gcell [3].dend(0-1)\n",
            " `-|       Set [60]_Gcell [3].axon(0-1)\n",
            "|--|       Set [60]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [60]_Gcell [4].dend(0-1)\n",
            " `-|       Set [60]_Gcell [4].axon(0-1)\n",
            "|-|       Set [61]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [61]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [61]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [61]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [61]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [61]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [61]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [61]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [61]_Mcell [2].soma(0-1)\n",
            "   `|       Set [61]_Mcell [2].dend(0-1)\n",
            " `|       Set [61]_Mcell [2].axon(0-1)\n",
            "|-|       Set [61]_Mcell [3].soma(0-1)\n",
            "   `|       Set [61]_Mcell [3].dend(0-1)\n",
            " `|       Set [61]_Mcell [3].axon(0-1)\n",
            "|-|       Set [61]_Mcell [1].soma(0-1)\n",
            "   `|       Set [61]_Mcell [1].dend(0-1)\n",
            " `|       Set [61]_Mcell [1].axon(0-1)\n",
            "|-|       Set [61]_Mcell [2].soma(0-1)\n",
            "   `|       Set [61]_Mcell [2].dend(0-1)\n",
            " `|       Set [61]_Mcell [2].axon(0-1)\n",
            "|--|       Set [61]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [61]_Gcell [3].dend(0-1)\n",
            " `-|       Set [61]_Gcell [3].axon(0-1)\n",
            "|--|       Set [61]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [61]_Gcell [4].dend(0-1)\n",
            " `-|       Set [61]_Gcell [4].axon(0-1)\n",
            "|-|       Set [62]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [62]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [62]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [62]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [62]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [62]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [62]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [62]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [62]_Mcell [2].soma(0-1)\n",
            "   `|       Set [62]_Mcell [2].dend(0-1)\n",
            " `|       Set [62]_Mcell [2].axon(0-1)\n",
            "|-|       Set [62]_Mcell [3].soma(0-1)\n",
            "   `|       Set [62]_Mcell [3].dend(0-1)\n",
            " `|       Set [62]_Mcell [3].axon(0-1)\n",
            "|-|       Set [62]_Mcell [1].soma(0-1)\n",
            "   `|       Set [62]_Mcell [1].dend(0-1)\n",
            " `|       Set [62]_Mcell [1].axon(0-1)\n",
            "|-|       Set [62]_Mcell [2].soma(0-1)\n",
            "   `|       Set [62]_Mcell [2].dend(0-1)\n",
            " `|       Set [62]_Mcell [2].axon(0-1)\n",
            "|--|       Set [62]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [62]_Gcell [3].dend(0-1)\n",
            " `-|       Set [62]_Gcell [3].axon(0-1)\n",
            "|--|       Set [62]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [62]_Gcell [4].dend(0-1)\n",
            " `-|       Set [62]_Gcell [4].axon(0-1)\n",
            "|-|       Set [63]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [63]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [63]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [63]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [63]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [63]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [63]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [63]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [63]_Mcell [2].soma(0-1)\n",
            "   `|       Set [63]_Mcell [2].dend(0-1)\n",
            " `|       Set [63]_Mcell [2].axon(0-1)\n",
            "|-|       Set [63]_Mcell [3].soma(0-1)\n",
            "   `|       Set [63]_Mcell [3].dend(0-1)\n",
            " `|       Set [63]_Mcell [3].axon(0-1)\n",
            "|-|       Set [63]_Mcell [1].soma(0-1)\n",
            "   `|       Set [63]_Mcell [1].dend(0-1)\n",
            " `|       Set [63]_Mcell [1].axon(0-1)\n",
            "|-|       Set [63]_Mcell [2].soma(0-1)\n",
            "   `|       Set [63]_Mcell [2].dend(0-1)\n",
            " `|       Set [63]_Mcell [2].axon(0-1)\n",
            "|--|       Set [63]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [63]_Gcell [3].dend(0-1)\n",
            " `-|       Set [63]_Gcell [3].axon(0-1)\n",
            "|--|       Set [63]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [63]_Gcell [4].dend(0-1)\n",
            " `-|       Set [63]_Gcell [4].axon(0-1)\n",
            "|-|       Set [64]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [64]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [64]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [64]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [64]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [64]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [64]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [64]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [64]_Mcell [2].soma(0-1)\n",
            "   `|       Set [64]_Mcell [2].dend(0-1)\n",
            " `|       Set [64]_Mcell [2].axon(0-1)\n",
            "|-|       Set [64]_Mcell [3].soma(0-1)\n",
            "   `|       Set [64]_Mcell [3].dend(0-1)\n",
            " `|       Set [64]_Mcell [3].axon(0-1)\n",
            "|-|       Set [64]_Mcell [1].soma(0-1)\n",
            "   `|       Set [64]_Mcell [1].dend(0-1)\n",
            " `|       Set [64]_Mcell [1].axon(0-1)\n",
            "|-|       Set [64]_Mcell [2].soma(0-1)\n",
            "   `|       Set [64]_Mcell [2].dend(0-1)\n",
            " `|       Set [64]_Mcell [2].axon(0-1)\n",
            "|--|       Set [64]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [64]_Gcell [3].dend(0-1)\n",
            " `-|       Set [64]_Gcell [3].axon(0-1)\n",
            "|--|       Set [64]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [64]_Gcell [4].dend(0-1)\n",
            " `-|       Set [64]_Gcell [4].axon(0-1)\n",
            "|-|       Set [65]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [65]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [65]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [65]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [65]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [65]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [65]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [65]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [65]_Mcell [2].soma(0-1)\n",
            "   `|       Set [65]_Mcell [2].dend(0-1)\n",
            " `|       Set [65]_Mcell [2].axon(0-1)\n",
            "|-|       Set [65]_Mcell [3].soma(0-1)\n",
            "   `|       Set [65]_Mcell [3].dend(0-1)\n",
            " `|       Set [65]_Mcell [3].axon(0-1)\n",
            "|-|       Set [65]_Mcell [1].soma(0-1)\n",
            "   `|       Set [65]_Mcell [1].dend(0-1)\n",
            " `|       Set [65]_Mcell [1].axon(0-1)\n",
            "|-|       Set [65]_Mcell [2].soma(0-1)\n",
            "   `|       Set [65]_Mcell [2].dend(0-1)\n",
            " `|       Set [65]_Mcell [2].axon(0-1)\n",
            "|--|       Set [65]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [65]_Gcell [3].dend(0-1)\n",
            " `-|       Set [65]_Gcell [3].axon(0-1)\n",
            "|--|       Set [65]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [65]_Gcell [4].dend(0-1)\n",
            " `-|       Set [65]_Gcell [4].axon(0-1)\n",
            "|-|       Set [66]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [66]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [66]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [66]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [66]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [66]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [66]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [66]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [66]_Mcell [2].soma(0-1)\n",
            "   `|       Set [66]_Mcell [2].dend(0-1)\n",
            " `|       Set [66]_Mcell [2].axon(0-1)\n",
            "|-|       Set [66]_Mcell [3].soma(0-1)\n",
            "   `|       Set [66]_Mcell [3].dend(0-1)\n",
            " `|       Set [66]_Mcell [3].axon(0-1)\n",
            "|-|       Set [66]_Mcell [1].soma(0-1)\n",
            "   `|       Set [66]_Mcell [1].dend(0-1)\n",
            " `|       Set [66]_Mcell [1].axon(0-1)\n",
            "|-|       Set [66]_Mcell [2].soma(0-1)\n",
            "   `|       Set [66]_Mcell [2].dend(0-1)\n",
            " `|       Set [66]_Mcell [2].axon(0-1)\n",
            "|--|       Set [66]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [66]_Gcell [3].dend(0-1)\n",
            " `-|       Set [66]_Gcell [3].axon(0-1)\n",
            "|--|       Set [66]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [66]_Gcell [4].dend(0-1)\n",
            " `-|       Set [66]_Gcell [4].axon(0-1)\n",
            "|-|       Set [67]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [67]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [67]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [67]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [67]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [67]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [67]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [67]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [67]_Mcell [2].soma(0-1)\n",
            "   `|       Set [67]_Mcell [2].dend(0-1)\n",
            " `|       Set [67]_Mcell [2].axon(0-1)\n",
            "|-|       Set [67]_Mcell [3].soma(0-1)\n",
            "   `|       Set [67]_Mcell [3].dend(0-1)\n",
            " `|       Set [67]_Mcell [3].axon(0-1)\n",
            "|-|       Set [67]_Mcell [1].soma(0-1)\n",
            "   `|       Set [67]_Mcell [1].dend(0-1)\n",
            " `|       Set [67]_Mcell [1].axon(0-1)\n",
            "|-|       Set [67]_Mcell [2].soma(0-1)\n",
            "   `|       Set [67]_Mcell [2].dend(0-1)\n",
            " `|       Set [67]_Mcell [2].axon(0-1)\n",
            "|--|       Set [67]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [67]_Gcell [3].dend(0-1)\n",
            " `-|       Set [67]_Gcell [3].axon(0-1)\n",
            "|--|       Set [67]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [67]_Gcell [4].dend(0-1)\n",
            " `-|       Set [67]_Gcell [4].axon(0-1)\n",
            "|-|       Set [68]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [68]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [68]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [68]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [68]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [68]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [68]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [68]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [68]_Mcell [2].soma(0-1)\n",
            "   `|       Set [68]_Mcell [2].dend(0-1)\n",
            " `|       Set [68]_Mcell [2].axon(0-1)\n",
            "|-|       Set [68]_Mcell [3].soma(0-1)\n",
            "   `|       Set [68]_Mcell [3].dend(0-1)\n",
            " `|       Set [68]_Mcell [3].axon(0-1)\n",
            "|-|       Set [68]_Mcell [1].soma(0-1)\n",
            "   `|       Set [68]_Mcell [1].dend(0-1)\n",
            " `|       Set [68]_Mcell [1].axon(0-1)\n",
            "|-|       Set [68]_Mcell [2].soma(0-1)\n",
            "   `|       Set [68]_Mcell [2].dend(0-1)\n",
            " `|       Set [68]_Mcell [2].axon(0-1)\n",
            "|--|       Set [68]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [68]_Gcell [3].dend(0-1)\n",
            " `-|       Set [68]_Gcell [3].axon(0-1)\n",
            "|--|       Set [68]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [68]_Gcell [4].dend(0-1)\n",
            " `-|       Set [68]_Gcell [4].axon(0-1)\n",
            "|-|       Set [69]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [69]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [69]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [69]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [69]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [69]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [69]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [69]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [69]_Mcell [2].soma(0-1)\n",
            "   `|       Set [69]_Mcell [2].dend(0-1)\n",
            " `|       Set [69]_Mcell [2].axon(0-1)\n",
            "|-|       Set [69]_Mcell [3].soma(0-1)\n",
            "   `|       Set [69]_Mcell [3].dend(0-1)\n",
            " `|       Set [69]_Mcell [3].axon(0-1)\n",
            "|-|       Set [69]_Mcell [1].soma(0-1)\n",
            "   `|       Set [69]_Mcell [1].dend(0-1)\n",
            " `|       Set [69]_Mcell [1].axon(0-1)\n",
            "|-|       Set [69]_Mcell [2].soma(0-1)\n",
            "   `|       Set [69]_Mcell [2].dend(0-1)\n",
            " `|       Set [69]_Mcell [2].axon(0-1)\n",
            "|--|       Set [69]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [69]_Gcell [3].dend(0-1)\n",
            " `-|       Set [69]_Gcell [3].axon(0-1)\n",
            "|--|       Set [69]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [69]_Gcell [4].dend(0-1)\n",
            " `-|       Set [69]_Gcell [4].axon(0-1)\n",
            "|-|       Set [70]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [70]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [70]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [70]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [70]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [70]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [70]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [70]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [70]_Mcell [2].soma(0-1)\n",
            "   `|       Set [70]_Mcell [2].dend(0-1)\n",
            " `|       Set [70]_Mcell [2].axon(0-1)\n",
            "|-|       Set [70]_Mcell [3].soma(0-1)\n",
            "   `|       Set [70]_Mcell [3].dend(0-1)\n",
            " `|       Set [70]_Mcell [3].axon(0-1)\n",
            "|-|       Set [70]_Mcell [1].soma(0-1)\n",
            "   `|       Set [70]_Mcell [1].dend(0-1)\n",
            " `|       Set [70]_Mcell [1].axon(0-1)\n",
            "|-|       Set [70]_Mcell [2].soma(0-1)\n",
            "   `|       Set [70]_Mcell [2].dend(0-1)\n",
            " `|       Set [70]_Mcell [2].axon(0-1)\n",
            "|--|       Set [70]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [70]_Gcell [3].dend(0-1)\n",
            " `-|       Set [70]_Gcell [3].axon(0-1)\n",
            "|--|       Set [70]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [70]_Gcell [4].dend(0-1)\n",
            " `-|       Set [70]_Gcell [4].axon(0-1)\n",
            "|-|       Set [71]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [71]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [71]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [71]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [71]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [71]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [71]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [71]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [71]_Mcell [2].soma(0-1)\n",
            "   `|       Set [71]_Mcell [2].dend(0-1)\n",
            " `|       Set [71]_Mcell [2].axon(0-1)\n",
            "|-|       Set [71]_Mcell [3].soma(0-1)\n",
            "   `|       Set [71]_Mcell [3].dend(0-1)\n",
            " `|       Set [71]_Mcell [3].axon(0-1)\n",
            "|-|       Set [71]_Mcell [1].soma(0-1)\n",
            "   `|       Set [71]_Mcell [1].dend(0-1)\n",
            " `|       Set [71]_Mcell [1].axon(0-1)\n",
            "|-|       Set [71]_Mcell [2].soma(0-1)\n",
            "   `|       Set [71]_Mcell [2].dend(0-1)\n",
            " `|       Set [71]_Mcell [2].axon(0-1)\n",
            "|--|       Set [71]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [71]_Gcell [3].dend(0-1)\n",
            " `-|       Set [71]_Gcell [3].axon(0-1)\n",
            "|--|       Set [71]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [71]_Gcell [4].dend(0-1)\n",
            " `-|       Set [71]_Gcell [4].axon(0-1)\n",
            "|-|       Set [72]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [72]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [72]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [72]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [72]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [72]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [72]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [72]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [72]_Mcell [2].soma(0-1)\n",
            "   `|       Set [72]_Mcell [2].dend(0-1)\n",
            " `|       Set [72]_Mcell [2].axon(0-1)\n",
            "|-|       Set [72]_Mcell [3].soma(0-1)\n",
            "   `|       Set [72]_Mcell [3].dend(0-1)\n",
            " `|       Set [72]_Mcell [3].axon(0-1)\n",
            "|-|       Set [72]_Mcell [1].soma(0-1)\n",
            "   `|       Set [72]_Mcell [1].dend(0-1)\n",
            " `|       Set [72]_Mcell [1].axon(0-1)\n",
            "|-|       Set [72]_Mcell [2].soma(0-1)\n",
            "   `|       Set [72]_Mcell [2].dend(0-1)\n",
            " `|       Set [72]_Mcell [2].axon(0-1)\n",
            "|--|       Set [72]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [72]_Gcell [3].dend(0-1)\n",
            " `-|       Set [72]_Gcell [3].axon(0-1)\n",
            "|--|       Set [72]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [72]_Gcell [4].dend(0-1)\n",
            " `-|       Set [72]_Gcell [4].axon(0-1)\n",
            "|-|       Set [73]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [73]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [73]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [73]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [73]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [73]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [73]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [73]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [73]_Mcell [2].soma(0-1)\n",
            "   `|       Set [73]_Mcell [2].dend(0-1)\n",
            " `|       Set [73]_Mcell [2].axon(0-1)\n",
            "|-|       Set [73]_Mcell [3].soma(0-1)\n",
            "   `|       Set [73]_Mcell [3].dend(0-1)\n",
            " `|       Set [73]_Mcell [3].axon(0-1)\n",
            "|-|       Set [73]_Mcell [1].soma(0-1)\n",
            "   `|       Set [73]_Mcell [1].dend(0-1)\n",
            " `|       Set [73]_Mcell [1].axon(0-1)\n",
            "|-|       Set [73]_Mcell [2].soma(0-1)\n",
            "   `|       Set [73]_Mcell [2].dend(0-1)\n",
            " `|       Set [73]_Mcell [2].axon(0-1)\n",
            "|--|       Set [73]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [73]_Gcell [3].dend(0-1)\n",
            " `-|       Set [73]_Gcell [3].axon(0-1)\n",
            "|--|       Set [73]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [73]_Gcell [4].dend(0-1)\n",
            " `-|       Set [73]_Gcell [4].axon(0-1)\n",
            "|-|       Set [74]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [74]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [74]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [74]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [74]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [74]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [74]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [74]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [74]_Mcell [2].soma(0-1)\n",
            "   `|       Set [74]_Mcell [2].dend(0-1)\n",
            " `|       Set [74]_Mcell [2].axon(0-1)\n",
            "|-|       Set [74]_Mcell [3].soma(0-1)\n",
            "   `|       Set [74]_Mcell [3].dend(0-1)\n",
            " `|       Set [74]_Mcell [3].axon(0-1)\n",
            "|-|       Set [74]_Mcell [1].soma(0-1)\n",
            "   `|       Set [74]_Mcell [1].dend(0-1)\n",
            " `|       Set [74]_Mcell [1].axon(0-1)\n",
            "|-|       Set [74]_Mcell [2].soma(0-1)\n",
            "   `|       Set [74]_Mcell [2].dend(0-1)\n",
            " `|       Set [74]_Mcell [2].axon(0-1)\n",
            "|--|       Set [74]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [74]_Gcell [3].dend(0-1)\n",
            " `-|       Set [74]_Gcell [3].axon(0-1)\n",
            "|--|       Set [74]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [74]_Gcell [4].dend(0-1)\n",
            " `-|       Set [74]_Gcell [4].axon(0-1)\n",
            "|-|       Set [75]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [75]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [75]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [75]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [75]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [75]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [75]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [75]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [75]_Mcell [2].soma(0-1)\n",
            "   `|       Set [75]_Mcell [2].dend(0-1)\n",
            " `|       Set [75]_Mcell [2].axon(0-1)\n",
            "|-|       Set [75]_Mcell [3].soma(0-1)\n",
            "   `|       Set [75]_Mcell [3].dend(0-1)\n",
            " `|       Set [75]_Mcell [3].axon(0-1)\n",
            "|-|       Set [75]_Mcell [1].soma(0-1)\n",
            "   `|       Set [75]_Mcell [1].dend(0-1)\n",
            " `|       Set [75]_Mcell [1].axon(0-1)\n",
            "|-|       Set [75]_Mcell [2].soma(0-1)\n",
            "   `|       Set [75]_Mcell [2].dend(0-1)\n",
            " `|       Set [75]_Mcell [2].axon(0-1)\n",
            "|--|       Set [75]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [75]_Gcell [3].dend(0-1)\n",
            " `-|       Set [75]_Gcell [3].axon(0-1)\n",
            "|--|       Set [75]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [75]_Gcell [4].dend(0-1)\n",
            " `-|       Set [75]_Gcell [4].axon(0-1)\n",
            "|-|       Set [76]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [76]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [76]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [76]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [76]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [76]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [76]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [76]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [76]_Mcell [2].soma(0-1)\n",
            "   `|       Set [76]_Mcell [2].dend(0-1)\n",
            " `|       Set [76]_Mcell [2].axon(0-1)\n",
            "|-|       Set [76]_Mcell [3].soma(0-1)\n",
            "   `|       Set [76]_Mcell [3].dend(0-1)\n",
            " `|       Set [76]_Mcell [3].axon(0-1)\n",
            "|-|       Set [76]_Mcell [1].soma(0-1)\n",
            "   `|       Set [76]_Mcell [1].dend(0-1)\n",
            " `|       Set [76]_Mcell [1].axon(0-1)\n",
            "|-|       Set [76]_Mcell [2].soma(0-1)\n",
            "   `|       Set [76]_Mcell [2].dend(0-1)\n",
            " `|       Set [76]_Mcell [2].axon(0-1)\n",
            "|--|       Set [76]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [76]_Gcell [3].dend(0-1)\n",
            " `-|       Set [76]_Gcell [3].axon(0-1)\n",
            "|--|       Set [76]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [76]_Gcell [4].dend(0-1)\n",
            " `-|       Set [76]_Gcell [4].axon(0-1)\n",
            "|-|       Set [77]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [77]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [77]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [77]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [77]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [77]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [77]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [77]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [77]_Mcell [2].soma(0-1)\n",
            "   `|       Set [77]_Mcell [2].dend(0-1)\n",
            " `|       Set [77]_Mcell [2].axon(0-1)\n",
            "|-|       Set [77]_Mcell [3].soma(0-1)\n",
            "   `|       Set [77]_Mcell [3].dend(0-1)\n",
            " `|       Set [77]_Mcell [3].axon(0-1)\n",
            "|-|       Set [77]_Mcell [1].soma(0-1)\n",
            "   `|       Set [77]_Mcell [1].dend(0-1)\n",
            " `|       Set [77]_Mcell [1].axon(0-1)\n",
            "|-|       Set [77]_Mcell [2].soma(0-1)\n",
            "   `|       Set [77]_Mcell [2].dend(0-1)\n",
            " `|       Set [77]_Mcell [2].axon(0-1)\n",
            "|--|       Set [77]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [77]_Gcell [3].dend(0-1)\n",
            " `-|       Set [77]_Gcell [3].axon(0-1)\n",
            "|--|       Set [77]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [77]_Gcell [4].dend(0-1)\n",
            " `-|       Set [77]_Gcell [4].axon(0-1)\n",
            "|-|       Set [78]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [78]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [78]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [78]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [78]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [78]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [78]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [78]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [78]_Mcell [2].soma(0-1)\n",
            "   `|       Set [78]_Mcell [2].dend(0-1)\n",
            " `|       Set [78]_Mcell [2].axon(0-1)\n",
            "|-|       Set [78]_Mcell [3].soma(0-1)\n",
            "   `|       Set [78]_Mcell [3].dend(0-1)\n",
            " `|       Set [78]_Mcell [3].axon(0-1)\n",
            "|-|       Set [78]_Mcell [1].soma(0-1)\n",
            "   `|       Set [78]_Mcell [1].dend(0-1)\n",
            " `|       Set [78]_Mcell [1].axon(0-1)\n",
            "|-|       Set [78]_Mcell [2].soma(0-1)\n",
            "   `|       Set [78]_Mcell [2].dend(0-1)\n",
            " `|       Set [78]_Mcell [2].axon(0-1)\n",
            "|--|       Set [78]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [78]_Gcell [3].dend(0-1)\n",
            " `-|       Set [78]_Gcell [3].axon(0-1)\n",
            "|--|       Set [78]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [78]_Gcell [4].dend(0-1)\n",
            " `-|       Set [78]_Gcell [4].axon(0-1)\n",
            "|-|       Set [79]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [79]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [79]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [79]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [79]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [79]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [79]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [79]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [79]_Mcell [2].soma(0-1)\n",
            "   `|       Set [79]_Mcell [2].dend(0-1)\n",
            " `|       Set [79]_Mcell [2].axon(0-1)\n",
            "|-|       Set [79]_Mcell [3].soma(0-1)\n",
            "   `|       Set [79]_Mcell [3].dend(0-1)\n",
            " `|       Set [79]_Mcell [3].axon(0-1)\n",
            "|-|       Set [79]_Mcell [1].soma(0-1)\n",
            "   `|       Set [79]_Mcell [1].dend(0-1)\n",
            " `|       Set [79]_Mcell [1].axon(0-1)\n",
            "|-|       Set [79]_Mcell [2].soma(0-1)\n",
            "   `|       Set [79]_Mcell [2].dend(0-1)\n",
            " `|       Set [79]_Mcell [2].axon(0-1)\n",
            "|--|       Set [79]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [79]_Gcell [3].dend(0-1)\n",
            " `-|       Set [79]_Gcell [3].axon(0-1)\n",
            "|--|       Set [79]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [79]_Gcell [4].dend(0-1)\n",
            " `-|       Set [79]_Gcell [4].axon(0-1)\n",
            "|-|       Set [80]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [80]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [80]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [80]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [80]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [80]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [80]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [80]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [80]_Mcell [2].soma(0-1)\n",
            "   `|       Set [80]_Mcell [2].dend(0-1)\n",
            " `|       Set [80]_Mcell [2].axon(0-1)\n",
            "|-|       Set [80]_Mcell [3].soma(0-1)\n",
            "   `|       Set [80]_Mcell [3].dend(0-1)\n",
            " `|       Set [80]_Mcell [3].axon(0-1)\n",
            "|-|       Set [80]_Mcell [1].soma(0-1)\n",
            "   `|       Set [80]_Mcell [1].dend(0-1)\n",
            " `|       Set [80]_Mcell [1].axon(0-1)\n",
            "|-|       Set [80]_Mcell [2].soma(0-1)\n",
            "   `|       Set [80]_Mcell [2].dend(0-1)\n",
            " `|       Set [80]_Mcell [2].axon(0-1)\n",
            "|--|       Set [80]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [80]_Gcell [3].dend(0-1)\n",
            " `-|       Set [80]_Gcell [3].axon(0-1)\n",
            "|--|       Set [80]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [80]_Gcell [4].dend(0-1)\n",
            " `-|       Set [80]_Gcell [4].axon(0-1)\n",
            "|-|       Set [81]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [81]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [81]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [81]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [81]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [81]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [81]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [81]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [81]_Mcell [2].soma(0-1)\n",
            "   `|       Set [81]_Mcell [2].dend(0-1)\n",
            " `|       Set [81]_Mcell [2].axon(0-1)\n",
            "|-|       Set [81]_Mcell [3].soma(0-1)\n",
            "   `|       Set [81]_Mcell [3].dend(0-1)\n",
            " `|       Set [81]_Mcell [3].axon(0-1)\n",
            "|-|       Set [81]_Mcell [1].soma(0-1)\n",
            "   `|       Set [81]_Mcell [1].dend(0-1)\n",
            " `|       Set [81]_Mcell [1].axon(0-1)\n",
            "|-|       Set [81]_Mcell [2].soma(0-1)\n",
            "   `|       Set [81]_Mcell [2].dend(0-1)\n",
            " `|       Set [81]_Mcell [2].axon(0-1)\n",
            "|--|       Set [81]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [81]_Gcell [3].dend(0-1)\n",
            " `-|       Set [81]_Gcell [3].axon(0-1)\n",
            "|--|       Set [81]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [81]_Gcell [4].dend(0-1)\n",
            " `-|       Set [81]_Gcell [4].axon(0-1)\n",
            "|-|       Set [82]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [82]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [82]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [82]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [82]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [82]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [82]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [82]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [82]_Mcell [2].soma(0-1)\n",
            "   `|       Set [82]_Mcell [2].dend(0-1)\n",
            " `|       Set [82]_Mcell [2].axon(0-1)\n",
            "|-|       Set [82]_Mcell [3].soma(0-1)\n",
            "   `|       Set [82]_Mcell [3].dend(0-1)\n",
            " `|       Set [82]_Mcell [3].axon(0-1)\n",
            "|-|       Set [82]_Mcell [1].soma(0-1)\n",
            "   `|       Set [82]_Mcell [1].dend(0-1)\n",
            " `|       Set [82]_Mcell [1].axon(0-1)\n",
            "|-|       Set [82]_Mcell [2].soma(0-1)\n",
            "   `|       Set [82]_Mcell [2].dend(0-1)\n",
            " `|       Set [82]_Mcell [2].axon(0-1)\n",
            "|--|       Set [82]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [82]_Gcell [3].dend(0-1)\n",
            " `-|       Set [82]_Gcell [3].axon(0-1)\n",
            "|--|       Set [82]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [82]_Gcell [4].dend(0-1)\n",
            " `-|       Set [82]_Gcell [4].axon(0-1)\n",
            "|-|       Set [83]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [83]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [83]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [83]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [83]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [83]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [83]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [83]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [83]_Mcell [2].soma(0-1)\n",
            "   `|       Set [83]_Mcell [2].dend(0-1)\n",
            " `|       Set [83]_Mcell [2].axon(0-1)\n",
            "|-|       Set [83]_Mcell [3].soma(0-1)\n",
            "   `|       Set [83]_Mcell [3].dend(0-1)\n",
            " `|       Set [83]_Mcell [3].axon(0-1)\n",
            "|-|       Set [83]_Mcell [1].soma(0-1)\n",
            "   `|       Set [83]_Mcell [1].dend(0-1)\n",
            " `|       Set [83]_Mcell [1].axon(0-1)\n",
            "|-|       Set [83]_Mcell [2].soma(0-1)\n",
            "   `|       Set [83]_Mcell [2].dend(0-1)\n",
            " `|       Set [83]_Mcell [2].axon(0-1)\n",
            "|--|       Set [83]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [83]_Gcell [3].dend(0-1)\n",
            " `-|       Set [83]_Gcell [3].axon(0-1)\n",
            "|--|       Set [83]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [83]_Gcell [4].dend(0-1)\n",
            " `-|       Set [83]_Gcell [4].axon(0-1)\n",
            "|-|       Set [84]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [84]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [84]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [84]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [84]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [84]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [84]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [84]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [84]_Mcell [2].soma(0-1)\n",
            "   `|       Set [84]_Mcell [2].dend(0-1)\n",
            " `|       Set [84]_Mcell [2].axon(0-1)\n",
            "|-|       Set [84]_Mcell [3].soma(0-1)\n",
            "   `|       Set [84]_Mcell [3].dend(0-1)\n",
            " `|       Set [84]_Mcell [3].axon(0-1)\n",
            "|-|       Set [84]_Mcell [1].soma(0-1)\n",
            "   `|       Set [84]_Mcell [1].dend(0-1)\n",
            " `|       Set [84]_Mcell [1].axon(0-1)\n",
            "|-|       Set [84]_Mcell [2].soma(0-1)\n",
            "   `|       Set [84]_Mcell [2].dend(0-1)\n",
            " `|       Set [84]_Mcell [2].axon(0-1)\n",
            "|--|       Set [84]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [84]_Gcell [3].dend(0-1)\n",
            " `-|       Set [84]_Gcell [3].axon(0-1)\n",
            "|--|       Set [84]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [84]_Gcell [4].dend(0-1)\n",
            " `-|       Set [84]_Gcell [4].axon(0-1)\n",
            "|-|       Set [85]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [85]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [85]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [85]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [85]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [85]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [85]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [85]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [85]_Mcell [2].soma(0-1)\n",
            "   `|       Set [85]_Mcell [2].dend(0-1)\n",
            " `|       Set [85]_Mcell [2].axon(0-1)\n",
            "|-|       Set [85]_Mcell [3].soma(0-1)\n",
            "   `|       Set [85]_Mcell [3].dend(0-1)\n",
            " `|       Set [85]_Mcell [3].axon(0-1)\n",
            "|-|       Set [85]_Mcell [1].soma(0-1)\n",
            "   `|       Set [85]_Mcell [1].dend(0-1)\n",
            " `|       Set [85]_Mcell [1].axon(0-1)\n",
            "|-|       Set [85]_Mcell [2].soma(0-1)\n",
            "   `|       Set [85]_Mcell [2].dend(0-1)\n",
            " `|       Set [85]_Mcell [2].axon(0-1)\n",
            "|--|       Set [85]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [85]_Gcell [3].dend(0-1)\n",
            " `-|       Set [85]_Gcell [3].axon(0-1)\n",
            "|--|       Set [85]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [85]_Gcell [4].dend(0-1)\n",
            " `-|       Set [85]_Gcell [4].axon(0-1)\n",
            "|-|       Set [86]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [86]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [86]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [86]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [86]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [86]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [86]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [86]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [86]_Mcell [2].soma(0-1)\n",
            "   `|       Set [86]_Mcell [2].dend(0-1)\n",
            " `|       Set [86]_Mcell [2].axon(0-1)\n",
            "|-|       Set [86]_Mcell [3].soma(0-1)\n",
            "   `|       Set [86]_Mcell [3].dend(0-1)\n",
            " `|       Set [86]_Mcell [3].axon(0-1)\n",
            "|-|       Set [86]_Mcell [1].soma(0-1)\n",
            "   `|       Set [86]_Mcell [1].dend(0-1)\n",
            " `|       Set [86]_Mcell [1].axon(0-1)\n",
            "|-|       Set [86]_Mcell [2].soma(0-1)\n",
            "   `|       Set [86]_Mcell [2].dend(0-1)\n",
            " `|       Set [86]_Mcell [2].axon(0-1)\n",
            "|--|       Set [86]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [86]_Gcell [3].dend(0-1)\n",
            " `-|       Set [86]_Gcell [3].axon(0-1)\n",
            "|--|       Set [86]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [86]_Gcell [4].dend(0-1)\n",
            " `-|       Set [86]_Gcell [4].axon(0-1)\n",
            "|-|       Set [87]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [87]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [87]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [87]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [87]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [87]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [87]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [87]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [87]_Mcell [2].soma(0-1)\n",
            "   `|       Set [87]_Mcell [2].dend(0-1)\n",
            " `|       Set [87]_Mcell [2].axon(0-1)\n",
            "|-|       Set [87]_Mcell [3].soma(0-1)\n",
            "   `|       Set [87]_Mcell [3].dend(0-1)\n",
            " `|       Set [87]_Mcell [3].axon(0-1)\n",
            "|-|       Set [87]_Mcell [1].soma(0-1)\n",
            "   `|       Set [87]_Mcell [1].dend(0-1)\n",
            " `|       Set [87]_Mcell [1].axon(0-1)\n",
            "|-|       Set [87]_Mcell [2].soma(0-1)\n",
            "   `|       Set [87]_Mcell [2].dend(0-1)\n",
            " `|       Set [87]_Mcell [2].axon(0-1)\n",
            "|--|       Set [87]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [87]_Gcell [3].dend(0-1)\n",
            " `-|       Set [87]_Gcell [3].axon(0-1)\n",
            "|--|       Set [87]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [87]_Gcell [4].dend(0-1)\n",
            " `-|       Set [87]_Gcell [4].axon(0-1)\n",
            "|-|       Set [88]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [88]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [88]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [88]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [88]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [88]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [88]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [88]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [88]_Mcell [2].soma(0-1)\n",
            "   `|       Set [88]_Mcell [2].dend(0-1)\n",
            " `|       Set [88]_Mcell [2].axon(0-1)\n",
            "|-|       Set [88]_Mcell [3].soma(0-1)\n",
            "   `|       Set [88]_Mcell [3].dend(0-1)\n",
            " `|       Set [88]_Mcell [3].axon(0-1)\n",
            "|-|       Set [88]_Mcell [1].soma(0-1)\n",
            "   `|       Set [88]_Mcell [1].dend(0-1)\n",
            " `|       Set [88]_Mcell [1].axon(0-1)\n",
            "|-|       Set [88]_Mcell [2].soma(0-1)\n",
            "   `|       Set [88]_Mcell [2].dend(0-1)\n",
            " `|       Set [88]_Mcell [2].axon(0-1)\n",
            "|--|       Set [88]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [88]_Gcell [3].dend(0-1)\n",
            " `-|       Set [88]_Gcell [3].axon(0-1)\n",
            "|--|       Set [88]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [88]_Gcell [4].dend(0-1)\n",
            " `-|       Set [88]_Gcell [4].axon(0-1)\n",
            "|-|       Set [89]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [89]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [89]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [89]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [89]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [89]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [89]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [89]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [89]_Mcell [2].soma(0-1)\n",
            "   `|       Set [89]_Mcell [2].dend(0-1)\n",
            " `|       Set [89]_Mcell [2].axon(0-1)\n",
            "|-|       Set [89]_Mcell [3].soma(0-1)\n",
            "   `|       Set [89]_Mcell [3].dend(0-1)\n",
            " `|       Set [89]_Mcell [3].axon(0-1)\n",
            "|-|       Set [89]_Mcell [1].soma(0-1)\n",
            "   `|       Set [89]_Mcell [1].dend(0-1)\n",
            " `|       Set [89]_Mcell [1].axon(0-1)\n",
            "|-|       Set [89]_Mcell [2].soma(0-1)\n",
            "   `|       Set [89]_Mcell [2].dend(0-1)\n",
            " `|       Set [89]_Mcell [2].axon(0-1)\n",
            "|--|       Set [89]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [89]_Gcell [3].dend(0-1)\n",
            " `-|       Set [89]_Gcell [3].axon(0-1)\n",
            "|--|       Set [89]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [89]_Gcell [4].dend(0-1)\n",
            " `-|       Set [89]_Gcell [4].axon(0-1)\n",
            "|-|       Set [90]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [90]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [90]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [90]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [90]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [90]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [90]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [90]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [90]_Mcell [2].soma(0-1)\n",
            "   `|       Set [90]_Mcell [2].dend(0-1)\n",
            " `|       Set [90]_Mcell [2].axon(0-1)\n",
            "|-|       Set [90]_Mcell [3].soma(0-1)\n",
            "   `|       Set [90]_Mcell [3].dend(0-1)\n",
            " `|       Set [90]_Mcell [3].axon(0-1)\n",
            "|-|       Set [90]_Mcell [1].soma(0-1)\n",
            "   `|       Set [90]_Mcell [1].dend(0-1)\n",
            " `|       Set [90]_Mcell [1].axon(0-1)\n",
            "|-|       Set [90]_Mcell [2].soma(0-1)\n",
            "   `|       Set [90]_Mcell [2].dend(0-1)\n",
            " `|       Set [90]_Mcell [2].axon(0-1)\n",
            "|--|       Set [90]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [90]_Gcell [3].dend(0-1)\n",
            " `-|       Set [90]_Gcell [3].axon(0-1)\n",
            "|--|       Set [90]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [90]_Gcell [4].dend(0-1)\n",
            " `-|       Set [90]_Gcell [4].axon(0-1)\n",
            "|-|       Set [91]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [91]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [91]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [91]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [91]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [91]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [91]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [91]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [91]_Mcell [2].soma(0-1)\n",
            "   `|       Set [91]_Mcell [2].dend(0-1)\n",
            " `|       Set [91]_Mcell [2].axon(0-1)\n",
            "|-|       Set [91]_Mcell [3].soma(0-1)\n",
            "   `|       Set [91]_Mcell [3].dend(0-1)\n",
            " `|       Set [91]_Mcell [3].axon(0-1)\n",
            "|-|       Set [91]_Mcell [1].soma(0-1)\n",
            "   `|       Set [91]_Mcell [1].dend(0-1)\n",
            " `|       Set [91]_Mcell [1].axon(0-1)\n",
            "|-|       Set [91]_Mcell [2].soma(0-1)\n",
            "   `|       Set [91]_Mcell [2].dend(0-1)\n",
            " `|       Set [91]_Mcell [2].axon(0-1)\n",
            "|--|       Set [91]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [91]_Gcell [3].dend(0-1)\n",
            " `-|       Set [91]_Gcell [3].axon(0-1)\n",
            "|--|       Set [91]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [91]_Gcell [4].dend(0-1)\n",
            " `-|       Set [91]_Gcell [4].axon(0-1)\n",
            "|-|       Set [92]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [92]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [92]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [92]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [92]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [92]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [92]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [92]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [92]_Mcell [2].soma(0-1)\n",
            "   `|       Set [92]_Mcell [2].dend(0-1)\n",
            " `|       Set [92]_Mcell [2].axon(0-1)\n",
            "|-|       Set [92]_Mcell [3].soma(0-1)\n",
            "   `|       Set [92]_Mcell [3].dend(0-1)\n",
            " `|       Set [92]_Mcell [3].axon(0-1)\n",
            "|-|       Set [92]_Mcell [1].soma(0-1)\n",
            "   `|       Set [92]_Mcell [1].dend(0-1)\n",
            " `|       Set [92]_Mcell [1].axon(0-1)\n",
            "|-|       Set [92]_Mcell [2].soma(0-1)\n",
            "   `|       Set [92]_Mcell [2].dend(0-1)\n",
            " `|       Set [92]_Mcell [2].axon(0-1)\n",
            "|--|       Set [92]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [92]_Gcell [3].dend(0-1)\n",
            " `-|       Set [92]_Gcell [3].axon(0-1)\n",
            "|--|       Set [92]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [92]_Gcell [4].dend(0-1)\n",
            " `-|       Set [92]_Gcell [4].axon(0-1)\n",
            "|-|       Set [93]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [93]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [93]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [93]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [93]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [93]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [93]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [93]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [93]_Mcell [2].soma(0-1)\n",
            "   `|       Set [93]_Mcell [2].dend(0-1)\n",
            " `|       Set [93]_Mcell [2].axon(0-1)\n",
            "|-|       Set [93]_Mcell [3].soma(0-1)\n",
            "   `|       Set [93]_Mcell [3].dend(0-1)\n",
            " `|       Set [93]_Mcell [3].axon(0-1)\n",
            "|-|       Set [93]_Mcell [1].soma(0-1)\n",
            "   `|       Set [93]_Mcell [1].dend(0-1)\n",
            " `|       Set [93]_Mcell [1].axon(0-1)\n",
            "|-|       Set [93]_Mcell [2].soma(0-1)\n",
            "   `|       Set [93]_Mcell [2].dend(0-1)\n",
            " `|       Set [93]_Mcell [2].axon(0-1)\n",
            "|--|       Set [93]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [93]_Gcell [3].dend(0-1)\n",
            " `-|       Set [93]_Gcell [3].axon(0-1)\n",
            "|--|       Set [93]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [93]_Gcell [4].dend(0-1)\n",
            " `-|       Set [93]_Gcell [4].axon(0-1)\n",
            "|-|       Set [94]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [94]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [94]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [94]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [94]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [94]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [94]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [94]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [94]_Mcell [2].soma(0-1)\n",
            "   `|       Set [94]_Mcell [2].dend(0-1)\n",
            " `|       Set [94]_Mcell [2].axon(0-1)\n",
            "|-|       Set [94]_Mcell [3].soma(0-1)\n",
            "   `|       Set [94]_Mcell [3].dend(0-1)\n",
            " `|       Set [94]_Mcell [3].axon(0-1)\n",
            "|-|       Set [94]_Mcell [1].soma(0-1)\n",
            "   `|       Set [94]_Mcell [1].dend(0-1)\n",
            " `|       Set [94]_Mcell [1].axon(0-1)\n",
            "|-|       Set [94]_Mcell [2].soma(0-1)\n",
            "   `|       Set [94]_Mcell [2].dend(0-1)\n",
            " `|       Set [94]_Mcell [2].axon(0-1)\n",
            "|--|       Set [94]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [94]_Gcell [3].dend(0-1)\n",
            " `-|       Set [94]_Gcell [3].axon(0-1)\n",
            "|--|       Set [94]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [94]_Gcell [4].dend(0-1)\n",
            " `-|       Set [94]_Gcell [4].axon(0-1)\n",
            "|-|       Set [95]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [95]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [95]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [95]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [95]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [95]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [95]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [95]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [95]_Mcell [2].soma(0-1)\n",
            "   `|       Set [95]_Mcell [2].dend(0-1)\n",
            " `|       Set [95]_Mcell [2].axon(0-1)\n",
            "|-|       Set [95]_Mcell [3].soma(0-1)\n",
            "   `|       Set [95]_Mcell [3].dend(0-1)\n",
            " `|       Set [95]_Mcell [3].axon(0-1)\n",
            "|-|       Set [95]_Mcell [1].soma(0-1)\n",
            "   `|       Set [95]_Mcell [1].dend(0-1)\n",
            " `|       Set [95]_Mcell [1].axon(0-1)\n",
            "|-|       Set [95]_Mcell [2].soma(0-1)\n",
            "   `|       Set [95]_Mcell [2].dend(0-1)\n",
            " `|       Set [95]_Mcell [2].axon(0-1)\n",
            "|--|       Set [95]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [95]_Gcell [3].dend(0-1)\n",
            " `-|       Set [95]_Gcell [3].axon(0-1)\n",
            "|--|       Set [95]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [95]_Gcell [4].dend(0-1)\n",
            " `-|       Set [95]_Gcell [4].axon(0-1)\n",
            "|-|       Set [96]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [96]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [96]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [96]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [96]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [96]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [96]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [96]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [96]_Mcell [2].soma(0-1)\n",
            "   `|       Set [96]_Mcell [2].dend(0-1)\n",
            " `|       Set [96]_Mcell [2].axon(0-1)\n",
            "|-|       Set [96]_Mcell [3].soma(0-1)\n",
            "   `|       Set [96]_Mcell [3].dend(0-1)\n",
            " `|       Set [96]_Mcell [3].axon(0-1)\n",
            "|-|       Set [96]_Mcell [1].soma(0-1)\n",
            "   `|       Set [96]_Mcell [1].dend(0-1)\n",
            " `|       Set [96]_Mcell [1].axon(0-1)\n",
            "|-|       Set [96]_Mcell [2].soma(0-1)\n",
            "   `|       Set [96]_Mcell [2].dend(0-1)\n",
            " `|       Set [96]_Mcell [2].axon(0-1)\n",
            "|--|       Set [96]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [96]_Gcell [3].dend(0-1)\n",
            " `-|       Set [96]_Gcell [3].axon(0-1)\n",
            "|--|       Set [96]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [96]_Gcell [4].dend(0-1)\n",
            " `-|       Set [96]_Gcell [4].axon(0-1)\n",
            "|-|       Set [97]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [97]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [97]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [97]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [97]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [97]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [97]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [97]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [97]_Mcell [2].soma(0-1)\n",
            "   `|       Set [97]_Mcell [2].dend(0-1)\n",
            " `|       Set [97]_Mcell [2].axon(0-1)\n",
            "|-|       Set [97]_Mcell [3].soma(0-1)\n",
            "   `|       Set [97]_Mcell [3].dend(0-1)\n",
            " `|       Set [97]_Mcell [3].axon(0-1)\n",
            "|-|       Set [97]_Mcell [1].soma(0-1)\n",
            "   `|       Set [97]_Mcell [1].dend(0-1)\n",
            " `|       Set [97]_Mcell [1].axon(0-1)\n",
            "|-|       Set [97]_Mcell [2].soma(0-1)\n",
            "   `|       Set [97]_Mcell [2].dend(0-1)\n",
            " `|       Set [97]_Mcell [2].axon(0-1)\n",
            "|--|       Set [97]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [97]_Gcell [3].dend(0-1)\n",
            " `-|       Set [97]_Gcell [3].axon(0-1)\n",
            "|--|       Set [97]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [97]_Gcell [4].dend(0-1)\n",
            " `-|       Set [97]_Gcell [4].axon(0-1)\n",
            "|-|       Set [98]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [98]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [98]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [98]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [98]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [98]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [98]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [98]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [98]_Mcell [2].soma(0-1)\n",
            "   `|       Set [98]_Mcell [2].dend(0-1)\n",
            " `|       Set [98]_Mcell [2].axon(0-1)\n",
            "|-|       Set [98]_Mcell [3].soma(0-1)\n",
            "   `|       Set [98]_Mcell [3].dend(0-1)\n",
            " `|       Set [98]_Mcell [3].axon(0-1)\n",
            "|-|       Set [98]_Mcell [1].soma(0-1)\n",
            "   `|       Set [98]_Mcell [1].dend(0-1)\n",
            " `|       Set [98]_Mcell [1].axon(0-1)\n",
            "|-|       Set [98]_Mcell [2].soma(0-1)\n",
            "   `|       Set [98]_Mcell [2].dend(0-1)\n",
            " `|       Set [98]_Mcell [2].axon(0-1)\n",
            "|--|       Set [98]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [98]_Gcell [3].dend(0-1)\n",
            " `-|       Set [98]_Gcell [3].axon(0-1)\n",
            "|--|       Set [98]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [98]_Gcell [4].dend(0-1)\n",
            " `-|       Set [98]_Gcell [4].axon(0-1)\n",
            "|-|       Set [99]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [99]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [99]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [99]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [99]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [99]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [99]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [99]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [99]_Mcell [2].soma(0-1)\n",
            "   `|       Set [99]_Mcell [2].dend(0-1)\n",
            " `|       Set [99]_Mcell [2].axon(0-1)\n",
            "|-|       Set [99]_Mcell [3].soma(0-1)\n",
            "   `|       Set [99]_Mcell [3].dend(0-1)\n",
            " `|       Set [99]_Mcell [3].axon(0-1)\n",
            "|-|       Set [99]_Mcell [1].soma(0-1)\n",
            "   `|       Set [99]_Mcell [1].dend(0-1)\n",
            " `|       Set [99]_Mcell [1].axon(0-1)\n",
            "|-|       Set [99]_Mcell [2].soma(0-1)\n",
            "   `|       Set [99]_Mcell [2].dend(0-1)\n",
            " `|       Set [99]_Mcell [2].axon(0-1)\n",
            "|--|       Set [99]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [99]_Gcell [3].dend(0-1)\n",
            " `-|       Set [99]_Gcell [3].axon(0-1)\n",
            "|--|       Set [99]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [99]_Gcell [4].dend(0-1)\n",
            " `-|       Set [99]_Gcell [4].axon(0-1)\n",
            "|-|       Set [100]_ORNcell [1].soma(0-1)\n",
            "   `|       Set [100]_ORNcell [1].dend(0-1)\n",
            "   `|       Set [100]_ORNcell [1].dendriticknob(1-0)\n",
            "   `-|       Set [100]_ORNcell [1].cilium0(0-1)\n",
            "   `-|       Set [100]_ORNcell [1].cilium1(0-1)\n",
            "   `-|       Set [100]_ORNcell [1].cilium2(0-1)\n",
            "   `-|       Set [100]_ORNcell [1].cilium3(0-1)\n",
            " `|       Set [100]_ORNcell [1].axon(0-1)\n",
            "|-|       Set [100]_Mcell [2].soma(0-1)\n",
            "   `|       Set [100]_Mcell [2].dend(0-1)\n",
            " `|       Set [100]_Mcell [2].axon(0-1)\n",
            "|-|       Set [100]_Mcell [3].soma(0-1)\n",
            "   `|       Set [100]_Mcell [3].dend(0-1)\n",
            " `|       Set [100]_Mcell [3].axon(0-1)\n",
            "|-|       Set [100]_Mcell [1].soma(0-1)\n",
            "   `|       Set [100]_Mcell [1].dend(0-1)\n",
            " `|       Set [100]_Mcell [1].axon(0-1)\n",
            "|-|       Set [100]_Mcell [2].soma(0-1)\n",
            "   `|       Set [100]_Mcell [2].dend(0-1)\n",
            " `|       Set [100]_Mcell [2].axon(0-1)\n",
            "|--|       Set [100]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [100]_Gcell [3].dend(0-1)\n",
            " `-|       Set [100]_Gcell [3].axon(0-1)\n",
            "|--|       Set [100]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [100]_Gcell [4].dend(0-1)\n",
            " `-|       Set [100]_Gcell [4].axon(0-1)\n",
            "|-|       Set [6]_Mcell [1].soma(0-1)\n",
            "   `|       Set [6]_Mcell [1].dend(0-1)\n",
            " `|       Set [6]_Mcell [1].axon(0-1)\n",
            "|-|       Set [6]_Mcell [2].soma(0-1)\n",
            "   `|       Set [6]_Mcell [2].dend(0-1)\n",
            " `|       Set [6]_Mcell [2].axon(0-1)\n",
            "|--|       Set [6]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [6]_Gcell [3].dend(0-1)\n",
            " `-|       Set [6]_Gcell [3].axon(0-1)\n",
            "|--|       Set [6]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [6]_Gcell [4].dend(0-1)\n",
            " `-|       Set [6]_Gcell [4].axon(0-1)\n",
            "|-|       Set [7]_Mcell [1].soma(0-1)\n",
            "   `|       Set [7]_Mcell [1].dend(0-1)\n",
            " `|       Set [7]_Mcell [1].axon(0-1)\n",
            "|-|       Set [7]_Mcell [2].soma(0-1)\n",
            "   `|       Set [7]_Mcell [2].dend(0-1)\n",
            " `|       Set [7]_Mcell [2].axon(0-1)\n",
            "|--|       Set [7]_Gcell [3].soma(0-1)\n",
            "    `-|       Set [7]_Gcell [3].dend(0-1)\n",
            " `-|       Set [7]_Gcell [3].axon(0-1)\n",
            "|--|       Set [7]_Gcell [4].soma(0-1)\n",
            "    `-|       Set [7]_Gcell [4].dend(0-1)\n",
            " `-|       Set [7]_Gcell [4].axon(0-1)\n",
            "|--|       Set [101]_Gcell [7].soma(0-1)\n",
            "    `-|       Set [101]_Gcell [7].dend(0-1)\n",
            " `-|       Set [101]_Gcell [7].axon(0-1)\n",
            "\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1.0"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "h.topology()"
      ],
      "id": "0e0ed526"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "NtGysxQGod5k"
      },
      "outputs": [],
      "source": [
        "# # from neuron import h, gui\n",
        "# from matplotlib import pyplot as plt\n",
        "# import numpy\n",
        "# for sec in h.allsec():\n",
        "#     sec.nseg = 1\n",
        "#     for seg in sec:\n",
        "#         seg.diam = numpy.interp(seg.x, [0, 1], [10, 40])\n",
        "\n",
        "# s = h.Shape()\n",
        "# s.show(1)\n",
        "# # s.color(2, sec=a) # color section \"a\" red\n",
        "# # h.topology()\n",
        "# h.finitialize(-65)\n",
        "        \n",
        "# fig = plt.figure()\n",
        "# fig.set_figwidth(16)\n",
        "# fig.set_figheight(9)\n",
        "# ax = fig.add_subplot(projection='3d')\n",
        "\n",
        "# MCell=[]\n",
        "# GCell=[]\n",
        "# ORNCell=[]\n",
        "# ORNCellPlot=[[],[],[]]\n",
        "# MCellPlot=[[],[],[]]\n",
        "# GCellPlot=[[],[],[]]\n",
        "# h.finitialize()\n",
        "# for sec in h.allsec():\n",
        "#     if 'ORNcell' in repr(sec):\n",
        "#         ORNCell.append(sec)\n",
        "#     elif 'Mcell' in repr(sec):\n",
        "#         MCell.append(sec)\n",
        "#     elif 'Gcell' in repr(sec):\n",
        "#         GCell.append(sec)\n",
        "\n",
        "# for sec in ORNCell:\n",
        "#     for i in range(sec.n3d()):\n",
        "#         ORNCellPlot[0].append(sec.x3d(i))\n",
        "#         ORNCellPlot[1].append(sec.y3d(i))\n",
        "#         ORNCellPlot[2].append(sec.z3d(i))\n",
        "# for sec in MCell:\n",
        "#     for i in range(sec.n3d()):\n",
        "#         MCellPlot[0].append(sec.x3d(i))\n",
        "#         MCellPlot[1].append(sec.y3d(i))\n",
        "#         MCellPlot[2].append(sec.z3d(i))\n",
        "# for sec in GCell:\n",
        "#     for i in range(sec.n3d()):\n",
        "#         GCellPlot[0].append(sec.x3d(i))\n",
        "#         GCellPlot[1].append(sec.y3d(i))\n",
        "#         GCellPlot[2].append(sec.z3d(i))\n",
        "# #         print(sec.x3d(i), sec.y3d(i), sec.z3d(i))\n",
        "# # print(ORNCellPlot, MCellPlot,GCellPlot)\n",
        "# ax.scatter(ORNCellPlot[0], ORNCellPlot[1], ORNCellPlot[2], label='ORN')\n",
        "# ax.scatter(MCellPlot[0], MCellPlot[1], MCellPlot[2], label='MCell')\n",
        "# ax.scatter(GCellPlot[0], GCellPlot[1], GCellPlot[2], label='GCell')\n",
        "\n",
        "# ax.set_xlabel('X coord')\n",
        "# ax.set_ylabel('Y coord')\n",
        "# ax.set_zlabel('Z coord')\n",
        "# ax.legend()\n",
        "\n",
        "# plt.show()"
      ],
      "id": "NtGysxQGod5k"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "3a2432d7"
      },
      "outputs": [],
      "source": [
        "# from neuron import h, gui2\n",
        "# gui2.set_backend('jupyter')\n",
        "# ps = gui2.PlotShape()\n",
        "# ps.variable('v')\n",
        "# ps.show(0)"
      ],
      "id": "3a2432d7"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VeLKBDd4lIN9"
      },
      "outputs": [],
      "source": [
        "import math\n",
        "def drawline(pre, post, ax):\n",
        "#     ps.beginline()\n",
        "#     print(\"Pre:\", pre.axon.x3d(1), pre.axon.y3d(1), pre.axon.z3d(1))\n",
        "#     print(\"Post:\", post.axon.x3d(1), post.axon.y3d(1), post.axon.z3d(1))\n",
        "\n",
        "    pre_x, pre_y, pre_z = pre.axon.x3d(0), pre.axon.y3d(0), pre.axon.z3d(0)\n",
        "    post_x, post_y, post_z = post.axon.x3d(1), post.axon.y3d(1), post.axon.z3d(1)\n",
        "#     print(\"pre_x\", pre_x, post_x,\"pre_y\", pre_y, post_y,\"pre_z\", pre_z, post_z)\n",
        "    ax.plot([pre_x, post_x], [pre_y, post_y], [pre_z, post_z])"
      ],
      "id": "VeLKBDd4lIN9"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 380
        },
        "id": "2jOVUuyWgaN8",
        "outputId": "e1e420ed-0a3b-48af-96aa-9178a3899976"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "/* Put everything inside the global mpl namespace */\n",
              "window.mpl = {};\n",
              "\n",
              "\n",
              "mpl.get_websocket_type = function() {\n",
              "    if (typeof(WebSocket) !== 'undefined') {\n",
              "        return WebSocket;\n",
              "    } else if (typeof(MozWebSocket) !== 'undefined') {\n",
              "        return MozWebSocket;\n",
              "    } else {\n",
              "        alert('Your browser does not have WebSocket support. ' +\n",
              "              'Please try Chrome, Safari or Firefox ≥ 6. ' +\n",
              "              'Firefox 4 and 5 are also supported but you ' +\n",
              "              'have to enable WebSockets in about:config.');\n",
              "    };\n",
              "}\n",
              "\n",
              "mpl.figure = function(figure_id, websocket, ondownload, parent_element) {\n",
              "    this.id = figure_id;\n",
              "\n",
              "    this.ws = websocket;\n",
              "\n",
              "    this.supports_binary = (this.ws.binaryType != undefined);\n",
              "\n",
              "    if (!this.supports_binary) {\n",
              "        var warnings = document.getElementById(\"mpl-warnings\");\n",
              "        if (warnings) {\n",
              "            warnings.style.display = 'block';\n",
              "            warnings.textContent = (\n",
              "                \"This browser does not support binary websocket messages. \" +\n",
              "                    \"Performance may be slow.\");\n",
              "        }\n",
              "    }\n",
              "\n",
              "    this.imageObj = new Image();\n",
              "\n",
              "    this.context = undefined;\n",
              "    this.message = undefined;\n",
              "    this.canvas = undefined;\n",
              "    this.rubberband_canvas = undefined;\n",
              "    this.rubberband_context = undefined;\n",
              "    this.format_dropdown = undefined;\n",
              "\n",
              "    this.image_mode = 'full';\n",
              "\n",
              "    this.root = $('<div/>');\n",
              "    this._root_extra_style(this.root)\n",
              "    this.root.attr('style', 'display: inline-block');\n",
              "\n",
              "    $(parent_element).append(this.root);\n",
              "\n",
              "    this._init_header(this);\n",
              "    this._init_canvas(this);\n",
              "    this._init_toolbar(this);\n",
              "\n",
              "    var fig = this;\n",
              "\n",
              "    this.waiting = false;\n",
              "\n",
              "    this.ws.onopen =  function () {\n",
              "            fig.send_message(\"supports_binary\", {value: fig.supports_binary});\n",
              "            fig.send_message(\"send_image_mode\", {});\n",
              "            if (mpl.ratio != 1) {\n",
              "                fig.send_message(\"set_dpi_ratio\", {'dpi_ratio': mpl.ratio});\n",
              "            }\n",
              "            fig.send_message(\"refresh\", {});\n",
              "        }\n",
              "\n",
              "    this.imageObj.onload = function() {\n",
              "            if (fig.image_mode == 'full') {\n",
              "                // Full images could contain transparency (where diff images\n",
              "                // almost always do), so we need to clear the canvas so that\n",
              "                // there is no ghosting.\n",
              "                fig.context.clearRect(0, 0, fig.canvas.width, fig.canvas.height);\n",
              "            }\n",
              "            fig.context.drawImage(fig.imageObj, 0, 0);\n",
              "        };\n",
              "\n",
              "    this.imageObj.onunload = function() {\n",
              "        fig.ws.close();\n",
              "    }\n",
              "\n",
              "    this.ws.onmessage = this._make_on_message_function(this);\n",
              "\n",
              "    this.ondownload = ondownload;\n",
              "}\n",
              "\n",
              "mpl.figure.prototype._init_header = function() {\n",
              "    var titlebar = $(\n",
              "        '<div class=\"ui-dialog-titlebar ui-widget-header ui-corner-all ' +\n",
              "        'ui-helper-clearfix\"/>');\n",
              "    var titletext = $(\n",
              "        '<div class=\"ui-dialog-title\" style=\"width: 100%; ' +\n",
              "        'text-align: center; padding: 3px;\"/>');\n",
              "    titlebar.append(titletext)\n",
              "    this.root.append(titlebar);\n",
              "    this.header = titletext[0];\n",
              "}\n",
              "\n",
              "\n",
              "\n",
              "mpl.figure.prototype._canvas_extra_style = function(canvas_div) {\n",
              "\n",
              "}\n",
              "\n",
              "\n",
              "mpl.figure.prototype._root_extra_style = function(canvas_div) {\n",
              "\n",
              "}\n",
              "\n",
              "mpl.figure.prototype._init_canvas = function() {\n",
              "    var fig = this;\n",
              "\n",
              "    var canvas_div = $('<div/>');\n",
              "\n",
              "    canvas_div.attr('style', 'position: relative; clear: both; outline: 0');\n",
              "\n",
              "    function canvas_keyboard_event(event) {\n",
              "        return fig.key_event(event, event['data']);\n",
              "    }\n",
              "\n",
              "    canvas_div.keydown('key_press', canvas_keyboard_event);\n",
              "    canvas_div.keyup('key_release', canvas_keyboard_event);\n",
              "    this.canvas_div = canvas_div\n",
              "    this._canvas_extra_style(canvas_div)\n",
              "    this.root.append(canvas_div);\n",
              "\n",
              "    var canvas = $('<canvas/>');\n",
              "    canvas.addClass('mpl-canvas');\n",
              "    canvas.attr('style', \"left: 0; top: 0; z-index: 0; outline: 0\")\n",
              "\n",
              "    this.canvas = canvas[0];\n",
              "    this.context = canvas[0].getContext(\"2d\");\n",
              "\n",
              "    var backingStore = this.context.backingStorePixelRatio ||\n",
              "\tthis.context.webkitBackingStorePixelRatio ||\n",
              "\tthis.context.mozBackingStorePixelRatio ||\n",
              "\tthis.context.msBackingStorePixelRatio ||\n",
              "\tthis.context.oBackingStorePixelRatio ||\n",
              "\tthis.context.backingStorePixelRatio || 1;\n",
              "\n",
              "    mpl.ratio = (window.devicePixelRatio || 1) / backingStore;\n",
              "\n",
              "    var rubberband = $('<canvas/>');\n",
              "    rubberband.attr('style', \"position: absolute; left: 0; top: 0; z-index: 1;\")\n",
              "\n",
              "    var pass_mouse_events = true;\n",
              "\n",
              "    canvas_div.resizable({\n",
              "        start: function(event, ui) {\n",
              "            pass_mouse_events = false;\n",
              "        },\n",
              "        resize: function(event, ui) {\n",
              "            fig.request_resize(ui.size.width, ui.size.height);\n",
              "        },\n",
              "        stop: function(event, ui) {\n",
              "            pass_mouse_events = true;\n",
              "            fig.request_resize(ui.size.width, ui.size.height);\n",
              "        },\n",
              "    });\n",
              "\n",
              "    function mouse_event_fn(event) {\n",
              "        if (pass_mouse_events)\n",
              "            return fig.mouse_event(event, event['data']);\n",
              "    }\n",
              "\n",
              "    rubberband.mousedown('button_press', mouse_event_fn);\n",
              "    rubberband.mouseup('button_release', mouse_event_fn);\n",
              "    // Throttle sequential mouse events to 1 every 20ms.\n",
              "    rubberband.mousemove('motion_notify', mouse_event_fn);\n",
              "\n",
              "    rubberband.mouseenter('figure_enter', mouse_event_fn);\n",
              "    rubberband.mouseleave('figure_leave', mouse_event_fn);\n",
              "\n",
              "    canvas_div.on(\"wheel\", function (event) {\n",
              "        event = event.originalEvent;\n",
              "        event['data'] = 'scroll'\n",
              "        if (event.deltaY < 0) {\n",
              "            event.step = 1;\n",
              "        } else {\n",
              "            event.step = -1;\n",
              "        }\n",
              "        mouse_event_fn(event);\n",
              "    });\n",
              "\n",
              "    canvas_div.append(canvas);\n",
              "    canvas_div.append(rubberband);\n",
              "\n",
              "    this.rubberband = rubberband;\n",
              "    this.rubberband_canvas = rubberband[0];\n",
              "    this.rubberband_context = rubberband[0].getContext(\"2d\");\n",
              "    this.rubberband_context.strokeStyle = \"#000000\";\n",
              "\n",
              "    this._resize_canvas = function(width, height) {\n",
              "        // Keep the size of the canvas, canvas container, and rubber band\n",
              "        // canvas in synch.\n",
              "        canvas_div.css('width', width)\n",
              "        canvas_div.css('height', height)\n",
              "\n",
              "        canvas.attr('width', width * mpl.ratio);\n",
              "        canvas.attr('height', height * mpl.ratio);\n",
              "        canvas.attr('style', 'width: ' + width + 'px; height: ' + height + 'px;');\n",
              "\n",
              "        rubberband.attr('width', width);\n",
              "        rubberband.attr('height', height);\n",
              "    }\n",
              "\n",
              "    // Set the figure to an initial 600x600px, this will subsequently be updated\n",
              "    // upon first draw.\n",
              "    this._resize_canvas(600, 600);\n",
              "\n",
              "    // Disable right mouse context menu.\n",
              "    $(this.rubberband_canvas).bind(\"contextmenu\",function(e){\n",
              "        return false;\n",
              "    });\n",
              "\n",
              "    function set_focus () {\n",
              "        canvas.focus();\n",
              "        canvas_div.focus();\n",
              "    }\n",
              "\n",
              "    window.setTimeout(set_focus, 100);\n",
              "}\n",
              "\n",
              "mpl.figure.prototype._init_toolbar = function() {\n",
              "    var fig = this;\n",
              "\n",
              "    var nav_element = $('<div/>');\n",
              "    nav_element.attr('style', 'width: 100%');\n",
              "    this.root.append(nav_element);\n",
              "\n",
              "    // Define a callback function for later on.\n",
              "    function toolbar_event(event) {\n",
              "        return fig.toolbar_button_onclick(event['data']);\n",
              "    }\n",
              "    function toolbar_mouse_event(event) {\n",
              "        return fig.toolbar_button_onmouseover(event['data']);\n",
              "    }\n",
              "\n",
              "    for(var toolbar_ind in mpl.toolbar_items) {\n",
              "        var name = mpl.toolbar_items[toolbar_ind][0];\n",
              "        var tooltip = mpl.toolbar_items[toolbar_ind][1];\n",
              "        var image = mpl.toolbar_items[toolbar_ind][2];\n",
              "        var method_name = mpl.toolbar_items[toolbar_ind][3];\n",
              "\n",
              "        if (!name) {\n",
              "            // put a spacer in here.\n",
              "            continue;\n",
              "        }\n",
              "        var button = $('<button/>');\n",
              "        button.addClass('ui-button ui-widget ui-state-default ui-corner-all ' +\n",
              "                        'ui-button-icon-only');\n",
              "        button.attr('role', 'button');\n",
              "        button.attr('aria-disabled', 'false');\n",
              "        button.click(method_name, toolbar_event);\n",
              "        button.mouseover(tooltip, toolbar_mouse_event);\n",
              "\n",
              "        var icon_img = $('<span/>');\n",
              "        icon_img.addClass('ui-button-icon-primary ui-icon');\n",
              "        icon_img.addClass(image);\n",
              "        icon_img.addClass('ui-corner-all');\n",
              "\n",
              "        var tooltip_span = $('<span/>');\n",
              "        tooltip_span.addClass('ui-button-text');\n",
              "        tooltip_span.html(tooltip);\n",
              "\n",
              "        button.append(icon_img);\n",
              "        button.append(tooltip_span);\n",
              "\n",
              "        nav_element.append(button);\n",
              "    }\n",
              "\n",
              "    var fmt_picker_span = $('<span/>');\n",
              "\n",
              "    var fmt_picker = $('<select/>');\n",
              "    fmt_picker.addClass('mpl-toolbar-option ui-widget ui-widget-content');\n",
              "    fmt_picker_span.append(fmt_picker);\n",
              "    nav_element.append(fmt_picker_span);\n",
              "    this.format_dropdown = fmt_picker[0];\n",
              "\n",
              "    for (var ind in mpl.extensions) {\n",
              "        var fmt = mpl.extensions[ind];\n",
              "        var option = $(\n",
              "            '<option/>', {selected: fmt === mpl.default_extension}).html(fmt);\n",
              "        fmt_picker.append(option);\n",
              "    }\n",
              "\n",
              "    // Add hover states to the ui-buttons\n",
              "    $( \".ui-button\" ).hover(\n",
              "        function() { $(this).addClass(\"ui-state-hover\");},\n",
              "        function() { $(this).removeClass(\"ui-state-hover\");}\n",
              "    );\n",
              "\n",
              "    var status_bar = $('<span class=\"mpl-message\"/>');\n",
              "    nav_element.append(status_bar);\n",
              "    this.message = status_bar[0];\n",
              "}\n",
              "\n",
              "mpl.figure.prototype.request_resize = function(x_pixels, y_pixels) {\n",
              "    // Request matplotlib to resize the figure. Matplotlib will then trigger a resize in the client,\n",
              "    // which will in turn request a refresh of the image.\n",
              "    this.send_message('resize', {'width': x_pixels, 'height': y_pixels});\n",
              "}\n",
              "\n",
              "mpl.figure.prototype.send_message = function(type, properties) {\n",
              "    properties['type'] = type;\n",
              "    properties['figure_id'] = this.id;\n",
              "    this.ws.send(JSON.stringify(properties));\n",
              "}\n",
              "\n",
              "mpl.figure.prototype.send_draw_message = function() {\n",
              "    if (!this.waiting) {\n",
              "        this.waiting = true;\n",
              "        this.ws.send(JSON.stringify({type: \"draw\", figure_id: this.id}));\n",
              "    }\n",
              "}\n",
              "\n",
              "\n",
              "mpl.figure.prototype.handle_save = function(fig, msg) {\n",
              "    var format_dropdown = fig.format_dropdown;\n",
              "    var format = format_dropdown.options[format_dropdown.selectedIndex].value;\n",
              "    fig.ondownload(fig, format);\n",
              "}\n",
              "\n",
              "\n",
              "mpl.figure.prototype.handle_resize = function(fig, msg) {\n",
              "    var size = msg['size'];\n",
              "    if (size[0] != fig.canvas.width || size[1] != fig.canvas.height) {\n",
              "        fig._resize_canvas(size[0], size[1]);\n",
              "        fig.send_message(\"refresh\", {});\n",
              "    };\n",
              "}\n",
              "\n",
              "mpl.figure.prototype.handle_rubberband = function(fig, msg) {\n",
              "    var x0 = msg['x0'] / mpl.ratio;\n",
              "    var y0 = (fig.canvas.height - msg['y0']) / mpl.ratio;\n",
              "    var x1 = msg['x1'] / mpl.ratio;\n",
              "    var y1 = (fig.canvas.height - msg['y1']) / mpl.ratio;\n",
              "    x0 = Math.floor(x0) + 0.5;\n",
              "    y0 = Math.floor(y0) + 0.5;\n",
              "    x1 = Math.floor(x1) + 0.5;\n",
              "    y1 = Math.floor(y1) + 0.5;\n",
              "    var min_x = Math.min(x0, x1);\n",
              "    var min_y = Math.min(y0, y1);\n",
              "    var width = Math.abs(x1 - x0);\n",
              "    var height = Math.abs(y1 - y0);\n",
              "\n",
              "    fig.rubberband_context.clearRect(\n",
              "        0, 0, fig.canvas.width / mpl.ratio, fig.canvas.height / mpl.ratio);\n",
              "\n",
              "    fig.rubberband_context.strokeRect(min_x, min_y, width, height);\n",
              "}\n",
              "\n",
              "mpl.figure.prototype.handle_figure_label = function(fig, msg) {\n",
              "    // Updates the figure title.\n",
              "    fig.header.textContent = msg['label'];\n",
              "}\n",
              "\n",
              "mpl.figure.prototype.handle_cursor = function(fig, msg) {\n",
              "    var cursor = msg['cursor'];\n",
              "    switch(cursor)\n",
              "    {\n",
              "    case 0:\n",
              "        cursor = 'pointer';\n",
              "        break;\n",
              "    case 1:\n",
              "        cursor = 'default';\n",
              "        break;\n",
              "    case 2:\n",
              "        cursor = 'crosshair';\n",
              "        break;\n",
              "    case 3:\n",
              "        cursor = 'move';\n",
              "        break;\n",
              "    }\n",
              "    fig.rubberband_canvas.style.cursor = cursor;\n",
              "}\n",
              "\n",
              "mpl.figure.prototype.handle_message = function(fig, msg) {\n",
              "    fig.message.textContent = msg['message'];\n",
              "}\n",
              "\n",
              "mpl.figure.prototype.handle_draw = function(fig, msg) {\n",
              "    // Request the server to send over a new figure.\n",
              "    fig.send_draw_message();\n",
              "}\n",
              "\n",
              "mpl.figure.prototype.handle_image_mode = function(fig, msg) {\n",
              "    fig.image_mode = msg['mode'];\n",
              "}\n",
              "\n",
              "mpl.figure.prototype.updated_canvas_event = function() {\n",
              "    // Called whenever the canvas gets updated.\n",
              "    this.send_message(\"ack\", {});\n",
              "}\n",
              "\n",
              "// A function to construct a web socket function for onmessage handling.\n",
              "// Called in the figure constructor.\n",
              "mpl.figure.prototype._make_on_message_function = function(fig) {\n",
              "    return function socket_on_message(evt) {\n",
              "        if (evt.data instanceof Blob) {\n",
              "            /* FIXME: We get \"Resource interpreted as Image but\n",
              "             * transferred with MIME type text/plain:\" errors on\n",
              "             * Chrome.  But how to set the MIME type?  It doesn't seem\n",
              "             * to be part of the websocket stream */\n",
              "            evt.data.type = \"image/png\";\n",
              "\n",
              "            /* Free the memory for the previous frames */\n",
              "            if (fig.imageObj.src) {\n",
              "                (window.URL || window.webkitURL).revokeObjectURL(\n",
              "                    fig.imageObj.src);\n",
              "            }\n",
              "\n",
              "            fig.imageObj.src = (window.URL || window.webkitURL).createObjectURL(\n",
              "                evt.data);\n",
              "            fig.updated_canvas_event();\n",
              "            fig.waiting = false;\n",
              "            return;\n",
              "        }\n",
              "        else if (typeof evt.data === 'string' && evt.data.slice(0, 21) == \"data:image/png;base64\") {\n",
              "            fig.imageObj.src = evt.data;\n",
              "            fig.updated_canvas_event();\n",
              "            fig.waiting = false;\n",
              "            return;\n",
              "        }\n",
              "\n",
              "        var msg = JSON.parse(evt.data);\n",
              "        var msg_type = msg['type'];\n",
              "\n",
              "        // Call the  \"handle_{type}\" callback, which takes\n",
              "        // the figure and JSON message as its only arguments.\n",
              "        try {\n",
              "            var callback = fig[\"handle_\" + msg_type];\n",
              "        } catch (e) {\n",
              "            console.log(\"No handler for the '\" + msg_type + \"' message type: \", msg);\n",
              "            return;\n",
              "        }\n",
              "\n",
              "        if (callback) {\n",
              "            try {\n",
              "                // console.log(\"Handling '\" + msg_type + \"' message: \", msg);\n",
              "                callback(fig, msg);\n",
              "            } catch (e) {\n",
              "                console.log(\"Exception inside the 'handler_\" + msg_type + \"' callback:\", e, e.stack, msg);\n",
              "            }\n",
              "        }\n",
              "    };\n",
              "}\n",
              "\n",
              "// from http://stackoverflow.com/questions/1114465/getting-mouse-location-in-canvas\n",
              "mpl.findpos = function(e) {\n",
              "    //this section is from http://www.quirksmode.org/js/events_properties.html\n",
              "    var targ;\n",
              "    if (!e)\n",
              "        e = window.event;\n",
              "    if (e.target)\n",
              "        targ = e.target;\n",
              "    else if (e.srcElement)\n",
              "        targ = e.srcElement;\n",
              "    if (targ.nodeType == 3) // defeat Safari bug\n",
              "        targ = targ.parentNode;\n",
              "\n",
              "    // jQuery normalizes the pageX and pageY\n",
              "    // pageX,Y are the mouse positions relative to the document\n",
              "    // offset() returns the position of the element relative to the document\n",
              "    var x = e.pageX - $(targ).offset().left;\n",
              "    var y = e.pageY - $(targ).offset().top;\n",
              "\n",
              "    return {\"x\": x, \"y\": y};\n",
              "};\n",
              "\n",
              "/*\n",
              " * return a copy of an object with only non-object keys\n",
              " * we need this to avoid circular references\n",
              " * http://stackoverflow.com/a/24161582/3208463\n",
              " */\n",
              "function simpleKeys (original) {\n",
              "  return Object.keys(original).reduce(function (obj, key) {\n",
              "    if (typeof original[key] !== 'object')\n",
              "        obj[key] = original[key]\n",
              "    return obj;\n",
              "  }, {});\n",
              "}\n",
              "\n",
              "mpl.figure.prototype.mouse_event = function(event, name) {\n",
              "    var canvas_pos = mpl.findpos(event)\n",
              "\n",
              "    if (name === 'button_press')\n",
              "    {\n",
              "        this.canvas.focus();\n",
              "        this.canvas_div.focus();\n",
              "    }\n",
              "\n",
              "    var x = canvas_pos.x * mpl.ratio;\n",
              "    var y = canvas_pos.y * mpl.ratio;\n",
              "\n",
              "    this.send_message(name, {x: x, y: y, button: event.button,\n",
              "                             step: event.step,\n",
              "                             guiEvent: simpleKeys(event)});\n",
              "\n",
              "    /* This prevents the web browser from automatically changing to\n",
              "     * the text insertion cursor when the button is pressed.  We want\n",
              "     * to control all of the cursor setting manually through the\n",
              "     * 'cursor' event from matplotlib */\n",
              "    event.preventDefault();\n",
              "    return false;\n",
              "}\n",
              "\n",
              "mpl.figure.prototype._key_event_extra = function(event, name) {\n",
              "    // Handle any extra behaviour associated with a key event\n",
              "}\n",
              "\n",
              "mpl.figure.prototype.key_event = function(event, name) {\n",
              "\n",
              "    // Prevent repeat events\n",
              "    if (name == 'key_press')\n",
              "    {\n",
              "        if (event.which === this._key)\n",
              "            return;\n",
              "        else\n",
              "            this._key = event.which;\n",
              "    }\n",
              "    if (name == 'key_release')\n",
              "        this._key = null;\n",
              "\n",
              "    var value = '';\n",
              "    if (event.ctrlKey && event.which != 17)\n",
              "        value += \"ctrl+\";\n",
              "    if (event.altKey && event.which != 18)\n",
              "        value += \"alt+\";\n",
              "    if (event.shiftKey && event.which != 16)\n",
              "        value += \"shift+\";\n",
              "\n",
              "    value += 'k';\n",
              "    value += event.which.toString();\n",
              "\n",
              "    this._key_event_extra(event, name);\n",
              "\n",
              "    this.send_message(name, {key: value,\n",
              "                             guiEvent: simpleKeys(event)});\n",
              "    return false;\n",
              "}\n",
              "\n",
              "mpl.figure.prototype.toolbar_button_onclick = function(name) {\n",
              "    if (name == 'download') {\n",
              "        this.handle_save(this, null);\n",
              "    } else {\n",
              "        this.send_message(\"toolbar_button\", {name: name});\n",
              "    }\n",
              "};\n",
              "\n",
              "mpl.figure.prototype.toolbar_button_onmouseover = function(tooltip) {\n",
              "    this.message.textContent = tooltip;\n",
              "};\n",
              "mpl.toolbar_items = [[\"Home\", \"Reset original view\", \"fa fa-home icon-home\", \"home\"], [\"Back\", \"Back to previous view\", \"fa fa-arrow-left icon-arrow-left\", \"back\"], [\"Forward\", \"Forward to next view\", \"fa fa-arrow-right icon-arrow-right\", \"forward\"], [\"\", \"\", \"\", \"\"], [\"Pan\", \"Pan axes with left mouse, zoom with right\", \"fa fa-arrows icon-move\", \"pan\"], [\"Zoom\", \"Zoom to rectangle\", \"fa fa-square-o icon-check-empty\", \"zoom\"], [\"\", \"\", \"\", \"\"], [\"Download\", \"Download plot\", \"fa fa-floppy-o icon-save\", \"download\"]];\n",
              "\n",
              "mpl.extensions = [\"eps\", \"jpeg\", \"pdf\", \"png\", \"ps\", \"raw\", \"svg\", \"tif\"];\n",
              "\n",
              "mpl.default_extension = \"png\";var comm_websocket_adapter = function(comm) {\n",
              "    // Create a \"websocket\"-like object which calls the given IPython comm\n",
              "    // object with the appropriate methods. Currently this is a non binary\n",
              "    // socket, so there is still some room for performance tuning.\n",
              "    var ws = {};\n",
              "\n",
              "    ws.close = function() {\n",
              "        comm.close()\n",
              "    };\n",
              "    ws.send = function(m) {\n",
              "        //console.log('sending', m);\n",
              "        comm.send(m);\n",
              "    };\n",
              "    // Register the callback with on_msg.\n",
              "    comm.on_msg(function(msg) {\n",
              "        //console.log('receiving', msg['content']['data'], msg);\n",
              "        // Pass the mpl event to the overridden (by mpl) onmessage function.\n",
              "        ws.onmessage(msg['content']['data'])\n",
              "    });\n",
              "    return ws;\n",
              "}\n",
              "\n",
              "mpl.mpl_figure_comm = function(comm, msg) {\n",
              "    // This is the function which gets called when the mpl process\n",
              "    // starts-up an IPython Comm through the \"matplotlib\" channel.\n",
              "\n",
              "    var id = msg.content.data.id;\n",
              "    // Get hold of the div created by the display call when the Comm\n",
              "    // socket was opened in Python.\n",
              "    var element = $(\"#\" + id);\n",
              "    var ws_proxy = comm_websocket_adapter(comm)\n",
              "\n",
              "    function ondownload(figure, format) {\n",
              "        window.open(figure.imageObj.src);\n",
              "    }\n",
              "\n",
              "    var fig = new mpl.figure(id, ws_proxy,\n",
              "                           ondownload,\n",
              "                           element.get(0));\n",
              "\n",
              "    // Call onopen now - mpl needs it, as it is assuming we've passed it a real\n",
              "    // web socket which is closed, not our websocket->open comm proxy.\n",
              "    ws_proxy.onopen();\n",
              "\n",
              "    fig.parent_element = element.get(0);\n",
              "    fig.cell_info = mpl.find_output_cell(\"<div id='\" + id + \"'></div>\");\n",
              "    if (!fig.cell_info) {\n",
              "        console.error(\"Failed to find cell for figure\", id, fig);\n",
              "        return;\n",
              "    }\n",
              "\n",
              "    var output_index = fig.cell_info[2]\n",
              "    var cell = fig.cell_info[0];\n",
              "\n",
              "};\n",
              "\n",
              "mpl.figure.prototype.handle_close = function(fig, msg) {\n",
              "    var width = fig.canvas.width/mpl.ratio\n",
              "    fig.root.unbind('remove')\n",
              "\n",
              "    // Update the output cell to use the data from the current canvas.\n",
              "    fig.push_to_output();\n",
              "    var dataURL = fig.canvas.toDataURL();\n",
              "    // Re-enable the keyboard manager in IPython - without this line, in FF,\n",
              "    // the notebook keyboard shortcuts fail.\n",
              "    IPython.keyboard_manager.enable()\n",
              "    $(fig.parent_element).html('<img src=\"' + dataURL + '\" width=\"' + width + '\">');\n",
              "    fig.close_ws(fig, msg);\n",
              "}\n",
              "\n",
              "mpl.figure.prototype.close_ws = function(fig, msg){\n",
              "    fig.send_message('closing', msg);\n",
              "    // fig.ws.close()\n",
              "}\n",
              "\n",
              "mpl.figure.prototype.push_to_output = function(remove_interactive) {\n",
              "    // Turn the data on the canvas into data in the output cell.\n",
              "    var width = this.canvas.width/mpl.ratio\n",
              "    var dataURL = this.canvas.toDataURL();\n",
              "    this.cell_info[1]['text/html'] = '<img src=\"' + dataURL + '\" width=\"' + width + '\">';\n",
              "}\n",
              "\n",
              "mpl.figure.prototype.updated_canvas_event = function() {\n",
              "    // Tell IPython that the notebook contents must change.\n",
              "    IPython.notebook.set_dirty(true);\n",
              "    this.send_message(\"ack\", {});\n",
              "    var fig = this;\n",
              "    // Wait a second, then push the new image to the DOM so\n",
              "    // that it is saved nicely (might be nice to debounce this).\n",
              "    setTimeout(function () { fig.push_to_output() }, 1000);\n",
              "}\n",
              "\n",
              "mpl.figure.prototype._init_toolbar = function() {\n",
              "    var fig = this;\n",
              "\n",
              "    var nav_element = $('<div/>');\n",
              "    nav_element.attr('style', 'width: 100%');\n",
              "    this.root.append(nav_element);\n",
              "\n",
              "    // Define a callback function for later on.\n",
              "    function toolbar_event(event) {\n",
              "        return fig.toolbar_button_onclick(event['data']);\n",
              "    }\n",
              "    function toolbar_mouse_event(event) {\n",
              "        return fig.toolbar_button_onmouseover(event['data']);\n",
              "    }\n",
              "\n",
              "    for(var toolbar_ind in mpl.toolbar_items){\n",
              "        var name = mpl.toolbar_items[toolbar_ind][0];\n",
              "        var tooltip = mpl.toolbar_items[toolbar_ind][1];\n",
              "        var image = mpl.toolbar_items[toolbar_ind][2];\n",
              "        var method_name = mpl.toolbar_items[toolbar_ind][3];\n",
              "\n",
              "        if (!name) { continue; };\n",
              "\n",
              "        var button = $('<button class=\"btn btn-default\" href=\"#\" title=\"' + name + '\"><i class=\"fa ' + image + ' fa-lg\"></i></button>');\n",
              "        button.click(method_name, toolbar_event);\n",
              "        button.mouseover(tooltip, toolbar_mouse_event);\n",
              "        nav_element.append(button);\n",
              "    }\n",
              "\n",
              "    // Add the status bar.\n",
              "    var status_bar = $('<span class=\"mpl-message\" style=\"text-align:right; float: right;\"/>');\n",
              "    nav_element.append(status_bar);\n",
              "    this.message = status_bar[0];\n",
              "\n",
              "    // Add the close button to the window.\n",
              "    var buttongrp = $('<div class=\"btn-group inline pull-right\"></div>');\n",
              "    var button = $('<button class=\"btn btn-mini btn-primary\" href=\"#\" title=\"Stop Interaction\"><i class=\"fa fa-power-off icon-remove icon-large\"></i></button>');\n",
              "    button.click(function (evt) { fig.handle_close(fig, {}); } );\n",
              "    button.mouseover('Stop Interaction', toolbar_mouse_event);\n",
              "    buttongrp.append(button);\n",
              "    var titlebar = this.root.find($('.ui-dialog-titlebar'));\n",
              "    titlebar.prepend(buttongrp);\n",
              "}\n",
              "\n",
              "mpl.figure.prototype._root_extra_style = function(el){\n",
              "    var fig = this\n",
              "    el.on(\"remove\", function(){\n",
              "\tfig.close_ws(fig, {});\n",
              "    });\n",
              "}\n",
              "\n",
              "mpl.figure.prototype._canvas_extra_style = function(el){\n",
              "    // this is important to make the div 'focusable\n",
              "    el.attr('tabindex', 0)\n",
              "    // reach out to IPython and tell the keyboard manager to turn it's self\n",
              "    // off when our div gets focus\n",
              "\n",
              "    // location in version 3\n",
              "    if (IPython.notebook.keyboard_manager) {\n",
              "        IPython.notebook.keyboard_manager.register_events(el);\n",
              "    }\n",
              "    else {\n",
              "        // location in version 2\n",
              "        IPython.keyboard_manager.register_events(el);\n",
              "    }\n",
              "\n",
              "}\n",
              "\n",
              "mpl.figure.prototype._key_event_extra = function(event, name) {\n",
              "    var manager = IPython.notebook.keyboard_manager;\n",
              "    if (!manager)\n",
              "        manager = IPython.keyboard_manager;\n",
              "\n",
              "    // Check for shift+enter\n",
              "    if (event.shiftKey && event.which == 13) {\n",
              "        this.canvas_div.blur();\n",
              "        // select the cell after this one\n",
              "        var index = IPython.notebook.find_cell_index(this.cell_info[0]);\n",
              "        IPython.notebook.select(index + 1);\n",
              "    }\n",
              "}\n",
              "\n",
              "mpl.figure.prototype.handle_save = function(fig, msg) {\n",
              "    fig.ondownload(fig, null);\n",
              "}\n",
              "\n",
              "\n",
              "mpl.find_output_cell = function(html_output) {\n",
              "    // Return the cell and output element which can be found *uniquely* in the notebook.\n",
              "    // Note - this is a bit hacky, but it is done because the \"notebook_saving.Notebook\"\n",
              "    // IPython event is triggered only after the cells have been serialised, which for\n",
              "    // our purposes (turning an active figure into a static one), is too late.\n",
              "    var cells = IPython.notebook.get_cells();\n",
              "    var ncells = cells.length;\n",
              "    for (var i=0; i<ncells; i++) {\n",
              "        var cell = cells[i];\n",
              "        if (cell.cell_type === 'code'){\n",
              "            for (var j=0; j<cell.output_area.outputs.length; j++) {\n",
              "                var data = cell.output_area.outputs[j];\n",
              "                if (data.data) {\n",
              "                    // IPython >= 3 moved mimebundle to data attribute of output\n",
              "                    data = data.data;\n",
              "                }\n",
              "                if (data['text/html'] == html_output) {\n",
              "                    return [cell, data, j];\n",
              "                }\n",
              "            }\n",
              "        }\n",
              "    }\n",
              "}\n",
              "\n",
              "// Register the function which deals with the matplotlib target/channel.\n",
              "// The kernel may be null if the page has been refreshed.\n",
              "if (IPython.notebook.kernel != null) {\n",
              "    IPython.notebook.kernel.comm_manager.register_target('matplotlib', mpl.mpl_figure_comm);\n",
              "}\n"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "<div id='42e5dbf9-bbe3-4b04-b657-97f8d6a1e769'></div>"
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-24-fbf28e8eb9cb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mmatplotlib\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpyplot\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mps\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mh\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPlotShape\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# False tells h.PlotShape not to use NEURON's gui\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 5\u001b[0;31m \u001b[0mps\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mplot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpyplot\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      6\u001b[0m \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpyplot\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0max\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfig\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0maxes\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/neuron/__init__.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, graph, *args, **kwargs)\u001b[0m\n\u001b[1;32m   1235\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mgraph\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"matplotlib.pyplot\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1236\u001b[0m                 \u001b[0mfig\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgraph\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1237\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0m_do_plot_on_matplotlib_figure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1238\u001b[0m             \u001b[0;32melif\u001b[0m \u001b[0mgraph\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"plotly\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1239\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0m_do_plot_on_plotly\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/neuron/__init__.py\u001b[0m in \u001b[0;36m_do_plot_on_matplotlib_figure\u001b[0;34m(fig)\u001b[0m\n\u001b[1;32m   1088\u001b[0m             \u001b[0mkwargs\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msetdefault\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"picker\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1089\u001b[0m             \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_get_pyplot_axis3d\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfig\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1090\u001b[0;31m             \u001b[0m_lines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_do_plot\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlo\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msecs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mvariable\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1091\u001b[0m             \u001b[0mresult\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_mouseover_text\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1092\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/neuron/__init__.py\u001b[0m in \u001b[0;36m_do_plot\u001b[0;34m(self, val_min, val_max, sections, variable, cmap, **kwargs)\u001b[0m\n\u001b[1;32m   1033\u001b[0m                                             \u001b[0mval_min\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1034\u001b[0m                                             \u001b[0mval_max\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1035\u001b[0;31m                                             \u001b[0mval_range\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1036\u001b[0m                                         )\n\u001b[1;32m   1037\u001b[0m                                         \u001b[0mline\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mset_color\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/neuron/__init__.py\u001b[0m in \u001b[0;36m_get_color\u001b[0;34m(variable, val, cmap, lo, hi, val_range)\u001b[0m\n\u001b[1;32m   1119\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1120\u001b[0m                 col = color_to_hex(\n\u001b[0;32m-> 1121\u001b[0;31m                     \u001b[0mcmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m255\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mmin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmax\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mval\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlo\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhi\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mlo\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m/\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mval_range\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1122\u001b[0m                 )\n\u001b[1;32m   1123\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mcol\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.7/dist-packages/matplotlib/colors.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, X, alpha, bytes)\u001b[0m\n\u001b[1;32m    611\u001b[0m                 \u001b[0;31m# override its alpha just as for any other value.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    612\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 613\u001b[0;31m         \u001b[0mrgba\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlut\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mtake\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mxa\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'clip'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    614\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0miterable\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    615\u001b[0m             \u001b[0;31m# Return a tuple if the input was a scalar\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "%matplotlib notebook\n",
        "from neuron import h\n",
        "from matplotlib import pyplot\n",
        "ps = h.PlotShape(False)  # False tells h.PlotShape not to use NEURON's gui\n",
        "ps.plot(pyplot)\n",
        "fig = pyplot.figure(1)\n",
        "ax = fig.axes[0]\n",
        "print(\"Two-coupled\")\n",
        "for i in L1.twoCupArr:\n",
        "    # get into netconList\n",
        "    for j in i:\n",
        "        # get P1 and P2\n",
        "        drawline(j.precell(), j.postcell(), ax)\n",
        "print('Four-coupled:')\n",
        "for i in L1.fourCupArr:\n",
        "    # get into netConList\n",
        "    for j in i:\n",
        "        drawline(j.precell(), j.postcell(),ax)\n",
        "\n",
        "\n",
        "pyplot.show()\n",
        "# ps.show()"
      ],
      "id": "2jOVUuyWgaN8"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "N5NCjS3XWr6s"
      },
      "source": [
        "# Voltages before Learning"
      ],
      "id": "N5NCjS3XWr6s"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AHz7-xsesMqf"
      },
      "outputs": [],
      "source": [
        "%matplotlib inline"
      ],
      "id": "AHz7-xsesMqf"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kgGo1OVEJeIV",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 551
        },
        "outputId": "5dd1d804-8618-4264-ca67-bfea38caf50e"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x648 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plotCell(L1.DPC, 'DPC')"
      ],
      "id": "kgGo1OVEJeIV"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "cd04db13",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 551
        },
        "outputId": "5eb4fd1c-1683-4393-c022-ed3a13877b85"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1152x648 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plotCell(L1.sets[0].orn, 'ORN')"
      ],
      "id": "cd04db13"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "88eaf376"
      },
      "outputs": [],
      "source": [
        "plotCell(L1.sets[0].M1, 'M1', '(4-coupled)')"
      ],
      "id": "88eaf376"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "abb566c5"
      },
      "outputs": [],
      "source": [
        "plotCell(L1.sets[0].M2, 'M2', '(4-coupled)')"
      ],
      "id": "abb566c5"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "35b7d6f9"
      },
      "outputs": [],
      "source": [
        "plotCell(L1.sets[0].G1, 'G1', '(4-coupled)')"
      ],
      "id": "35b7d6f9"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8bd92108"
      },
      "outputs": [],
      "source": [
        "plotCell(L1.sets[0].G2, 'G2', '(4-coupled)')"
      ],
      "id": "8bd92108"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5b8e99cc"
      },
      "outputs": [],
      "source": [
        "plotCell(L1.sets[0].P1, 'P1', '(2-coupled)')"
      ],
      "id": "5b8e99cc"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wZvBRuU2aQoc"
      },
      "outputs": [],
      "source": [
        "plotCell(L1.sets[0].P2, 'P2', '(2-coupled)')"
      ],
      "id": "wZvBRuU2aQoc"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8b2874e2"
      },
      "source": [
        "# Voltage vs Voltage analysis"
      ],
      "id": "8b2874e2"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "acc174de"
      },
      "outputs": [],
      "source": [
        "%matplotlib inline\n",
        "recording_cell = L1.sets[0].P1\n",
        "recording_cell_2 = L1.sets[0].P2\n",
        "axon_m1 = h.Vector().record(recording_cell.axon(0.5)._ref_v)\n",
        "dend_m1 = h.Vector().record(recording_cell.dend(0.5)._ref_v)\n",
        "axon_m2 = h.Vector().record(recording_cell_2.axon(0.5)._ref_v)\n",
        "dend_m2 = h.Vector().record(recording_cell_2.dend(0.5)._ref_v)\n",
        "t = h.Vector().record(h._ref_t)\n",
        "\n",
        "h.finitialize(-70 * mV)\n",
        "h.continuerun(200 * ms)\n",
        "\n",
        "# f = plt2.figure(x_axis_label='v (mV)', y_axis_label='v (mV)')\n",
        "# f.line(list(axon_m1), list(axon_m2), line_width=1,legend_label='P1 axon vs P2 axon (2-coupled)',line_color='black')\n",
        "# f2 = plt2.figure(x_axis_label='v (mV)', y_axis_label='v (mV)')\n",
        "# f2.line(list(dend_m1), list(dend_m2), line_width=2,legend_label='P1 dendrite vs P2 dendrite (2-coupled)',line_color='black')\n",
        "# plt2.show(f)\n",
        "# plt2.show(f2)\n",
        "\n",
        "fig, axs = plt1.subplots(2, figsize=(16,18))\n",
        "axs[0].plot(list(axon_m1), list(axon_m2), label='P1 axon vs P2 axon (2-coupled)')\n",
        "axs[0].legend(loc=\"upper right\")\n",
        "axs[0].set_xlabel('t (ms)')\n",
        "axs[0].set_ylabel('v (mV)')\n",
        "axs[1].plot(list(dend_m1),list(dend_m2), label='P1 dendrite vs P2 dendrite (2-coupled)')\n",
        "axs[1].legend(loc=\"upper right\")\n",
        "axs[1].set_xlabel('t (ms)')\n",
        "axs[1].set_ylabel('v (mV)')\n",
        "plt1.show()"
      ],
      "id": "acc174de"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "af37e656"
      },
      "outputs": [],
      "source": [
        "recording_cell = L1.sets[0].P1\n",
        "recording_cell_2 = L1.sets[0].P2\n",
        "axon_m1 = h.Vector().record(recording_cell.axon(0.5)._ref_v)\n",
        "dend_m1 = h.Vector().record(recording_cell.dend(0.5)._ref_v)\n",
        "axon_m2 = h.Vector().record(recording_cell_2.axon(0.5)._ref_v)\n",
        "dend_m2 = h.Vector().record(recording_cell_2.dend(0.5)._ref_v)\n",
        "t = h.Vector().record(h._ref_t)\n",
        "\n",
        "h.finitialize(-70 * mV)\n",
        "h.continuerun(200 * ms)\n",
        "\n",
        "fig, axs = plt1.subplots(2, figsize=(16,18))\n",
        "axs[0].plot(list(axon_m1), list(axon_m2), label='P1 axon vs P2 axon (2-coupled)')\n",
        "axs[0].legend(loc=\"upper right\")\n",
        "axs[0].set_xlabel('t (ms)')\n",
        "axs[0].set_ylabel('v (mV)')\n",
        "axs[1].plot(list(dend_m1),list(dend_m2), label='P1 dendrite vs P2 dendrite (2-coupled)')\n",
        "axs[1].legend(loc=\"upper right\")\n",
        "axs[1].set_xlabel('t (ms)')\n",
        "axs[1].set_ylabel('v (mV)')\n",
        "plt1.show()"
      ],
      "id": "af37e656"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "f47d7f5d"
      },
      "outputs": [],
      "source": [
        "recording_cell = L1.sets[0].G1\n",
        "recording_cell_2 = L1.sets[0].G2\n",
        "axon_m1 = h.Vector().record(recording_cell.axon(0.5)._ref_v)\n",
        "dend_m1 = h.Vector().record(recording_cell.dend(0.5)._ref_v)\n",
        "axon_m2 = h.Vector().record(recording_cell_2.axon(0.5)._ref_v)\n",
        "dend_m2 = h.Vector().record(recording_cell_2.dend(0.5)._ref_v)\n",
        "t = h.Vector().record(h._ref_t)\n",
        "\n",
        "h.finitialize(-70 * mV)\n",
        "h.continuerun(200 * ms)\n",
        "fig, axs = plt1.subplots(2, figsize=(16,18))\n",
        "axs[0].plot(list(axon_m1), list(axon_m2), label='G1 axon vs G2 axon (4-coupled)')\n",
        "axs[0].legend(loc=\"upper right\")\n",
        "axs[0].set_xlabel('t (ms)')\n",
        "axs[0].set_ylabel('v (mV)')\n",
        "axs[1].plot(list(dend_m1),list(dend_m2), label='G1 dendrite vs G2 dendrite (4-coupled)')\n",
        "axs[1].legend(loc=\"upper right\")\n",
        "axs[1].set_xlabel('t (ms)')\n",
        "axs[1].set_ylabel('v (mV)')\n",
        "plt1.show()"
      ],
      "id": "f47d7f5d"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5FQ42tT8nFlj"
      },
      "outputs": [],
      "source": [
        "import numpy\n",
        "\n",
        "OB_axon = []\n",
        "OB_dend = []\n",
        "AON_axon = []\n",
        "AON_dend = []\n",
        "for i in L1.sets:\n",
        "    for j in enumerate(i.cells):\n",
        "        if j[0] > 2:\n",
        "            OB_axon.append(h.Vector().record(j[1].axon(0.5)._ref_v))\n",
        "            OB_dend.append(h.Vector().record(j[1].dend(0.5)._ref_v))\n",
        "\n",
        "for i in L1.AON.cells:\n",
        "    AON_axon.append(h.Vector().record(i.axon(0.5)._ref_v))\n",
        "    AON_dend.append(h.Vector().record(i.dend(0.5)._ref_v))\n",
        "t = h.Vector().record(h._ref_t)\n",
        "\n",
        "h.finitialize(-70 * mV)\n",
        "h.continuerun(200 * ms)\n",
        "\n",
        "OB_axon_plot = np.mean(OB_axon, 0)\n",
        "OB_dend_plot = np.mean(OB_dend, 0)\n",
        "AON_axon_plot = np.mean(AON_axon, 0)\n",
        "AON_dend_plot = np.mean(AON_dend, 0)\n",
        "\n",
        "fig, axs = plt1.subplots(2, figsize=(16,18))\n",
        "axs[0].plot(list(OB_axon_plot), list(AON_axon_plot), label='OB axon vs AON axon')\n",
        "axs[0].legend(loc=\"upper right\")\n",
        "axs[0].set_xlabel('t (ms)')\n",
        "axs[0].set_ylabel('v (mV)')\n",
        "axs[1].plot(list(OB_dend_plot),list(AON_dend_plot), label='OB dendrite vs AON dendrite')\n",
        "axs[1].legend(loc=\"upper right\")\n",
        "axs[1].set_xlabel('t (ms)')\n",
        "axs[1].set_ylabel('v (mV)')\n",
        "plt1.show()"
      ],
      "id": "5FQ42tT8nFlj"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UuUaM8xlpZmW"
      },
      "outputs": [],
      "source": [
        "import numpy\n",
        "\n",
        "OB_axon = []\n",
        "OB_dend = []\n",
        "two_axon = []\n",
        "two_dend = []\n",
        "for i in L1.sets:\n",
        "    for j in enumerate(i.cells):\n",
        "        if j[0] > 2:\n",
        "            OB_axon.append(h.Vector().record(j[1].axon(0.5)._ref_v))\n",
        "            OB_dend.append(h.Vector().record(j[1].dend(0.5)._ref_v))\n",
        "\n",
        "for i in L1.sets:\n",
        "    for j in enumerate(i.cells):\n",
        "        if j[0] < 2:\n",
        "            two_axon.append(h.Vector().record(j[1].axon(0.5)._ref_v))\n",
        "            two_dend.append(h.Vector().record(j[1].dend(0.5)._ref_v))\n",
        "t = h.Vector().record(h._ref_t)\n",
        "\n",
        "h.finitialize(-70 * mV)\n",
        "h.continuerun(200 * ms)\n",
        "\n",
        "OB_axon_plot = np.mean(OB_axon, 0)\n",
        "OB_dend_plot = np.mean(OB_dend, 0)\n",
        "two_axon_plot = np.mean(two_axon, 0)\n",
        "two_dend_plot = np.mean(two_dend, 0)\n",
        "\n",
        "fig, axs = plt1.subplots(2, figsize=(16,18))\n",
        "axs[0].plot(list(OB_axon_plot), list(two_axon_plot), label='OB axon vs 2-coupled axon')\n",
        "axs[0].legend(loc=\"upper right\")\n",
        "axs[0].set_xlabel('v (mV)')\n",
        "axs[0].set_ylabel('v (mV)')\n",
        "axs[1].plot(list(OB_dend_plot),list(two_dend_plot), label='OB dendrite vs 2-coupled dendrite')\n",
        "axs[1].legend(loc=\"upper right\")\n",
        "axs[1].set_xlabel('v (mv)')\n",
        "axs[1].set_ylabel('v (mV)')\n",
        "plt1.show()"
      ],
      "id": "UuUaM8xlpZmW"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "G2J7jHBzq9VZ"
      },
      "outputs": [],
      "source": [
        "import numpy\n",
        "\n",
        "OB_axon = []\n",
        "OB_dend = []\n",
        "PC_axon = []\n",
        "PC_dend = []\n",
        "for i in L1.sets:\n",
        "    for j in enumerate(i.cells):\n",
        "        if j[0] > 2:\n",
        "            OB_axon.append(h.Vector().record(j[1].axon(0.5)._ref_v))\n",
        "            OB_dend.append(h.Vector().record(j[1].dend(0.5)._ref_v))\n",
        "\n",
        "for i in L1.PC.cells:\n",
        "    PC_axon.append(h.Vector().record(i.axon(0.5)._ref_v))\n",
        "    PC_dend.append(h.Vector().record(i.dend(0.5)._ref_v))\n",
        "t = h.Vector().record(h._ref_t)\n",
        "\n",
        "h.finitialize(-70 * mV)\n",
        "h.continuerun(200 * ms)\n",
        "\n",
        "OB_axon_plot = np.mean(OB_axon, 0)\n",
        "OB_dend_plot = np.mean(OB_dend, 0)\n",
        "PC_axon_plot = np.mean(PC_axon, 0)\n",
        "PC_dend_plot = np.mean(PC_dend, 0)\n",
        "\n",
        "fig, axs = plt1.subplots(2, figsize=(16,18))\n",
        "axs[0].plot(list(OB_axon_plot), list(PC_axon_plot), label='OB axon vs PC axon')\n",
        "axs[0].legend(loc=\"upper right\")\n",
        "axs[0].set_xlabel('v (mV)')\n",
        "axs[0].set_ylabel('v (mV)')\n",
        "axs[1].plot(list(OB_dend_plot),list(PC_dend_plot), label='OB dendrite vs PC dendrite')\n",
        "axs[1].legend(loc=\"upper right\")\n",
        "axs[1].set_xlabel('v (mV)')\n",
        "axs[1].set_ylabel('v (mV)')\n",
        "plt1.show()"
      ],
      "id": "G2J7jHBzq9VZ"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RfdTmzQdtIdp"
      },
      "source": [
        "# Scatter Plots (Before Learning)"
      ],
      "id": "RfdTmzQdtIdp"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fWQNP7d8tLje"
      },
      "outputs": [],
      "source": [
        "%matplotlib inline\n",
        "h.finitialize(-70*mV)\n",
        "h.continuerun(300*ms)\n",
        "color=['green','orange','blue','red', 'pink', 'purple']\n",
        "label=['P1', 'P2', 'M1','M2','G1','G2']\n",
        "plt1.figure(figsize=(16,10))\n",
        "for j in range(len(L1.sets)):\n",
        "  #for i,cell in enumerate(L1.sets[j].cells):\n",
        "    plt1.scatter(L1.sets[j].cells[0].spike_times, [0.5 + 0.7*j for i in range(len(L1.sets[j].cells[0].spike_times))], s=10,color=color[0]) # for P1\n",
        "    plt1.scatter(L1.sets[j].cells[1].spike_times, [0.7 + 0.7*j for i in range(len(L1.sets[j].cells[1].spike_times))], s=10, color=color[1]) # for P2\n",
        "    plt1.scatter(L1.sets[j].cells[2].spike_times, [0.9 + 0.7*j for i in range(len(L1.sets[j].cells[2].spike_times))], s=10, color=color[2]) # for M1\n",
        "    plt1.scatter(L1.sets[j].cells[3].spike_times, [1.1 + 0.7*j for i in range(len(L1.sets[j].cells[3].spike_times))], s=10, color=color[3]) # for M2\n",
        "    plt1.scatter(L1.sets[j].cells[4].spike_times, [1.3 + 0.7*j for i in range(len(L1.sets[j].cells[4].spike_times))], s=10, color=color[4]) # for G1\n",
        "    plt1.scatter(L1.sets[j].cells[5].spike_times, [1.5 + 0.7*j for i in range(len(L1.sets[j].cells[5].spike_times))], s=10, color=color[5]) # for G2\n",
        "\n",
        "plt1.xlabel('time(ms)')\n",
        "plt1.legend(label)\n",
        "plt1.show()"
      ],
      "id": "fWQNP7d8tLje"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8ba65a81"
      },
      "source": [
        "# Scratchpad"
      ],
      "id": "8ba65a81"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "r1OpYqNWGErT"
      },
      "outputs": [],
      "source": [
        "# P1_axon_data = []\n",
        "# P2_axon_data = []\n",
        "# M1_axon_data = []\n",
        "# M2_axon_data = []\n",
        "# G1_axon_data = []\n",
        "# G2_axon_data = []\n",
        "\n",
        "\n",
        "# for i in range(len(L1.sets)):\n",
        "#     P1_axon_data.append(h.Vector().record(L1.sets[i].P1.axon(0.5)._ref_v))\n",
        "#     P2_axon_data.append(h.Vector().record(L1.sets[i].P2.axon(0.5)._ref_v))\n",
        "#     M1_axon_data.append(h.Vector().record(L1.sets[i].M1.axon(0.5)._ref_v))\n",
        "#     M2_axon_data.append(h.Vector().record(L1.sets[i].M2.axon(0.5)._ref_v))\n",
        "#     G1_axon_data.append(h.Vector().record(L1.sets[i].G1.axon(0.5)._ref_v))\n",
        "#     G2_axon_data.append(h.Vector().record(L1.sets[i].G2.axon(0.5)._ref_v))\n",
        "\n",
        "# t = h.Vector().record(h._ref_t)\n",
        "# h.finitialize(-70* mV)\n",
        "# h.continuerun(300*ms)\n",
        "\n",
        "# print(P1_axon_data)    \n",
        "# arr = np.array(P1_axon_data)\n",
        "# back_to_the_list = list(arr.sum(axis=0))\n",
        "# f = plt2.figure(x_axis_label='time')\n",
        "# f.line(P2_axon_data[0],P1_axon_data[0], line_width=1, line_color='black')\n",
        "# plt2.show(f)"
      ],
      "id": "r1OpYqNWGErT"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TL_yPmqSW-AZ"
      },
      "source": [
        "# Learning"
      ],
      "id": "TL_yPmqSW-AZ"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "cellView": "form",
        "id": "Xfmf2k-NDN29"
      },
      "outputs": [],
      "source": [
        "#@title Learning Mechanism { vertical-output: true }\n",
        "import sys, time\n",
        "tick = time.time()\n",
        "weight_data = []\n",
        "\n",
        "out = display(progress(0, epochs), display_id=True)\n",
        "\n",
        "for l in range(epochs):\n",
        "    #print(\"iteration no is\",l)\n",
        "    out.update(progress(l, epochs))    \n",
        "    # print(\"\\nmutual learning\")\n",
        "    P1_axon_data = []\n",
        "    P1_dend_data = []\n",
        "    P2_axon_data = []\n",
        "    P2_dend_data = []\n",
        "    M1_axon_data = []\n",
        "    M1_dend_data = []\n",
        "    M2_axon_data = []\n",
        "    M2_dend_data = []\n",
        "    G1_axon_data = []\n",
        "    G1_dend_data = []\n",
        "    G2_axon_data = []\n",
        "    G2_dend_data = []\n",
        "    P1_spike_times = []\n",
        "    P2_spike_times = []\n",
        "    M1_spike_times = []\n",
        "    M2_spike_times = []\n",
        "    G1_spike_times = []\n",
        "    G2_spike_times = []\n",
        "\n",
        "    h.finitialize(-70* mV)\n",
        "    h.continuerun(300*ms)\n",
        "    t = h.Vector().record(h._ref_t)\n",
        "    \n",
        "    for i in range(len(L1.sets)):\n",
        "        P1_axon_data.append(list(h.Vector().record(L1.sets[i].P1.axon(0.5)._ref_v)))\n",
        "        P1_dend_data.append(list(h.Vector().record(L1.sets[i].P1.dend(0.5)._ref_v)))\n",
        "        P1_spike_times.append(list(L1.sets[i].P1.spike_times))\n",
        "        P2_axon_data.append(list(h.Vector().record(L1.sets[i].P2.axon(0.5)._ref_v)))\n",
        "        P2_spike_times.append(list(L1.sets[i].P2.spike_times))\n",
        "        P2_dend_data.append(list(h.Vector().record(L1.sets[i].P2.dend(0.5)._ref_v)))\n",
        "        M1_axon_data.append(list(h.Vector().record(L1.sets[i].M1.axon(0.5)._ref_v)))\n",
        "        M1_dend_data.append(list(h.Vector().record(L1.sets[i].M1.dend(0.5)._ref_v)))\n",
        "        M1_spike_times.append(list(L1.sets[i].M1.spike_times))\n",
        "        M2_axon_data.append(list(h.Vector().record(L1.sets[i].M2.axon(0.5)._ref_v)))\n",
        "        M2_dend_data.append(list(h.Vector().record(L1.sets[i].M2.dend(0.5)._ref_v)))\n",
        "        M2_spike_times.append(list(L1.sets[i].M2.spike_times))\n",
        "        G1_axon_data.append(list(h.Vector().record(L1.sets[i].G1.axon(0.5)._ref_v)))\n",
        "        G1_dend_data.append(list(h.Vector().record(L1.sets[i].G1.dend(0.5)._ref_v)))\n",
        "        G1_spike_times.append(list(L1.sets[i].G1.spike_times))\n",
        "        G2_axon_data.append(list(h.Vector().record(L1.sets[i].G2.axon(0.5)._ref_v)))\n",
        "        G2_dend_data.append(list(h.Vector().record(L1.sets[i].G2.dend(0.5)._ref_v)))\n",
        "        G2_spike_times.append(list(L1.sets[i].G2.spike_times))\n",
        "\n",
        "   \n",
        "    # h.finitialize(-70 * mV)\n",
        "\n",
        "    for i in range(len(L1.sets)):\n",
        "        # 2-coupled STDP-based learning\n",
        "        L1.sets[i].nc1.weight[0] += generate_L_weight_delta(P1_spike_times[i], P2_spike_times[i])\n",
        "        # logging\n",
        "        # print(\"P1_axon\", P1_spike_times[i], P2_spike_times[i])\n",
        "        L1.sets[i].nc2.weight[0] += generate_L_weight_delta(P2_spike_times[i], P1_spike_times[i])\n",
        "        L1.sets[i].nc3.weight[0] += generate_L_weight_delta(P1_spike_times[i], M1_spike_times[i])\n",
        "        # 4-coupled STDP-based learning\n",
        "        L1.sets[i].nc4.weight[0] += generate_L_weight_delta(M1_spike_times[i], M2_spike_times[i])\n",
        "        L1.sets[i].nc5.weight[0] += generate_L_weight_delta(M2_spike_times[i], M1_spike_times[i])\n",
        "        L1.sets[i].nc6.weight[0] += generate_L_weight_delta(M2_spike_times[i], G1_spike_times[i])\n",
        "        L1.sets[i].nc7.weight[0] += generate_L_weight_delta(G1_spike_times[i], M2_spike_times[i])\n",
        "        L1.sets[i].nc8.weight[0] += generate_L_weight_delta(G1_spike_times[i], G2_spike_times[i])\n",
        "        L1.sets[i].nc9.weight[0] += generate_L_weight_delta(G2_spike_times[i], G1_spike_times[i])\n",
        "        L1.sets[i].nc10.weight[0] += generate_L_weight_delta(G2_spike_times[i], M1_spike_times[i])\n",
        "        L1.sets[i].nc11.weight[0] += generate_L_weight_delta(M1_spike_times[i], G2_spike_times[i])\n",
        "        L1.sets[i].nc12.weight[0] += generate_L_weight_delta(M1_spike_times[i], G1_spike_times[i])\n",
        "        L1.sets[i].nc13.weight[0] += generate_L_weight_delta(G1_spike_times[i], M1_spike_times[i])\n",
        "        # L1.sets[i].DPC.weight[0] += generate_L_weight_delta(G1_spike_times[i], M1_spike_times[i])\n",
        "        \n",
        "    # do a proper logging function\n",
        "    weight_data.append(L1.sets[0].nc1.weight[0])\n",
        "\n",
        "\n",
        "    #Lateral Learning\n",
        "    for i in range(len(L1.sets)-1):\n",
        "        # 2-coupled part\n",
        "        L1.twoCupArr[i][0].weight[0] += generate_L_weight_delta(P1_spike_times[i], P1_spike_times[i+1])\n",
        "        L1.twoCupArr[i][1].weight[0] += generate_L_weight_delta(P1_spike_times[i+1], P1_spike_times[i])\n",
        "        # 4-coupled part\n",
        "        L1.fourCupArr[i][0].weight[0] += generate_L_weight_delta(M1_spike_times[i], M1_spike_times[i+1])\n",
        "        L1.fourCupArr[i][1].weight[0] += generate_L_weight_delta(M1_spike_times[i+1], M1_spike_times[i])\n",
        "        L1.fourCupArr[i][2].weight[0] += generate_L_weight_delta(G1_spike_times[i], G1_spike_times[i+1])\n",
        "        L1.fourCupArr[i][3].weight[0] += generate_L_weight_delta(G1_spike_times[i+1], G1_spike_times[i])\n",
        "    # plotCell(L1.sets[-1].M1, 'M1')\n",
        "\n",
        "\n",
        "out.update(progress(epochs, epochs))    \n",
        "tock = time.time()\n",
        "print(\"The time it took to learn\", tock-tick, \"seconds\")"
      ],
      "id": "Xfmf2k-NDN29"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "cellView": "form",
        "id": "n-sh-9ksMxO1"
      },
      "outputs": [],
      "source": [
        "#@title Time Taken { vertical-output: true }\n",
        "totalend = time.time()\n",
        "print(\"Total time it took: \", totalend-totalstart)"
      ],
      "id": "n-sh-9ksMxO1"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4tGgp4nPXab1"
      },
      "source": [
        "# Voltage vs Voltage Analysis (After Learning)"
      ],
      "id": "4tGgp4nPXab1"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KdmcamZlPYm4"
      },
      "outputs": [],
      "source": [
        "import numpy\n",
        "\n",
        "OB_axon = []\n",
        "OB_dend = []\n",
        "AON_axon = []\n",
        "AON_dend = []\n",
        "for i in L1.sets:\n",
        "    for j in enumerate(i.cells):\n",
        "        if j[0] > 2:\n",
        "            OB_axon.append(h.Vector().record(j[1].axon(0.5)._ref_v))\n",
        "            OB_dend.append(h.Vector().record(j[1].dend(0.5)._ref_v))\n",
        "\n",
        "for i in L1.AON.cells:\n",
        "    AON_axon.append(h.Vector().record(i.axon(0.5)._ref_v))\n",
        "    AON_dend.append(h.Vector().record(i.dend(0.5)._ref_v))\n",
        "t = h.Vector().record(h._ref_t)\n",
        "\n",
        "h.finitialize(-70 * mV)\n",
        "h.continuerun(200 * ms)\n",
        "\n",
        "OB_axon_plot = np.mean(OB_axon, 0)\n",
        "OB_dend_plot = np.mean(OB_dend, 0)\n",
        "AON_axon_plot = np.mean(AON_axon, 0)\n",
        "AON_dend_plot = np.mean(AON_dend, 0)\n",
        "\n",
        "fig, axs = plt1.subplots(2, figsize=(16,18))\n",
        "axs[0].plot(list(OB_axon_plot), list(AON_axon_plot), label='OB axon vs AON axon')\n",
        "axs[0].legend(loc=\"upper right\")\n",
        "axs[0].set_xlabel('v (mV)')\n",
        "axs[0].set_ylabel('v (mV)')\n",
        "axs[1].plot(list(OB_dend_plot),list(AON_dend_plot), label='OB dendrite vs AON dendrite')\n",
        "axs[1].legend(loc=\"upper right\")\n",
        "axs[1].set_xlabel('v (mV)')\n",
        "axs[1].set_ylabel('v (mV)')\n",
        "plt1.show()"
      ],
      "id": "KdmcamZlPYm4"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wNYluUPKPYnC"
      },
      "outputs": [],
      "source": [
        "import numpy\n",
        "\n",
        "OB_axon = []\n",
        "OB_dend = []\n",
        "two_axon = []\n",
        "two_dend = []\n",
        "for i in L1.sets:\n",
        "    for j in enumerate(i.cells):\n",
        "        if j[0] > 2:\n",
        "            OB_axon.append(h.Vector().record(j[1].axon(0.5)._ref_v))\n",
        "            OB_dend.append(h.Vector().record(j[1].dend(0.5)._ref_v))\n",
        "\n",
        "for i in L1.sets:\n",
        "    for j in enumerate(i.cells):\n",
        "        if j[0] < 2:\n",
        "            two_axon.append(h.Vector().record(j[1].axon(0.5)._ref_v))\n",
        "            two_dend.append(h.Vector().record(j[1].dend(0.5)._ref_v))\n",
        "t = h.Vector().record(h._ref_t)\n",
        "\n",
        "h.finitialize(-70 * mV)\n",
        "h.continuerun(200 * ms)\n",
        "\n",
        "OB_axon_plot = np.mean(OB_axon, 0)\n",
        "OB_dend_plot = np.mean(OB_dend, 0)\n",
        "two_axon_plot = np.mean(two_axon, 0)\n",
        "two_dend_plot = np.mean(two_dend, 0)\n",
        "\n",
        "fig, axs = plt1.subplots(2, figsize=(16,18))\n",
        "axs[0].plot(list(OB_axon_plot), list(two_axon_plot), label='OB axon vs 2-coupled axon')\n",
        "axs[0].legend(loc=\"upper right\")\n",
        "axs[0].set_xlabel('v (mV)')\n",
        "axs[0].set_ylabel('v (mV)')\n",
        "axs[1].plot(list(OB_dend_plot),list(two_dend_plot), label='OB dendrite vs 2-coupled dendrite')\n",
        "axs[1].legend(loc=\"upper right\")\n",
        "axs[1].set_xlabel('v (mV)')\n",
        "axs[1].set_ylabel('v (mV)')\n",
        "plt1.show()"
      ],
      "id": "wNYluUPKPYnC"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-BH_-ksaPYnC"
      },
      "outputs": [],
      "source": [
        "import numpy\n",
        "\n",
        "OB_axon = []\n",
        "OB_dend = []\n",
        "PC_axon = []\n",
        "PC_dend = []\n",
        "for i in L1.sets:\n",
        "    for j in enumerate(i.cells):\n",
        "        if j[0] > 2:\n",
        "            OB_axon.append(h.Vector().record(j[1].axon(0.5)._ref_v))\n",
        "            OB_dend.append(h.Vector().record(j[1].dend(0.5)._ref_v))\n",
        "\n",
        "for i in L1.PC.cells:\n",
        "    PC_axon.append(h.Vector().record(i.axon(0.5)._ref_v))\n",
        "    PC_dend.append(h.Vector().record(i.dend(0.5)._ref_v))\n",
        "t = h.Vector().record(h._ref_t)\n",
        "\n",
        "h.finitialize(-70 * mV)\n",
        "h.continuerun(200 * ms)\n",
        "\n",
        "OB_axon_plot = np.mean(OB_axon, 0)\n",
        "OB_dend_plot = np.mean(OB_dend, 0)\n",
        "PC_axon_plot = np.mean(PC_axon, 0)\n",
        "PC_dend_plot = np.mean(PC_dend, 0)\n",
        "\n",
        "fig, axs = plt1.subplots(2, figsize=(16,18))\n",
        "axs[0].plot(list(OB_axon_plot), list(PC_axon_plot), label='OB axon vs PC axon')\n",
        "axs[0].legend(loc=\"upper right\")\n",
        "axs[0].set_xlabel('v (mV)')\n",
        "axs[0].set_ylabel('v (mV)')\n",
        "axs[1].plot(list(OB_dend_plot),list(PC_dend_plot), label='OB dendrite vs PC dendrite')\n",
        "axs[1].legend(loc=\"upper right\")\n",
        "axs[1].set_xlabel('v (mV)')\n",
        "axs[1].set_ylabel('v (mV)')\n",
        "plt1.show()"
      ],
      "id": "-BH_-ksaPYnC"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "heuZils4vn16"
      },
      "outputs": [],
      "source": [
        "recording_cell = L1.sets[-1].M1\n",
        "recording_cell_2 = L1.AON.M1\n",
        "axon_m1 = h.Vector().record(recording_cell.axon(0.5)._ref_v)\n",
        "dend_m1 = h.Vector().record(recording_cell.dend(0.5)._ref_v)\n",
        "axon_m2 = h.Vector().record(recording_cell_2.axon(0.5)._ref_v)\n",
        "dend_m2 = h.Vector().record(recording_cell_2.dend(0.5)._ref_v)\n",
        "t = h.Vector().record(h._ref_t)\n",
        "\n",
        "h.finitialize(-70 * mV)\n",
        "h.continuerun(200 * ms)\n",
        "\n",
        "# f = plt2.figure(x_axis_label='M1 Axon v (mV)', y_axis_label='AON Axon v (mV)')\n",
        "# f.line(list(axon_m1), list(axon_m2), line_width=1,legend_label='4-coupled M1 axon vs AON axon',line_color='black')\n",
        "# f2 = plt2.figure(x_axis_label='M1 Dendrite v (mV)', y_axis_label='AON dendrite v (mV)')\n",
        "# f2.line(list(dend_m1), list(dend_m2), line_width=2,legend_label='4-coupled M1 dendrite vs AON dendrite',line_color='black')\n",
        "# plt2.show(f)\n",
        "# plt2.show(f2)\n",
        "\n",
        "fig, axs = plt1.subplots(2, figsize=(16,18))\n",
        "axs[0].plot(list(axon_m1), list(axon_m2), label='4-coupled M1 axon vs AON axon')\n",
        "axs[0].legend(loc=\"upper right\")\n",
        "axs[0].set_xlabel('v (mV)')\n",
        "axs[0].set_ylabel('v (mV)')\n",
        "axs[1].plot(list(dend_m1),list(dend_m2), label='4-coupled M1 dendrite vs AON dendrite')\n",
        "axs[1].legend(loc=\"upper right\")\n",
        "axs[1].set_xlabel('v (mV)')\n",
        "axs[1].set_ylabel('v (mV)')\n",
        "plt1.show()"
      ],
      "id": "heuZils4vn16"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dpdAXofpXg5X"
      },
      "source": [
        "# Weights (While Learning)"
      ],
      "id": "dpdAXofpXg5X"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "li94TAixZcMj"
      },
      "outputs": [],
      "source": [
        "print(weight_data)\n",
        "f = plt1.figure()\n",
        "x = [i for i in range(epochs)]\n",
        "# f.line(x, weight_data, line_width=1, line_color='black')\n",
        "plt1.plot(x, weight_data)\n",
        "plt1.show(f)"
      ],
      "id": "li94TAixZcMj"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4fsYjO7nXqIO"
      },
      "source": [
        "# Voltages (After Learning)"
      ],
      "id": "4fsYjO7nXqIO"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "10ee714f"
      },
      "outputs": [],
      "source": [
        "plotCell(L1.sets[-1].P1, 'P1')"
      ],
      "id": "10ee714f"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "vTPQQ-MiDTE7"
      },
      "outputs": [],
      "source": [
        "plotCell(L1.sets[-1].P2, 'P2')"
      ],
      "id": "vTPQQ-MiDTE7"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qW4ZMAEnlITg"
      },
      "outputs": [],
      "source": [
        "plotCell(L1.sets[-1].M1, 'M1')"
      ],
      "id": "qW4ZMAEnlITg"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_Xo8OFebpZWd"
      },
      "outputs": [],
      "source": [
        "plotCell(L1.sets[-1].G1, 'G1')"
      ],
      "id": "_Xo8OFebpZWd"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "I0UDNCQpp7Uj"
      },
      "outputs": [],
      "source": [
        "plotCell(L1.sets[-1].M2, 'M2')"
      ],
      "id": "I0UDNCQpp7Uj"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eRknOYTFpbFG"
      },
      "outputs": [],
      "source": [
        "plotCell(L1.sets[-1].G2, 'G2')"
      ],
      "id": "eRknOYTFpbFG"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Ac0U4rBbmvkJ"
      },
      "outputs": [],
      "source": [
        "plotCell(L1.DPC, 'DPC')"
      ],
      "id": "Ac0U4rBbmvkJ"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "uVtKjQachT6y"
      },
      "outputs": [],
      "source": [
        "plotCell(L1.AON.M1, 'AON')"
      ],
      "id": "uVtKjQachT6y"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Qnz23rrwhXQ1"
      },
      "outputs": [],
      "source": [
        "plotCell(L1.PC.G1, 'Pyramidal Cell')"
      ],
      "id": "Qnz23rrwhXQ1"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BIHFPxj2tbhC"
      },
      "source": [
        "# Scatter Plots (After Learning)"
      ],
      "id": "BIHFPxj2tbhC"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "65R31SQCteXh"
      },
      "outputs": [],
      "source": [
        "%matplotlib inline\n",
        "h.finitialize(-70*mV)\n",
        "h.continuerun(300*ms)\n",
        "color=['green','orange','blue','red', 'pink', 'purple']\n",
        "label=['P1', 'P2', 'M1','M2','G1','G2']\n",
        "plt1.figure(figsize=(16,10))\n",
        "for j in range(len(L1.sets)):\n",
        "  #for i,cell in enumerate(L1.sets[j].cells):\n",
        "    plt1.scatter(L1.sets[j].cells[0].spike_times, [0.5 + 0.7*j for i in range(len(L1.sets[j].cells[0].spike_times))], s=10,color=color[0]) # for P1\n",
        "    plt1.scatter(L1.sets[j].cells[1].spike_times, [0.7 + 0.7*j for i in range(len(L1.sets[j].cells[1].spike_times))], s=10, color=color[1]) # for P2\n",
        "    plt1.scatter(L1.sets[j].cells[2].spike_times, [0.9 + 0.7*j for i in range(len(L1.sets[j].cells[2].spike_times))], s=10, color=color[2]) # for M1\n",
        "    plt1.scatter(L1.sets[j].cells[3].spike_times, [1.1 + 0.7*j for i in range(len(L1.sets[j].cells[3].spike_times))], s=10, color=color[3]) # for M2\n",
        "    plt1.scatter(L1.sets[j].cells[4].spike_times, [1.3 + 0.7*j for i in range(len(L1.sets[j].cells[4].spike_times))], s=10, color=color[4]) # for G1\n",
        "    plt1.scatter(L1.sets[j].cells[5].spike_times, [1.5 + 0.7*j for i in range(len(L1.sets[j].cells[5].spike_times))], s=10, color=color[5]) # for G2\n",
        "\n",
        "plt1.xlabel('time(ms)')\n",
        "plt1.legend(label)\n",
        "plt1.show()"
      ],
      "id": "65R31SQCteXh"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RYcaSlQaX8NY"
      },
      "source": [
        "# Scratchpad "
      ],
      "id": "RYcaSlQaX8NY"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "SL3LpJeyY1do"
      },
      "outputs": [],
      "source": [
        "name = 'DPC'\n",
        "addendum=\"\"\n",
        "recording_cell = L1.DPC\n",
        "cell_axon = h.Vector().record(recording_cell.axon(0.5)._ref_v)\n",
        "cell_dend = h.Vector().record(recording_cell.dend(0.5)._ref_v)\n",
        "t = h.Vector().record(h._ref_t)\n",
        "\n",
        "h.finitialize(-70 * mV)\n",
        "h.continuerun(300 * ms)\n",
        "\n",
        "f = plt2.figure(x_axis_label='t (ms)', y_axis_label='v (mV)')\n",
        "f.line(t, list(cell_axon), line_width=1,legend_label=name+' axon '+addendum,line_color='black')\n",
        "f.line(t, list(cell_dend), line_width=2,legend_label=name+' dendrite '+addendum,line_color='red', line_dash='dashed')\n",
        "plt2.show(f)"
      ],
      "id": "SL3LpJeyY1do"
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "39kj6_YAdD6p"
      },
      "outputs": [],
      "source": [
        "%matplotlib inline\n",
        "# def plotCell(source, name, addendum=''):\n",
        "recording_cell = L1.sets[-1].M1\n",
        "cell_axon = h.Vector().record(recording_cell.axon(0.5)._ref_v)\n",
        "cell_dend = h.Vector().record(recording_cell.dend(0.5)._ref_v)\n",
        "t = h.Vector().record(h._ref_t)\n",
        "\n",
        "h.finitialize(-70 * mV)\n",
        "h.continuerun(300 * ms)\n",
        "\n",
        "f = plt1.figure(figsize=(16,9))\n",
        "ax = f.add_subplot(1,1,1)\n",
        "ax.plot(t, list(cell_axon), label=name+' axon '+addendum)\n",
        "ax.plot(t, list(cell_dend), label=name+' dendrite '+addendum)\n",
        "ax.legend(loc=\"upper right\")\n",
        "ax.set_xlabel('t (ms)')\n",
        "ax.set_ylabel('v (mV)')\n",
        "plt1.show()"
      ],
      "id": "39kj6_YAdD6p"
    },
    {
      "cell_type": "code",
      "source": [
        ""
      ],
      "metadata": {
        "id": "wHzAnMcdDWJ6"
      },
      "id": "wHzAnMcdDWJ6",
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "collapsed_sections": [
        "L_9d7LtSWFA0",
        "MWYTz03xLsWS",
        "IqVU4uAHwxiJ",
        "90Kn6XE2V6nW",
        "VWHFMMFXWjhI",
        "N5NCjS3XWr6s",
        "8b2874e2",
        "8ba65a81",
        "4tGgp4nPXab1",
        "dpdAXofpXg5X",
        "4fsYjO7nXqIO",
        "RYcaSlQaX8NY"
      ],
      "name": "Latest: Complete Network.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.6"
    },
    "widgets": {
      "application/vnd.jupyter.widget-state+json": {
        "80ebd91b5e354b6f8071a631fa2aff5e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "CheckboxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "CheckboxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "CheckboxView",
            "description": "Add noise",
            "description_tooltip": null,
            "disabled": false,
            "indent": true,
            "layout": "IPY_MODEL_a506ee872483488cb3cebf3f94bedc94",
            "style": "IPY_MODEL_613c6e9f892c470fa476fa3470c4c3cd",
            "value": false
          }
        },
        "a506ee872483488cb3cebf3f94bedc94": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "613c6e9f892c470fa476fa3470c4c3cd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "6bb671ecce3848faa30c5bb6f5fe5cb3": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_c0a4c36cc78c40b7a7d100f0f7bac6b1",
              "IPY_MODEL_7f769bc98d0843b8aee51c8908ea1819"
            ],
            "layout": "IPY_MODEL_9dac16c9719a4ac1af6358195ed1ca22"
          }
        },
        "c0a4c36cc78c40b7a7d100f0f7bac6b1": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatTextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatTextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "FloatTextView",
            "continuous_update": false,
            "description": "Amplitude:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_61565e225dc34226b683b29b8085cb9d",
            "step": null,
            "style": "IPY_MODEL_bf82a076447743418768652b2244e89e",
            "value": 0.1
          }
        },
        "7f769bc98d0843b8aee51c8908ea1819": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatTextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatTextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "FloatTextView",
            "continuous_update": false,
            "description": "sets:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_75ce9fdf78924d5a8d09f9fa6018c119",
            "step": null,
            "style": "IPY_MODEL_8faa89d263cd48c68e6cb174ee1b9477",
            "value": 15
          }
        },
        "9dac16c9719a4ac1af6358195ed1ca22": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "61565e225dc34226b683b29b8085cb9d": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "bf82a076447743418768652b2244e89e": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "75ce9fdf78924d5a8d09f9fa6018c119": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "8faa89d263cd48c68e6cb174ee1b9477": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "1a09e6c6b2534ef19346482ce844bcb5": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DropdownModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DropdownModel",
            "_options_labels": [
              "uniform",
              "normal",
              "poisson"
            ],
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "DropdownView",
            "description": "distribution:",
            "description_tooltip": null,
            "disabled": false,
            "index": 0,
            "layout": "IPY_MODEL_266f7095f68b49cbb71451051f2475fd",
            "style": "IPY_MODEL_9cab9187449c4a08886636e2e6a75d53"
          }
        },
        "266f7095f68b49cbb71451051f2475fd": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "9cab9187449c4a08886636e2e6a75d53": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "f47de5c49b054231ad3309bb58b1f0ad": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "VBoxModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "VBoxModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "VBoxView",
            "box_style": "",
            "children": [
              "IPY_MODEL_e8c1994de6e643b0bddac6b430733e65",
              "IPY_MODEL_2f1a89c38d044833ac5383b0c0b6bccc",
              "IPY_MODEL_634b5ca951384347a64971d4d1c1fafd"
            ],
            "layout": "IPY_MODEL_6ebd08a969fb44f3a0fd82f4aa490150"
          }
        },
        "e8c1994de6e643b0bddac6b430733e65": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatTextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatTextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "FloatTextView",
            "continuous_update": false,
            "description": "low:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_498ee61a61fc4e7b9f85ca606a58c7d2",
            "step": null,
            "style": "IPY_MODEL_4bf49209f62643a782cba1be3a71e4a6",
            "value": 1
          }
        },
        "2f1a89c38d044833ac5383b0c0b6bccc": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatTextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatTextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "FloatTextView",
            "continuous_update": false,
            "description": "high:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_7b1eae17d24b4fc8902851ac4cd95196",
            "step": null,
            "style": "IPY_MODEL_428ecd7fb05943aab50ac889ebe7fece",
            "value": 1.5
          }
        },
        "634b5ca951384347a64971d4d1c1fafd": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "FloatTextModel",
          "model_module_version": "1.5.0",
          "state": {
            "_dom_classes": [],
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "FloatTextModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/controls",
            "_view_module_version": "1.5.0",
            "_view_name": "FloatTextView",
            "continuous_update": false,
            "description": "size:",
            "description_tooltip": null,
            "disabled": false,
            "layout": "IPY_MODEL_cc1d04f6ff5a4faf827e21bb50665a4a",
            "step": null,
            "style": "IPY_MODEL_58a7f326e5cc455eb01c0a710452e9eb",
            "value": 15
          }
        },
        "6ebd08a969fb44f3a0fd82f4aa490150": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "498ee61a61fc4e7b9f85ca606a58c7d2": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "4bf49209f62643a782cba1be3a71e4a6": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "7b1eae17d24b4fc8902851ac4cd95196": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "428ecd7fb05943aab50ac889ebe7fece": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        },
        "cc1d04f6ff5a4faf827e21bb50665a4a": {
          "model_module": "@jupyter-widgets/base",
          "model_name": "LayoutModel",
          "model_module_version": "1.2.0",
          "state": {
            "_model_module": "@jupyter-widgets/base",
            "_model_module_version": "1.2.0",
            "_model_name": "LayoutModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "LayoutView",
            "align_content": null,
            "align_items": null,
            "align_self": null,
            "border": null,
            "bottom": null,
            "display": null,
            "flex": null,
            "flex_flow": null,
            "grid_area": null,
            "grid_auto_columns": null,
            "grid_auto_flow": null,
            "grid_auto_rows": null,
            "grid_column": null,
            "grid_gap": null,
            "grid_row": null,
            "grid_template_areas": null,
            "grid_template_columns": null,
            "grid_template_rows": null,
            "height": null,
            "justify_content": null,
            "justify_items": null,
            "left": null,
            "margin": null,
            "max_height": null,
            "max_width": null,
            "min_height": null,
            "min_width": null,
            "object_fit": null,
            "object_position": null,
            "order": null,
            "overflow": null,
            "overflow_x": null,
            "overflow_y": null,
            "padding": null,
            "right": null,
            "top": null,
            "visibility": null,
            "width": null
          }
        },
        "58a7f326e5cc455eb01c0a710452e9eb": {
          "model_module": "@jupyter-widgets/controls",
          "model_name": "DescriptionStyleModel",
          "model_module_version": "1.5.0",
          "state": {
            "_model_module": "@jupyter-widgets/controls",
            "_model_module_version": "1.5.0",
            "_model_name": "DescriptionStyleModel",
            "_view_count": null,
            "_view_module": "@jupyter-widgets/base",
            "_view_module_version": "1.2.0",
            "_view_name": "StyleView",
            "description_width": ""
          }
        }
      }
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}